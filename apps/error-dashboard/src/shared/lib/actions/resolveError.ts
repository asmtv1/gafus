"use server";

import { prisma } from "@gafus/prisma";
import { createErrorDashboardLogger } from "@gafus/logger";

const logger = createErrorDashboardLogger('error-dashboard-resolve');

export async function resolveErrorAction(errorId: string) {
  try {
    logger.info("üîß Resolving error", { errorId, operation: 'resolve' });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –æ—à–∏–±–∫–∞
    const existingError = await prisma.errorReport.findUnique({
      where: { id: errorId }
    });

    if (!existingError) {
      logger.warn("‚ö†Ô∏è Error not found", { errorId, operation: 'resolve' });
      return {
        success: false,
        error: "–û—à–∏–±–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
      };
    }

    if (existingError.resolved) {
      logger.info("‚ÑπÔ∏è Error already resolved", { errorId, operation: 'resolve' });
      return {
        success: true,
        message: "–û—à–∏–±–∫–∞ —É–∂–µ –±—ã–ª–∞ —Ä–µ—à–µ–Ω–∞"
      };
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –æ—à–∏–±–∫—É –∫–∞–∫ —Ä–µ—à–µ–Ω–Ω—É—é
    const updatedError = await prisma.errorReport.update({
      where: { id: errorId },
      data: {
        resolved: true,
        resolvedAt: new Date(),
        resolvedBy: "system" // –í –±—É–¥—É—â–µ–º –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
      }
    });

    logger.info("‚úÖ Error resolved successfully", { 
      errorId, 
      operation: 'resolve',
      resolvedAt: updatedError.resolvedAt
    });

    return {
      success: true,
      message: "–û—à–∏–±–∫–∞ —É—Å–ø–µ—à–Ω–æ –ø–æ–º–µ—á–µ–Ω–∞ –∫–∞–∫ —Ä–µ—à–µ–Ω–Ω–∞—è",
      error: updatedError
    };

  } catch (error) {
    logger.error("‚ùå Failed to resolve error", error as Error, { 
      errorId, 
      operation: 'resolve' 
    });
    
    return {
      success: false,
      error: "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑—Ä–µ—à–∏—Ç—å –æ—à–∏–±–∫—É"
    };
  }
}

export async function unresolveErrorAction(errorId: string) {
  try {
    logger.info("üîÑ Unresolving error", { errorId, operation: 'unresolve' });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –æ—à–∏–±–∫–∞
    const existingError = await prisma.errorReport.findUnique({
      where: { id: errorId }
    });

    if (!existingError) {
      logger.warn("‚ö†Ô∏è Error not found", { errorId, operation: 'unresolve' });
      return {
        success: false,
        error: "–û—à–∏–±–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
      };
    }

    if (!existingError.resolved) {
      logger.info("‚ÑπÔ∏è Error already unresolved", { errorId, operation: 'unresolve' });
      return {
        success: true,
        message: "–û—à–∏–±–∫–∞ —É–∂–µ –Ω–µ —Ä–µ—à–µ–Ω–∞"
      };
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –æ—à–∏–±–∫—É –∫–∞–∫ –Ω–µ —Ä–µ—à–µ–Ω–Ω—É—é
    const updatedError = await prisma.errorReport.update({
      where: { id: errorId },
      data: {
        resolved: false,
        resolvedAt: null,
        resolvedBy: null
      }
    });

    logger.info("‚úÖ Error unresolved successfully", { 
      errorId, 
      operation: 'unresolve'
    });

    return {
      success: true,
      message: "–û—à–∏–±–∫–∞ —É—Å–ø–µ—à–Ω–æ –ø–æ–º–µ—á–µ–Ω–∞ –∫–∞–∫ –Ω–µ —Ä–µ—à–µ–Ω–Ω–∞—è",
      error: updatedError
    };

  } catch (error) {
    logger.error("‚ùå Failed to unresolve error", error as Error, { 
      errorId, 
      operation: 'unresolve' 
    });
    
    return {
      success: false,
      error: "–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –æ—à–∏–±–∫–∏"
    };
  }
}
