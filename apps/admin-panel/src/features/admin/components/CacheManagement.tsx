"use client";

import { useState } from "react";
import { useSession } from "next-auth/react";

import {
  Alert,
  Box,
  Button,
  Card,
  CardContent,
  CardHeader,
  Typography,
} from "@mui/material";
import { invalidateCoursesCacheAction } from "@/shared/lib/actions/invalidateCacheActions";

interface CacheManagementProps {
  className?: string;
}

export default function CacheManagement({ className }: CacheManagementProps) {
  const { data: session } = useSession();
  const [isInvalidating, setIsInvalidating] = useState(false);
  const [message, setMessage] = useState<string | null>(null);

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
  const isAdmin = session?.user?.role && ["ADMIN", "MODERATOR"].includes(session.user.role);

  if (!isAdmin) {
    return null;
  }

  const handleInvalidateCoursesCache = async () => {
    setIsInvalidating(true);
    setMessage(null);

    try {
      const result = await invalidateCoursesCacheAction();

      if (result.success) {
        setMessage(`‚úÖ ${result.message}`);
      } else {
        setMessage(`‚ùå –û—à–∏–±–∫–∞: ${result.error}`);
      }
    } catch (error) {
      setMessage(`‚ùå –û—à–∏–±–∫–∞: ${error instanceof Error ? error.message : "Unknown error"}`);
    } finally {
      setIsInvalidating(false);
    }
  };

  return (
    <Card className={className}>
      <CardHeader>
        <Typography variant="h6" component="h2">
          –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫—ç—à–µ–º
        </Typography>
        <Typography variant="body2" color="text.secondary">
          –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–Ω—ã–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º –¥–∞–Ω–Ω—ã—Ö
        </Typography>
      </CardHeader>
      <CardContent>
        <Box sx={{ display: "flex", flexDirection: "column", gap: 2 }}>
          <Box>
            <Button
              variant="contained"
              color="primary"
              onClick={handleInvalidateCoursesCache}
              disabled={isInvalidating}
              sx={{ mb: 1 }}
            >
              {isInvalidating ? "‚è≥ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ..." : "üîÑ –û–±–Ω–æ–≤–∏—Ç—å –∫—ç—à –∫—É—Ä—Å–æ–≤"}
            </Button>
            <Typography variant="body2" color="text.secondary">
              –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ—Ç –∫—ç—à –≤—Å–µ—Ö –∫—É—Ä—Å–æ–≤ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ—Å–ª–µ –º–∞—Å—Å–æ–≤—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π –∫—É—Ä—Å–æ–≤.
            </Typography>
          </Box>

          {message && (
            <Alert 
              severity={message.startsWith("‚úÖ") ? "success" : "error"}
              sx={{ mt: 2 }}
            >
              {message}
            </Alert>
          )}
        </Box>
      </CardContent>
    </Card>
  );
}

