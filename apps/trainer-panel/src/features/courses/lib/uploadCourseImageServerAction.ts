"use server";

import { reportErrorToDashboard } from "@shared/lib/actions/reportError";
import { createTrainerPanelLogger } from "@gafus/logger";
import { randomUUID } from "crypto";
import { uploadFileToCDN, deleteFileFromCDN } from "@gafus/cdn-upload";

// –°–æ–∑–¥–∞–µ–º –ª–æ–≥–≥–µ—Ä –¥–ª—è uploadCourseImageServerAction
const logger = createTrainerPanelLogger('trainer-panel-upload-course-image');

export async function uploadCourseImageServerAction(formData: FormData, courseId?: string) {
  let file: File | null = null;

  try {
    file = formData.get("image") as File | null;

    if (!file || file.size === 0) {
      throw new Error("–§–∞–π–ª –Ω–µ –ø–æ–ª—É—á–µ–Ω –∏–ª–∏ –ø—É—Å—Ç");
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞
    const allowedTypes = ["image/jpeg", "image/jpg", "image/png", "image/webp"];
    if (!allowedTypes.includes(file.type)) {
      throw new Error("–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞. –†–∞–∑—Ä–µ—à–µ–Ω—ã —Ç–æ–ª—å–∫–æ JPEG, PNG –∏ WebP");
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞ (–º–∞–∫—Å–∏–º—É–º 10MB)
    const maxSize = 10 * 1024 * 1024; // 10MB
    if (file.size > maxSize) {
      throw new Error("–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 10MB");
    }

        const ext = file.name.split(".").pop();
        const fileName = `${randomUUID()}.${ext}`;
        const relativePath = `courses/${fileName}`;

        // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ä–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫—É—Ä—Å–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (–µ—Å–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫—É—Ä—Å)
        let oldImageUrl: string | null = null;
        if (courseId) {
          const { prisma } = await import("@gafus/prisma");
          const existingCourse = await prisma.course.findUnique({
            where: { id: courseId },
            select: { logoImg: true },
          });
          oldImageUrl = existingCourse?.logoImg || null;
        }

        // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–æ–≤—ã–π —Ñ–∞–π–ª –≤ CDN
        const fileUrl = await uploadFileToCDN(file, relativePath);

        // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ CDN (–µ—Å–ª–∏ –µ—Å—Ç—å)
        if (oldImageUrl) {
          const oldRelativePath = oldImageUrl.replace('https://gafus-media.storage.yandexcloud.net/uploads/', '');
          logger.info(`üîç –ù–∞–π–¥–µ–Ω–æ —Å—Ç–∞—Ä–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫—É—Ä—Å–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: ${oldImageUrl} -> ${oldRelativePath}`);
          try {
            await deleteFileFromCDN(oldRelativePath);
            logger.info(`üóëÔ∏è –°—Ç–∞—Ä–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫—É—Ä—Å–∞ —É–¥–∞–ª–µ–Ω–æ –∏–∑ CDN: ${oldRelativePath}`);
          } catch (error) {
            logger.error(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫—É—Ä—Å–∞: ${error}`, error as Error);
          }
        } else {
          logger.info(`‚ÑπÔ∏è –°—Ç–∞—Ä–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫—É—Ä—Å–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ`);
        }

    return fileUrl;
  } catch (error) {
    logger.error("‚ùå Error in uploadCourseImageServerAction", error as Error, {
      operation: 'upload_course_image_error',
      fileName: file?.name,
      fileSize: file?.size
    });
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—à–∏–±–∫—É –≤ error dashboard
    if (file) {
      await reportErrorToDashboard({
        message: "Failed to upload course image",
        stack: error instanceof Error ? error.stack : String(error),
        appName: "trainer-panel",
        environment: process.env.NODE_ENV || "development",
        additionalContext: {
          fileName: file.name,
          fileSize: file.size,
          fileType: file.type,
        },
        tags: ["courses", "upload", "server-action"],
      });
    }
    
    throw error;
  }
}
