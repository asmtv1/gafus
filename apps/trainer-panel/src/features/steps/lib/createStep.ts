"use server";


import { createTrainerPanelLogger } from "@gafus/logger";
import { authOptions } from "@gafus/auth";
import { prisma } from "@gafus/prisma";
import { reportErrorToDashboard } from "@shared/lib/actions/reportError";
import { validateForm } from "@shared/lib/validation/serverValidation";
import { revalidatePath } from "next/cache";
import { getServerSession } from "next-auth";
import { uploadFileToCDN, deleteFileFromCDN } from "@gafus/cdn-upload";
import { randomUUID } from "crypto";

import type { ActionResult } from "@gafus/types";

// –°–æ–∑–¥–∞–µ–º –ª–æ–≥–≥–µ—Ä –¥–ª—è create-step
const logger = createTrainerPanelLogger('trainer-panel-create-step');

export async function createStep(
  prevState: ActionResult,
  formData: FormData,
): Promise<ActionResult> {
  try {
    const title = formData.get("title")?.toString() || "";
    const description = formData.get("description")?.toString() || "";
    const durationStr = formData.get("duration")?.toString() || "";
    const videoUrl = formData.get("videoUrl")?.toString() || "";
    const type = formData.get("type")?.toString() || "TRAINING";
    const checklistStr = formData.get("checklist")?.toString() || "";
    
    // –ü–æ–ª—è –¥–ª—è —Ç–∏–ø–æ–≤ —ç–∫–∑–∞–º–µ–Ω–∞
    const requiresVideoReport = formData.get("requiresVideoReport")?.toString() === "true";
    const requiresWrittenFeedback = formData.get("requiresWrittenFeedback")?.toString() === "true";
    const hasTestQuestions = formData.get("hasTestQuestions")?.toString() === "true";

    const imageFiles = formData.getAll("images") as File[];
    const deletedImages = formData.getAll("deletedImages").map(String);
    const pdfUrls = formData.getAll("pdfUrls").map(String);

    logger.info("–°–æ–∑–¥–∞–Ω–∏–µ —à–∞–≥–∞", {
      operation: 'create_step_start',
      title,
      description,
      durationStr,
      videoUrl,
      type,
      imageFilesCount: imageFiles.length,
      pdfUrlsCount: pdfUrls.length,
      requiresVideoReport,
      requiresWrittenFeedback,
      hasTestQuestions
    });

    // –°–µ—Ä–≤–µ—Ä–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
    const validation = validateForm(
      {
        title,
        description,
        duration: type === "TRAINING" ? durationStr : "",
        videoUrl: type === "TRAINING" ? videoUrl : "",
        type,
        checklist: type === "EXAMINATION" ? checklistStr : "",
      },
      {
        title: (value: unknown) => {
          const v = String(value ?? "");
          if (!v || v.trim().length === 0) return "–ù–∞–∑–≤–∞–Ω–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ";
          if (v.length < 3) return "–ú–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞";
          if (v.length > 100) return "–ú–∞–∫—Å–∏–º—É–º 100 —Å–∏–º–≤–æ–ª–æ–≤";
          return null;
        },
        description: (value: unknown) => {
          const v = String(value ?? "");
          if (!v || v.trim().length === 0) return "–û–ø–∏—Å–∞–Ω–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ";
          if (v.length < 10) return "–ú–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤";
          if (v.length > 2000) return "–ú–∞–∫—Å–∏–º—É–º 2000 —Å–∏–º–≤–æ–ª–æ–≤";
          return null;
        },
        duration: (value: unknown) => {
          const v = String(value ?? "");
          // –î–ª—è —ç–∫–∑–∞–º–µ–Ω–∞—Ü–∏–æ–Ω–Ω—ã—Ö —à–∞–≥–æ–≤ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞
          if (type === "EXAMINATION") return null;
          if (!v || v.trim().length === 0) return "–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞";
          const num = parseInt(v, 10);
          if (isNaN(num)) return "–î–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º";
          if (num <= 0) return "–î–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º";
          if (num > 1000) return "–ú–∞–∫—Å–∏–º—É–º 1000 —Å–µ–∫—É–Ω–¥";
          return null;
        },
        videoUrl: (value: unknown) => {
          const v = String(value ?? "");
          if (!v) return null; // –ù–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ
          const urlPattern =
            /^https?:\/\/(www\.)?(youtube\.com|youtu\.be|rutube\.ru|vimeo\.com)\/.+/;
          return urlPattern.test(v) ? null : "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏ –Ω–∞ –≤–∏–¥–µ–æ";
        },
        type: (value: unknown) => {
          const v = String(value ?? "");
          if (!v || v.trim().length === 0) return "–¢–∏–ø —à–∞–≥–∞ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω";
          if (!["TRAINING", "EXAMINATION"].includes(v)) return "–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø —à–∞–≥–∞";
          return null;
        },
        checklist: (value: unknown) => {
          const v = String(value ?? "");
          // –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω—ã —Ç–µ—Å—Ç–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã, —Ç–æ —á–µ–∫-–ª–∏—Å—Ç –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω
          if (hasTestQuestions) {
            if (!v) return "–î–ª—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–æ–±–∞–≤–∏—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –≤–æ–ø—Ä–æ—Å";
            try {
              const checklist = JSON.parse(v);
              if (!Array.isArray(checklist)) return "–ß–µ–∫-–ª–∏—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–∞—Å—Å–∏–≤–æ–º";
              if (checklist.length === 0) return "–î–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –≤–æ–ø—Ä–æ—Å";
              for (const question of checklist) {
                if (!question.question || question.question.trim().length === 0) {
                  return "–í—Å–µ –≤–æ–ø—Ä–æ—Å—ã –¥–æ–ª–∂–Ω—ã –∏–º–µ—Ç—å —Ç–µ–∫—Å—Ç";
                }
                if (!Array.isArray(question.options) || question.options.length < 2) {
                  return "–ö–∞–∂–¥—ã–π –≤–æ–ø—Ä–æ—Å –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –º–∏–Ω–∏–º—É–º 2 –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞";
                }
                if (question.options.some((opt: string) => !opt || opt.trim().length === 0)) {
                  return "–í—Å–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω—ã";
                }
              }
              return null;
            } catch {
              return "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —á–µ–∫-–ª–∏—Å—Ç–∞";
            }
          }
          return null; // –ï—Å–ª–∏ —Ç–µ—Å—Ç–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã –Ω–µ –≤—ã–±—Ä–∞–Ω—ã, —á–µ–∫-–ª–∏—Å—Ç –Ω–µ –Ω—É–∂–µ–Ω
        },
      },
    );

    if (!validation.isValid) {
      return { error: `–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: ${Object.values(validation.errors).join(", ")}` };
    }

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –¥–ª—è —ç–∫–∑–∞–º–µ–Ω–∞—Ü–∏–æ–Ω–Ω—ã—Ö —à–∞–≥–æ–≤
    if (type === "EXAMINATION") {
      if (!hasTestQuestions && !requiresVideoReport && !requiresWrittenFeedback) {
        return { error: "–î–ª—è —ç–∫–∑–∞–º–µ–Ω–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —à–∞–≥–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ç–∏–ø —ç–∫–∑–∞–º–µ–Ω–∞" };
      }
    }

    const duration = type === "TRAINING" ? parseInt(durationStr, 10) : null;
    const checklist = type === "EXAMINATION" && checklistStr ? JSON.parse(checklistStr) : null;
    
    const session = await getServerSession(authOptions);
    if (!session?.user?.id) {
      return { error: "–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã" };
    }
    const authorId = session.user.id;

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ CDN (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã—Ö —à–∞–≥–æ–≤)
    const imageUrls: string[] = [];
    if (type === "TRAINING" && imageFiles.length > 0) {
      try {
        logger.info(`üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º ${imageFiles.length} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ CDN`);
        
        for (const file of imageFiles) {
          const ext = file.name.split(".").pop();
          const fileName = `${randomUUID()}.${ext}`;
          const relativePath = `steps/${fileName}`;
          
          const fileUrl = await uploadFileToCDN(file, relativePath);
          imageUrls.push(fileUrl);
        }
        
        logger.info(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${imageUrls.length} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ CDN`);
      } catch (error) {
        logger.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ CDN", error as Error);
        return { error: "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è" };
      }
    }

    // –£–¥–∞–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ CDN (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã—Ö —à–∞–≥–æ–≤)
    if (type === "TRAINING" && deletedImages.length > 0) {
      try {
        logger.info(`üóëÔ∏è –£–¥–∞–ª—è–µ–º ${deletedImages.length} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏–∑ CDN`);
        
        for (const imageUrl of deletedImages) {
          // –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å –∏–∑ CDN URL
          let relativePath = imageUrl;
          if (imageUrl.startsWith('https://gafus-media.storage.yandexcloud.net/')) {
            relativePath = imageUrl.replace('https://gafus-media.storage.yandexcloud.net/', '');
          }
          if (relativePath.startsWith('/')) {
            relativePath = relativePath.substring(1);
          }
          
          await deleteFileFromCDN(relativePath);
        }
        
        logger.info(`‚úÖ –£–¥–∞–ª–µ–Ω–æ ${deletedImages.length} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏–∑ CDN`);
      } catch (error) {
        logger.error("‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏–∑ CDN", error as Error);
        // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —à–∞–≥–∞ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è
      }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    const user = await prisma.user.findUnique({ where: { id: authorId } });
    if (!user) {
      return { error: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö" };
    }

    const _step = await prisma.step.create({
      data: {
        title,
        description,
        durationSec: duration,
        type: type as "TRAINING" | "EXAMINATION",
        videoUrl: type === "TRAINING" ? (videoUrl || null) : null,
        imageUrls: type === "TRAINING" ? imageUrls : [],
        pdfUrls: type === "TRAINING" ? pdfUrls : [],
        checklist: hasTestQuestions ? checklist : null,
        requiresVideoReport: type === "EXAMINATION" ? requiresVideoReport : false,
        requiresWrittenFeedback: type === "EXAMINATION" ? requiresWrittenFeedback : false,
        hasTestQuestions: type === "EXAMINATION" ? hasTestQuestions : false,
        authorId,
      },
    });

    revalidatePath("/main-panel/steps");

    return { success: true };
  } catch (error) {
    logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —à–∞–≥–∞:", error as Error, { operation: 'error' });
    await reportErrorToDashboard({
      message: error instanceof Error ? error.message : "Unknown error",
      stack: error instanceof Error ? error.stack : undefined,
      appName: "trainer-panel",
      environment: process.env.NODE_ENV || "development",
      additionalContext: { action: "createStep" },
      tags: ["steps", "create"],
    });
    return { error: "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —à–∞–≥" };
  }
}
