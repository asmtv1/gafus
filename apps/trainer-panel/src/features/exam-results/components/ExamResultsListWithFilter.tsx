"use client";

import React, { useState, useEffect } from "react";
import { 
  Box, 
  FormControlLabel, 
  Switch, 
  Typography, 
  Chip,
  FormControl,
  InputLabel,
  Select,
  MenuItem
} from "@/utils/muiImports";
import { ExamResultsList } from "./ExamResultsList";
import type { ExamResultWithDetails } from "../lib/getExamResults";
import { useRouter, useSearchParams } from "next/navigation";

interface ExamResultsListWithFilterProps {
  initialExamResults: ExamResultWithDetails[];
  initialHideCompleted: boolean;
}

export function ExamResultsListWithFilter({ 
  initialExamResults, 
  initialHideCompleted 
}: ExamResultsListWithFilterProps) {
  const router = useRouter();
  const searchParams = useSearchParams();
  const [examResults, setExamResults] = useState(initialExamResults);
  const [hideCompleted, setHideCompleted] = useState(initialHideCompleted);
  const [sortBy, setSortBy] = useState<'date' | 'course'>('date');
  const [filterByType, setFilterByType] = useState<'all' | 'test' | 'written' | 'video'>('all');

  // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–≥–¥–∞ –ø—Ä–∏—Ö–æ–¥—è—Ç –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å —Å–µ—Ä–≤–µ—Ä–∞
  useEffect(() => {
    setExamResults(initialExamResults);
  }, [initialExamResults]);

  // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å localStorage –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
  useEffect(() => {
    // –§–∏–ª—å—Ç—Ä "–°–∫—Ä—ã—Ç—å –∑–∞—á—Ç—ë–Ω–Ω—ã–µ" –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤–∫–ª—é—á—ë–Ω (true)
    const savedHideCompleted = localStorage.getItem('examResults_hideCompleted');
    const shouldHide = savedHideCompleted !== null ? savedHideCompleted === 'true' : true;
    setHideCompleted(shouldHide);
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É
    const savedSortBy = localStorage.getItem('examResults_sortBy') as 'date' | 'course' | null;
    if (savedSortBy) setSortBy(savedSortBy);
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∏–ª—å—Ç—Ä –ø–æ —Ç–∏–ø—É
    const savedFilterType = localStorage.getItem('examResults_filterType') as 'all' | 'test' | 'written' | 'video' | null;
    if (savedFilterType) setFilterByType(savedFilterType);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º URL, –µ—Å–ª–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–µ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
    if (shouldHide !== initialHideCompleted) {
      const params = new URLSearchParams(searchParams.toString());
      if (shouldHide) {
        params.set('hideCompleted', 'true');
      } else {
        params.delete('hideCompleted');
      }
      router.replace(`?${params.toString()}`, { scroll: false });
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);

  const handleToggleChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    const newValue = event.target.checked;
    setHideCompleted(newValue);
    localStorage.setItem('examResults_hideCompleted', String(newValue));
    
    const params = new URLSearchParams(searchParams.toString());
    if (newValue) {
      params.set('hideCompleted', 'true');
    } else {
      params.delete('hideCompleted');
    }
    router.replace(`?${params.toString()}`, { scroll: false });
  };

  const handleSortChange = (event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement> | { target: { value: unknown } }) => {
    const newValue = (event.target as { value: string }).value as 'date' | 'course';
    setSortBy(newValue);
    localStorage.setItem('examResults_sortBy', newValue);
  };

  const handleFilterTypeChange = (event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement> | { target: { value: unknown } }) => {
    const newValue = (event.target as { value: string }).value as 'all' | 'test' | 'written' | 'video';
    setFilterByType(newValue);
    localStorage.setItem('examResults_filterType', newValue);
  };

  // –§–∏–ª—å—Ç—Ä—É–µ–º –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ
  const filteredAndSortedResults = React.useMemo(() => {
    let results = [...examResults];
    
    // –§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É
    if (hideCompleted) {
      results = results.filter(result => result.userStep.status === "IN_PROGRESS");
    }
    
    // –§–∏–ª—å—Ç—Ä –ø–æ —Ç–∏–ø—É –æ—Ç—á—ë—Ç–∞
    if (filterByType !== 'all') {
      results = results.filter(result => {
        if (filterByType === 'test') return result.userStep.stepOnDay.step.hasTestQuestions;
        if (filterByType === 'written') return result.userStep.stepOnDay.step.requiresWrittenFeedback;
        if (filterByType === 'video') return result.userStep.stepOnDay.step.requiresVideoReport;
        return true;
      });
    }
    
    // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
    if (sortBy === 'date') {
      results.sort((a, b) => new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime());
    } else if (sortBy === 'course') {
      results.sort((a, b) => 
        a.userStep.userTraining.dayOnCourse.course.name.localeCompare(
          b.userStep.userTraining.dayOnCourse.course.name, 
          'ru'
        )
      );
    }
    
    return results;
  }, [examResults, hideCompleted, filterByType, sortBy]);

  // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
  const totalResults = examResults.length;
  const pendingCount = examResults.filter(r => r.userStep.status === "IN_PROGRESS").length;
  const completedCount = totalResults - pendingCount;

  return (
    <Box>
      {/* –ü–∞–Ω–µ–ª—å —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ */}
      <Box sx={{ 
        mb: 3, 
        p: 2.5, 
        backgroundColor: 'background.paper',
        borderRadius: 2,
        border: '1px solid',
        borderColor: 'divider',
        boxShadow: 1
      }}>
        {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
        <Box sx={{ mb: 2, display: 'flex', gap: 1, flexWrap: 'wrap' }}>
          <Chip 
            label={`–í—Å–µ–≥–æ: ${totalResults}`} 
            size="small" 
            variant="outlined"
          />
          <Chip 
            label={`–û–∂–∏–¥–∞—é—Ç: ${pendingCount}`} 
            size="small" 
            color="warning"
            variant="outlined"
          />
          <Chip 
            label={`–ó–∞—á—Ç–µ–Ω—ã: ${completedCount}`} 
            size="small" 
            color="success"
            variant="outlined"
          />
          <Chip 
            label={`–û—Ç–æ–±—Ä–∞–∂–µ–Ω–æ: ${filteredAndSortedResults.length}`} 
            size="small" 
            color="primary"
            variant="filled"
          />
        </Box>

        {/* –§–∏–ª—å—Ç—Ä—ã –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ */}
        <Box sx={{ 
          display: 'flex', 
          alignItems: 'center', 
          gap: 2, 
          flexWrap: 'wrap' 
        }}>
          <FormControlLabel
            control={
              <Switch 
                checked={hideCompleted} 
                onChange={handleToggleChange}
                color="primary"
              />
            }
            label="–°–∫—Ä—ã—Ç—å –∑–∞—á—Ç—ë–Ω–Ω—ã–µ"
            sx={{ 
              '& .MuiFormControlLabel-label': { 
                color: 'text.primary',
                fontWeight: 500
              } 
            }}
          />

          <FormControl size="small" sx={{ minWidth: 200 }}>
            <InputLabel>–¢–∏–ø –æ—Ç—á—ë—Ç–∞</InputLabel>
            <Select
              value={filterByType}
              onChange={handleFilterTypeChange}
              label="–¢–∏–ø –æ—Ç—á—ë—Ç–∞"
            >
              <MenuItem value="all">–í—Å–µ —Ç–∏–ø—ã</MenuItem>
              <MenuItem value="test">–¢–µ—Å—Ç–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã</MenuItem>
              <MenuItem value="written">–ü–∏—Å—å–º–µ–Ω–Ω–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å</MenuItem>
              <MenuItem value="video">–í–∏–¥–µ–æ –æ—Ç—á—ë—Ç</MenuItem>
            </Select>
          </FormControl>

          <FormControl size="small" sx={{ minWidth: 200 }}>
            <InputLabel>–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞</InputLabel>
            <Select
              value={sortBy}
              onChange={handleSortChange}
              label="–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞"
            >
              <MenuItem value="date">–ü–æ –¥–∞—Ç–µ (–Ω–æ–≤—ã–µ –ø–µ—Ä–≤—ã–µ)</MenuItem>
              <MenuItem value="course">–ü–æ –∫—É—Ä—Å—É (–ê-–Ø)</MenuItem>
            </Select>
          </FormControl>
        </Box>
      </Box>

      {/* –°–ø–∏—Å–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ */}
      {filteredAndSortedResults.length === 0 ? (
        <Box sx={{ 
          textAlign: 'center', 
          py: 8,
          color: 'text.secondary'
        }}>
          <Typography variant="h6" gutterBottom>
            {hideCompleted 
              ? "–ù–µ—Ç —ç–∫–∑–∞–º–µ–Ω–æ–≤, –æ–∂–∏–¥–∞—é—â–∏—Ö –ø—Ä–æ–≤–µ—Ä–∫–∏" 
              : "–†–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —ç–∫–∑–∞–º–µ–Ω–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç"}
          </Typography>
          <Typography variant="body2">
            {hideCompleted 
              ? "–í—Å–µ —ç–∫–∑–∞–º–µ–Ω—ã –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã! üéâ" 
              : "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ—è–≤—è—Ç—Å—è, –∫–æ–≥–¥–∞ —Å—Ç—É–¥–µ–Ω—Ç—ã –Ω–∞—á–Ω—É—Ç —Å–¥–∞–≤–∞—Ç—å —ç–∫–∑–∞–º–µ–Ω—ã."}
          </Typography>
          {filterByType !== 'all' && (
            <Typography variant="caption" sx={{ mt: 1, display: 'block' }}>
              –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä –ø–æ —Ç–∏–ø—É –æ—Ç—á—ë—Ç–∞
            </Typography>
          )}
        </Box>
      ) : (
        <ExamResultsList examResults={filteredAndSortedResults} />
      )}
    </Box>
  );
}

