// Safari/WebKit-specific settings
function getSafariSettings() {
  const isIOS = /iPad|iPhone|iPod/.test(navigator.userAgent);
  const isWebKit = /webkit/i.test(navigator.userAgent);
  const isChrome = /chrome/i.test(navigator.userAgent);
  const isSafari = isWebKit && (/safari/i.test(navigator.userAgent) && !isChrome || isIOS);
  const isStandalone = navigator.standalone;
  
  return {
    isSafari,
    isIOS,
    isWebKit,
    isStandalone,
    useMinimalLogic: isSafari,
    useSimpleNotifications: isSafari,
    // –î–ª—è PWA Safari: –±–æ–ª–µ–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞
    usePWALogic: isSafari && isStandalone,
  };
}

const settings = getSafariSettings();

console.log('ü¶Å Service Worker loaded', {
  isSafari: settings.isSafari,
  isIOS: settings.isIOS,
  isStandalone: settings.isStandalone,
  usePWALogic: settings.usePWALogic
});

// –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
function createNotificationOptions(title, options = {}) {
  const safariIcon = settings.isSafari ? '/icons/icon-256-safari.png' : '/icons/icon192.png';
  const safariBadge = settings.isSafari ? '/icons/badge-72.png' : '/icons/icon192.png';
  
  if (settings.useSimpleNotifications) {
    // –î–ª—è Safari: —Ç–æ–ª—å–∫–æ –±–∞–∑–æ–≤—ã–µ –æ–ø—Ü–∏–∏ —Å Safari-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–º–∏ –∏–∫–æ–Ω–∫–∞–º–∏
    return {
      body: options.body || '–ù–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ',
      icon: options.icon || safariIcon,
      badge: options.badge || safariBadge,
      tag: options.tag || 'default',
      requireInteraction: false,
      silent: false,
    };
  }
  
  // –î–ª—è –¥—Ä—É–≥–∏—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤: –ø–æ–ª–Ω—ã–µ –æ–ø—Ü–∏–∏
  return {
    body: options.body || '–ù–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ',
    icon: options.icon || safariIcon,
    badge: options.badge || safariBadge,
    tag: options.tag || 'default',
    requireInteraction: options.requireInteraction || false,
    silent: options.silent || false,
    data: options.data || {},
    actions: options.actions || [],
    ...options,
  };
}

// Install event
self.addEventListener('install', (event) => {
  console.log('ü¶Å SW: Install event');
  
  if (settings.useMinimalLogic) {
    // Safari: –ø—Ä–æ—Å—Ç–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞
    console.log('ü¶Å Safari: –ü—Ä–æ—Å—Ç–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ SW');
    self.skipWaiting();
  } else {
    // –î—Ä—É–≥–∏–µ –±—Ä–∞—É–∑–µ—Ä—ã: —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞
    console.log('‚úÖ SW: Standard install');
    event.waitUntil(
      Promise.resolve().then(() => {
        console.log('‚úÖ SW: Install completed');
        return self.skipWaiting();
      })
    );
  }
});

// Activate event
self.addEventListener('activate', (event) => {
  console.log('ü¶Å SW: Activate event');
  
  if (settings.useMinimalLogic) {
    // Safari: –ø—Ä–æ—Å—Ç–∞—è –∞–∫—Ç–∏–≤–∞—Ü–∏—è
    console.log('ü¶Å Safari: –ü—Ä–æ—Å—Ç–∞—è –∞–∫—Ç–∏–≤–∞—Ü–∏—è SW');
    event.waitUntil(
      self.clients.claim().catch(error => {
        console.warn('‚ö†Ô∏è Safari: Claim warning:', error);
      })
    );
  } else {
    // –î—Ä—É–≥–∏–µ –±—Ä–∞—É–∑–µ—Ä—ã: —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –∞–∫—Ç–∏–≤–∞—Ü–∏—è
    console.log('‚úÖ SW: Standard activate');
    event.waitUntil(
      Promise.resolve()
        .then(() => {
          console.log('‚úÖ SW: Activate completed');
          return self.clients.claim();
        })
        .catch(error => {
          console.error('‚ùå SW: Activate error:', error);
        })
    );
  }
});

// Fetch event
self.addEventListener('fetch', (event) => {
  if (settings.useMinimalLogic) {
    // Safari: –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ fetch
    event.respondWith(
      fetch(event.request)
        .catch(() => {
          // Fallback –¥–ª—è –æ—Ñ–ª–∞–π–Ω
          if (event.request.destination === 'document') {
            return new Response(
              '<html><body><h1>Gafus</h1><p>–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É</p></body></html>',
              { headers: { 'Content-Type': 'text/html' } }
            );
          }
          return new Response('Offline');
        })
    );
  } else {
    // –î—Ä—É–≥–∏–µ –±—Ä–∞—É–∑–µ—Ä—ã: –ø–æ–ª–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ fetch
    event.respondWith(
      caches.match(event.request)
        .then((response) => {
          if (response) {
            return response;
          }
          return fetch(event.request);
        })
        .catch(() => {
          if (event.request.destination === 'document') {
            return caches.match('/offline.html');
          }
        })
    );
  }
});

// Push event
self.addEventListener('push', (event) => {
  console.log('ü¶Å SW: Push event received');
  
  if (settings.useMinimalLogic) {
    // Safari: –ø—Ä–æ—Å—Ç–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ push
    console.log('ü¶Å Safari: –ü—Ä–æ—Å—Ç–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ push');
    
    let data = {};
    try {
      data = event.data ? event.data.json() : {};
    } catch (error) {
      console.warn('‚ö†Ô∏è Safari: –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å push –¥–∞–Ω–Ω—ã–µ:', error);
      data = { title: 'Gafus', body: '–ù–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ' };
    }
    
    const title = data.title || 'Gafus';
    const options = createNotificationOptions(title, {
      body: data.body || '–ù–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ',
      icon: data.icon || '/icons/icon192.png',
      data: data,
    });
    
    event.waitUntil(
      self.registration.showNotification(title, options)
        .catch(error => {
          console.error('‚ùå Safari: –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error);
        })
    );
  } else {
    // –î—Ä—É–≥–∏–µ –±—Ä–∞—É–∑–µ—Ä—ã: –ø–æ–ª–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ push
    console.log('‚úÖ SW: Standard push handling');
    
    let data = {};
    try {
      data = event.data ? event.data.json() : {};
    } catch (error) {
      console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å push –¥–∞–Ω–Ω—ã–µ:', error);
      data = { title: 'Gafus', body: '–ù–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ' };
    }
    
    const title = data.title || 'Gafus';
    const options = createNotificationOptions(title, {
      body: data.body || '–ù–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ',
      icon: data.icon || '/icons/icon192.png',
      badge: data.badge || '/icons/icon192.png',
      tag: data.tag || 'default',
      requireInteraction: data.requireInteraction || false,
      data: data,
      actions: data.actions || [],
    });
    
    event.waitUntil(
      Promise.resolve()
        .then(() => {
          console.log('‚úÖ SW: Showing notification');
          return self.registration.showNotification(title, options);
        })
        .catch(error => {
          console.error('‚ùå SW: Error showing notification:', error);
        })
    );
  }
});

// Message event
self.addEventListener('message', (event) => {
  console.log('ü¶Å SW: Message event', event.data);
  
  if (settings.useMinimalLogic) {
    // Safari: –ø—Ä–æ—Å—Ç–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
    if (event.data && event.data.type === 'SKIP_WAITING') {
      console.log('ü¶Å Safari: Skip waiting');
      self.skipWaiting();
    }
  } else {
    // –î—Ä—É–≥–∏–µ –±—Ä–∞—É–∑–µ—Ä—ã: –ø–æ–ª–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
    if (event.data && event.data.type === 'SKIP_WAITING') {
      console.log('‚úÖ SW: Skip waiting');
      self.skipWaiting();
    }
    
    if (event.data && event.data.type === 'CLAIM') {
      console.log('‚úÖ SW: Claim clients');
      self.clients.claim();
    }
  }
});

// Notification click event
self.addEventListener('notificationclick', (event) => {
  console.log('ü¶Å SW: Notification click', event.notification);
  
  if (settings.useMinimalLogic) {
    // Safari: –ø—Ä–æ—Å—Ç–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞
    console.log('ü¶Å Safari: –ü—Ä–æ—Å—Ç–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è');
    
    event.notification.close();
    
    event.waitUntil(
      self.clients.matchAll({ type: 'window' })
        .then((clients) => {
          if (clients.length > 0) {
            // –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –æ–∫–Ω–æ
            return clients[0].focus();
          } else {
            // –û—Ç–∫—Ä—ã–≤–∞–µ–º –Ω–æ–≤–æ–µ –æ–∫–Ω–æ
            return self.clients.openWindow('/');
          }
        })
        .catch(error => {
          console.error('‚ùå Safari: –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–ª–∏–∫–∞:', error);
        })
    );
  } else {
    // –î—Ä—É–≥–∏–µ –±—Ä–∞—É–∑–µ—Ä—ã: –ø–æ–ª–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞
    console.log('‚úÖ SW: Standard notification click handling');
    
    event.notification.close();
    
    event.waitUntil(
      Promise.resolve()
        .then(() => {
          return self.clients.matchAll({ type: 'window' });
        })
        .then((clients) => {
          if (clients.length > 0) {
            console.log('‚úÖ SW: Focusing existing window');
            return clients[0].focus();
          } else {
            console.log('‚úÖ SW: Opening new window');
            return self.clients.openWindow('/');
          }
        })
        .catch(error => {
          console.error('‚ùå SW: Error handling notification click:', error);
        })
    );
  }
});

// Background sync (–µ—Å–ª–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è)
if ('sync' in self.registration) {
  self.addEventListener('sync', (event) => {
    console.log('ü¶Å SW: Background sync event', event.tag);
    
    if (settings.useMinimalLogic) {
      // Safari: –ø—Ä–æ—Å—Ç–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ sync
      console.log('ü¶Å Safari: –ü—Ä–æ—Å—Ç–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ background sync');
    } else {
      // –î—Ä—É–≥–∏–µ –±—Ä–∞—É–∑–µ—Ä—ã: –ø–æ–ª–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ sync
      console.log('‚úÖ SW: Standard background sync handling');
    }
  });
}

console.log('ü¶Å Service Worker setup completed');



