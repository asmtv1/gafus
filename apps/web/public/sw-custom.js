// –ö–∞—Å—Ç–æ–º–Ω–∞—è –ª–æ–≥–∏–∫–∞ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤
const CACHE_VERSION = 'v1.0.0';
const CRITICAL_CACHE = `critical-files-${CACHE_VERSION}`;
const STATIC_CACHE = `static-resources-${CACHE_VERSION}`;

self.addEventListener('install', (event) => {
  console.warn('Service Worker: –£—Å—Ç–∞–Ω–æ–≤–∫–∞...');
  event.waitUntil(
    caches.open(CRITICAL_CACHE).then((cache) => {
      // –ö–µ—à–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–µ —Ñ–∞–π–ª—ã
      return cache.addAll([
        '/~offline',
        '/icons/icon192.png',
        '/icons/badge-72.png'
      ]);
    }).catch((error) => {
      console.log('Service Worker: –û—à–∏–±–∫–∞ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤:', error);
    })
  );
});

// –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∫–µ—à–µ–π –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
self.addEventListener('activate', (event) => {
  console.log('Service Worker: –ê–∫—Ç–∏–≤–∞—Ü–∏—è...');
  event.waitUntil(
    caches.keys().then((cacheNames) => {
      return Promise.all(
        cacheNames.map((cacheName) => {
          if (cacheName !== CRITICAL_CACHE && cacheName !== STATIC_CACHE) {
            console.log('Service Worker: –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä–æ–≥–æ –∫–µ—à–∞:', cacheName);
            return caches.delete(cacheName);
          }
        })
      );
    })
  );
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è
// –ù–µ –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º fetch ‚Äî –æ—Å—Ç–∞–≤–ª—è–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é Workbox –∏–∑ next-pwa
// –ï—Å–ª–∏ –Ω—É–∂–µ–Ω –æ—Ñ–ª–∞–π–Ω —Ñ–æ–ª–±–µ–∫ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–π, –æ–Ω –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ next.config.ts —á–µ—Ä–µ–∑ fallback.document

self.addEventListener("push", (event) => {
  console.log("üîî Service Worker: –ü–æ–ª—É—á–µ–Ω–æ push-—Å–æ–±—ã—Ç–∏–µ!", event);
  console.log("üîî Service Worker: –¢–∏–ø —Å–æ–±—ã—Ç–∏—è:", event.type);
  console.log("üîî Service Worker: –î–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è:", event.data);
  console.log("üîî Service Worker: Registration:", self.registration);
  
  let payload = {};
  try {
    if (event.data) {
      console.log("üîî Service Worker: –î–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è:", event.data);
      try {
        payload = event.data.json();
        console.log("üîî Service Worker: JSON payload:", payload);
      } catch (e) {
        console.log("üîî Service Worker: –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON, –∏—Å–ø–æ–ª—å–∑—É–µ–º text:", e);
        payload = { body: event.data.text() };
      }
    } else {
      console.log("üîî Service Worker: –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ —Å–æ–±—ã—Ç–∏–∏");
    }
  } catch (e) {
    console.error("üîî Service Worker: –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö:", e);
  }

  const title = payload.title || "–ì–∞—Ñ—É—Å";
  const body = payload.body || "–ù–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ";
  const icon = payload.icon || "/icons/icon192.png";
  const badge = payload.badge || "/icons/badge-72.png";
  const tag = payload.tag || "gafus";
  const data = payload.data || {};

  console.log("üîî Service Worker: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ:", { title, body, icon, badge, tag, data });

  event.waitUntil(
    self.registration.showNotification(title, {
      body, icon, badge, tag, data, requireInteraction: false,
    }).then(() => {
      console.log("‚úÖ Service Worker: –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–∫–∞–∑–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ!");
    }).catch((error) => {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:", error);
    }),
  );
});

self.addEventListener("notificationclick", (event) => {
  event.notification.close();
  const data = event.notification?.data || {};
  const targetUrl = data.url || "/";

  event.waitUntil(
    (async () => {
      const url = new URL(targetUrl, self.location.origin).href;
      const clientList = await self.clients.matchAll({ type: "window", includeUncontrolled: true });
      for (const client of clientList) {
        if (client.url === url && "focus" in client) {
          return client.focus();
        }
      }
      if (self.clients.openWindow) {
        return self.clients.openWindow(url);
      }
    })(),
  );
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞
self.addEventListener("message", (event) => {
  console.log("üîî Service Worker: –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞:", event.data);
  
  if (event.data.type === "TEST_PUSH") {
    console.log("üîî Service Worker: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ");
    
    const { title, body, icon } = event.data.data;
    
    event.waitUntil(
      self.registration.showNotification(title || "–¢–µ—Å—Ç", {
        body: body || "–¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ",
        icon: icon || "/icons/icon192.png",
        badge: "/icons/badge-72.png",
        tag: "test",
        data: {},
        requireInteraction: false,
      }).then(() => {
        console.log("‚úÖ Service Worker: –¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–∫–∞–∑–∞–Ω–æ!");
      }).catch((error) => {
        console.error("‚ùå Service Worker: –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:", error);
      }),
    );
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º true –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    return true;
  }
  
  // –î–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤–æ–∑–≤—Ä–∞—â–∞–µ–º false (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞)
  return false;
});



