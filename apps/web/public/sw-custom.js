// –ö–∞—Å—Ç–æ–º–Ω—ã–π Service Worker –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è offline —Ä–µ–∂–∏–º–∞
self.addEventListener('install', (event) => {
  console.log('üîÑ Custom SW installing...');
  self.skipWaiting();
});

self.addEventListener('activate', (event) => {
  console.log('‚úÖ Custom SW activated');
  event.waitUntil(self.clients.claim());
});

// –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º fetch –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è –ª—É—á—à–µ–≥–æ offline —Ä–µ–∂–∏–º–∞
self.addEventListener('fetch', (event) => {
  const { request } = event;
  
  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ GET –∑–∞–ø—Ä–æ—Å—ã
  if (request.method !== 'GET') return;
  
  // –î–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É
  if (request.mode === 'navigate') {
    event.respondWith(
      fetch(request)
        .then((response) => {
          // –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–µ–Ω, –∫—ç—à–∏—Ä—É–µ–º –µ–≥–æ
          if (response.status === 200) {
            const responseClone = response.clone();
            caches.open('pages').then((cache) => {
              cache.put(request, responseClone);
            });
          }
          return response;
        })
        .catch(async (error) => {
          console.log('üåê Network failed, trying cache...', error);
          
          // –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –≤ –∫—ç—à–µ
          const cachedResponse = await caches.match(request);
          if (cachedResponse) {
            console.log('‚úÖ Serving from cache:', request.url);
            return cachedResponse;
          }
          
          // –ï—Å–ª–∏ –≤ –∫—ç—à–µ –Ω–µ—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º offline —Å—Ç—Ä–∞–Ω–∏—Ü—É
          console.log('üì± No cache found, showing offline page');
          const offlineResponse = await caches.match('/~offline');
          if (offlineResponse) {
            return offlineResponse;
          }
          
          // Fallback –Ω–∞ –ø—É—Å—Ç—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
          return new Response(
            '<html><body><h1>Offline</h1><p>No internet connection</p></body></html>',
            {
              headers: { 'Content-Type': 'text/html' },
            }
          );
        })
    );
    return;
  }
  
  // –î–ª—è API –∑–∞–ø—Ä–æ—Å–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º NetworkFirst —Å –∫–æ—Ä–æ—Ç–∫–∏–º —Ç–∞–π–º–∞—É—Ç–æ–º
  if (request.url.includes('/api/')) {
    event.respondWith(
      Promise.race([
        fetch(request),
        new Promise((_, reject) => 
          setTimeout(() => reject(new Error('Timeout')), 3000)
        )
      ]).catch(async (error) => {
        console.log('‚è∞ API timeout, checking cache:', request.url);
        const cachedResponse = await caches.match(request);
        if (cachedResponse) {
          return cachedResponse;
        }
        throw error;
      })
    );
    return;
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
self.addEventListener('push', (event) => {
  if (event.data) {
    const data = event.data.json();
    const options = {
      body: data.body || '–ù–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ',
      icon: '/favicon.ico',
      badge: '/favicon.ico',
      tag: 'gafus-notification',
      data: data,
      actions: [
        {
          action: 'open',
          title: '–û—Ç–∫—Ä—ã—Ç—å',
        },
        {
          action: 'close',
          title: '–ó–∞–∫—Ä—ã—Ç—å',
        }
      ]
    };
    
    event.waitUntil(
      self.registration.showNotification(data.title || 'Gafus', options)
    );
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–æ–≤ –ø–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º
self.addEventListener('notificationclick', (event) => {
  event.notification.close();
  
  if (event.action === 'open') {
    event.waitUntil(
      self.clients.openWindow('/')
    );
  }
});

console.log('üöÄ Custom Service Worker loaded');



