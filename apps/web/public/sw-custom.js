// –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π Service Worker –¥–ª—è –≤—Å–µ—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤ —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π –¥–ª—è Safari

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –±—Ä–∞—É–∑–µ—Ä
const isSafari = () => {
  const userAgent = navigator.userAgent;
  return /Safari/.test(userAgent) && !/Chrome/.test(userAgent);
};

// Safari-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
const getSafariSettings = () => {
  const safari = isSafari();
  return {
    isSafari: safari,
    // Safari: –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞, –±—ã—Å—Ç—Ä–∞—è –∞–∫—Ç–∏–≤–∞—Ü–∏—è
    useMinimalLogic: safari,
    // Safari: –ø—Ä–æ—Å—Ç—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –±–µ–∑ —Å–ª–æ–∂–Ω—ã—Ö –æ–ø—Ü–∏–π
    useSimpleNotifications: safari,
  };
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
const createNotificationOptions = (data, baseUrl) => {
  const settings = getSafariSettings();
  
  // –ë–∞–∑–æ–≤—ã–µ –æ–ø—Ü–∏–∏ –¥–ª—è –≤—Å–µ—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤
  let iconUrl = data.icon ? (data.icon.startsWith('http') ? data.icon : baseUrl + data.icon) : baseUrl + '/icons/icon192.png';
  
  if (!data.icon) {
    iconUrl = baseUrl + '/icons/icon192.png';
  }
  
  // Safari: —Ç–æ–ª—å–∫–æ –±–∞–∑–æ–≤—ã–µ –æ–ø—Ü–∏–∏
  if (settings.useSimpleNotifications) {
    return {
      body: data.body || data.message || '–ù–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ',
      icon: iconUrl,
      tag: data.tag || 'gafus-notification',
      data: data,
      requireInteraction: false,
      silent: false
    };
  }
  
  // –î—Ä—É–≥–∏–µ –±—Ä–∞—É–∑–µ—Ä—ã: –ø–æ–ª–Ω—ã–π –Ω–∞–±–æ—Ä –æ–ø—Ü–∏–π
  const badgeUrl = data.badge ? (data.badge.startsWith('http') ? data.badge : baseUrl + data.badge) : baseUrl + '/icons/badge-72.png';
  
  return {
    body: data.body || data.message || '–ù–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ',
    icon: iconUrl,
    badge: badgeUrl,
    tag: data.tag || 'gafus-notification',
    data: data,
    requireInteraction: false,
    actions: [
      { action: 'open', title: '–û—Ç–∫—Ä—ã—Ç—å' },
      { action: 'close', title: '–ó–∞–∫—Ä—ã—Ç—å' }
    ],
    silent: false,
    vibrate: [200, 100, 200],
    timestamp: Date.now()
  };
};

// –°–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ Service Worker
self.addEventListener('install', (event) => {
  console.log('üîÑ SW: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è...');
  
  const settings = getSafariSettings();
  
  if (settings.useMinimalLogic) {
    // Safari: –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞
    console.log('ü¶Å Safari: –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞');
    event.waitUntil(self.skipWaiting());
  } else {
    // –î—Ä—É–≥–∏–µ –±—Ä–∞—É–∑–µ—Ä—ã: –ø–æ–ª–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞
    event.waitUntil(
      Promise.resolve()
        .then(() => {
          console.log('‚úÖ SW: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
          return self.skipWaiting();
        })
        .catch(error => {
          console.error('‚ùå SW: –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏:', error);
        })
    );
  }
});

// –°–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –∞–∫—Ç–∏–≤–∞—Ü–∏—è Service Worker
self.addEventListener('activate', (event) => {
  console.log('‚úÖ SW: –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º—Å—è...');
  
  const settings = getSafariSettings();
  
  if (settings.useMinimalLogic) {
    // Safari: –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–∞—Ü–∏—è
    console.log('ü¶Å Safari: –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–∞—Ü–∏—è');
    event.waitUntil(
      self.clients.claim()
        .catch(error => {
          console.warn('‚ö†Ô∏è Safari: –û—à–∏–±–∫–∞ claim (–Ω–æ —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ):', error);
        })
    );
  } else {
    // –î—Ä—É–≥–∏–µ –±—Ä–∞—É–∑–µ—Ä—ã: –ø–æ–ª–Ω–∞—è –∞–∫—Ç–∏–≤–∞—Ü–∏—è
    event.waitUntil(
      self.clients.claim()
        .then(() => {
          console.log('‚úÖ SW: –ê–∫—Ç–∏–≤–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
        })
        .catch(error => {
          console.error('‚ùå SW: –û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏:', error);
        })
    );
  }
});

// –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ fetch –¥–ª—è Safari
self.addEventListener('fetch', (event) => {
  const { request } = event;
  const settings = getSafariSettings();
  
  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ GET –∑–∞–ø—Ä–æ—Å—ã
  if (request.method !== 'GET') return;
  
  // –î–ª—è push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ
  if (request.url.includes('/api/push')) return;
  
  if (settings.useMinimalLogic) {
    // Safari: –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ fetch
    console.log('ü¶Å Safari: –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ fetch');
    
    event.respondWith(
      fetch(request)
        .catch(async (error) => {
          console.log('üåê Safari: –°–µ—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –ø—Ä–æ–±—É–µ–º –∫—ç—à');
          
          try {
            const cachedResponse = await caches.match(request);
            if (cachedResponse) {
              console.log('‚úÖ Safari: –û–±—Å–ª—É–∂–∏–≤–∞–µ–º –∏–∑ –∫—ç—à–∞');
              return cachedResponse;
            }
          } catch (cacheError) {
            console.warn('‚ö†Ô∏è Safari: –û—à–∏–±–∫–∞ –∫—ç—à–∞:', cacheError);
          }
          
          // –ü—Ä–æ—Å—Ç–æ–π fallback –¥–ª—è Safari
          return new Response(
            '<html><body><h1>Offline</h1><p>–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É</p></body></html>',
            { headers: { 'Content-Type': 'text/html' } }
          );
        })
    );
  } else {
    // –î—Ä—É–≥–∏–µ –±—Ä–∞—É–∑–µ—Ä—ã: –ø–æ–ª–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ fetch
    try {
      event.respondWith(
        fetch(request)
          .then((response) => {
            // –ö—ç—à–∏—Ä—É–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            if (response.status === 200 && request.mode === 'navigate') {
              const responseClone = response.clone();
              caches.open('pages').then((cache) => {
                cache.put(request, responseClone).catch(err => {
                  console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∫—ç—à–∏—Ä–æ–≤–∞—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É:', err);
                });
              });
            }
            return response;
          })
          .catch(async (error) => {
            console.log('üåê –°–µ—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –ø—Ä–æ–±—É–µ–º –∫—ç—à');
            
            try {
              const cachedResponse = await caches.match(request);
              if (cachedResponse) {
                console.log('‚úÖ –û–±—Å–ª—É–∂–∏–≤–∞–µ–º –∏–∑ –∫—ç—à–∞');
                return cachedResponse;
              }
            } catch (cacheError) {
              console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –∫—ç—à–∞:', cacheError);
            }
            
            return new Response(
              '<html><body><h1>Offline</h1><p>–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É</p></body></html>',
              { headers: { 'Content-Type': 'text/html' } }
            );
          })
      );
    } catch (error) {
      console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ fetch:', error);
    }
  }
});

// –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
self.addEventListener('push', (event) => {
  console.log('üîî Push —Å–æ–±—ã—Ç–∏–µ –ø–æ–ª—É—á–µ–Ω–æ');
  
  const settings = getSafariSettings();
  
  if (event.data) {
    try {
      const data = event.data.json();
      console.log('üîî Push –¥–∞–Ω–Ω—ã–µ:', data);
      
      const baseUrl = self.location.origin;
      const options = createNotificationOptions(data, baseUrl);
      
      console.log('üîî –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å –æ–ø—Ü–∏—è–º–∏:', options);
      
      if (settings.useMinimalLogic) {
        // Safari: –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ push
        console.log('ü¶Å Safari: –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ push');
        
        event.waitUntil(
          self.registration.showNotification(data.title || 'Gafus', options)
            .catch((error) => {
              console.error('‚ùå Safari: –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error);
              
              // Fallback –¥–ª—è Safari
              const safariFallback = {
                body: data.body || data.message || '–ù–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ',
                icon: baseUrl + '/icons/icon192.png',
                tag: 'gafus-notification-safari-fallback'
              };
              
              return self.registration.showNotification(data.title || 'Gafus', safariFallback);
            })
        );
      } else {
        // –î—Ä—É–≥–∏–µ –±—Ä–∞—É–∑–µ—Ä—ã: –ø–æ–ª–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ push
        event.waitUntil(
          self.registration.showNotification(data.title || 'Gafus', options)
            .then(() => {
              console.log('‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–∫–∞–∑–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ');
            })
            .catch((error) => {
              console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error);
            })
        );
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ push –¥–∞–Ω–Ω—ã—Ö:', error);
      
      // Fallback —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
      const baseUrl = self.location.origin;
      event.waitUntil(
        self.registration.showNotification('Gafus', {
          body: '–ù–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ',
          icon: baseUrl + '/icons/icon192.png',
          tag: 'gafus-notification-fallback'
        })
      );
    }
  } else {
    console.log('üîî Push —Å–æ–±—ã—Ç–∏–µ –±–µ–∑ –¥–∞–Ω–Ω—ã—Ö');
    
    // Fallback —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    const baseUrl = self.location.origin;
    event.waitUntil(
      self.registration.showNotification('Gafus', {
        body: '–ù–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ',
        icon: baseUrl + '/icons/icon192.png',
        tag: 'gafus-notification-fallback'
      })
    );
  }
});

// –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
self.addEventListener('message', (event) => {
  console.log('üì® –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ –≤ SW:', event.data);
  
  const settings = getSafariSettings();
  
  if (event.data && event.data.type === 'TEST_PUSH') {
    console.log('üîî –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ');
    
    const { data } = event.data;
    const baseUrl = self.location.origin;
    const options = createNotificationOptions(data, baseUrl);
    
    if (settings.useMinimalLogic) {
      // Safari: –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ push
      console.log('ü¶Å Safari: –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ push');
      
      event.waitUntil(
        self.registration.showNotification(data.title || '–¢–µ—Å—Ç Gafus', options)
          .then(() => {
            console.log('‚úÖ Safari: –¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–∫–∞–∑–∞–Ω–æ');
            if (event.ports && event.ports.length > 0) {
              event.ports[0].postMessage({ success: true });
            }
          })
          .catch((error) => {
            console.error('‚ùå Safari: –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error);
            if (event.ports && event.ports.length > 0) {
              event.ports[0].postMessage({ success: false, error: error.message });
            }
          })
      );
    } else {
      // –î—Ä—É–≥–∏–µ –±—Ä–∞—É–∑–µ—Ä—ã: –ø–æ–ª–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
      event.waitUntil(
        self.registration.showNotification(data.title || '–¢–µ—Å—Ç Gafus', options)
          .then(() => {
            console.log('‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–∫–∞–∑–∞–Ω–æ');
            if (event.ports && event.ports.length > 0) {
              event.ports[0].postMessage({ success: true });
            }
          })
          .catch((error) => {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error);
            if (event.ports && event.ports.length > 0) {
              event.ports[0].postMessage({ success: false, error: error.message });
            }
          })
      );
    }
  } else if (event.data && event.data.type === 'PING') {
    console.log('üèì PING –ø–æ–ª—É—á–µ–Ω, –æ—Ç–≤–µ—á–∞–µ–º PONG');
    
    if (event.ports && event.ports.length > 0) {
      event.ports[0].postMessage({ 
        success: true, 
        message: 'PONG',
        timestamp: event.data.timestamp,
        swTimestamp: Date.now()
      });
    }
  }
});

// –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–æ–≤ –ø–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º
self.addEventListener('notificationclick', (event) => {
  console.log('üîî –ö–ª–∏–∫ –ø–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—é:', event);
  event.notification.close();
  
  const settings = getSafariSettings();
  
  if (event.action === 'open') {
    if (settings.useMinimalLogic) {
      // Safari: –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞
      console.log('ü¶Å Safari: –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞');
      
      event.waitUntil(
        self.clients.openWindow('./')
          .catch((error) => {
            console.error('‚ùå Safari: –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞:', error);
            return self.clients.openWindow(self.location.origin);
          })
      );
    } else {
      // –î—Ä—É–≥–∏–µ –±—Ä–∞—É–∑–µ—Ä—ã: –ø–æ–ª–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
      event.waitUntil(
        self.clients.openWindow('./')
          .then((windowClient) => {
            if (windowClient) {
              console.log('‚úÖ –û–∫–Ω–æ –æ—Ç–∫—Ä—ã—Ç–æ —É—Å–ø–µ—à–Ω–æ');
            }
          })
          .catch((error) => {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞:', error);
            self.clients.openWindow(self.location.origin);
          })
      );
    }
  }
});

console.log('üöÄ –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π Service Worker –∑–∞–≥—Ä—É–∂–µ–Ω');



