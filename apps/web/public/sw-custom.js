// –ö–∞—Å—Ç–æ–º–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è Workbox Service Worker
// –≠—Ç–æ—Ç —Ñ–∞–π–ª –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è –≤ –æ—Å–Ω–æ–≤–Ω–æ–π sw.js —á–µ—Ä–µ–∑ importScripts

console.log('ü¶Å SW Custom: Loading custom logic for Workbox...');

// Safari/WebKit-specific settings
function getSafariSettings() {
  const isIOS = /iPad|iPhone|iPod/.test(navigator.userAgent);
  const isWebKit = /webkit/i.test(navigator.userAgent);
  const isChrome = /chrome/i.test(navigator.userAgent);
  const isSafari = isWebKit && (/safari/i.test(navigator.userAgent) && !isChrome || isIOS);
  const isStandalone = navigator.standalone;
  
  return {
    isSafari,
    isIOS,
    isWebKit,
    isStandalone,
    useSimpleNotifications: isSafari,
    usePWALogic: isSafari && isStandalone,
  };
}

const settings = getSafariSettings();

console.log('ü¶Å SW Custom: Settings loaded', {
  isSafari: settings.isSafari,
  isIOS: settings.isIOS,
  isStandalone: settings.isStandalone,
  usePWALogic: settings.usePWALogic
});

// –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å Safari-–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π
function createNotificationOptions(title, options = {}) {
  const safariIcon = settings.isSafari ? '/icons/icon-256-safari.png' : '/icons/icon192.png';
  const safariBadge = settings.isSafari ? '/icons/badge-72.png' : '/icons/icon192.png';
  
  if (settings.useSimpleNotifications) {
    // –î–ª—è Safari: —Ç–æ–ª—å–∫–æ –±–∞–∑–æ–≤—ã–µ –æ–ø—Ü–∏–∏ —Å Safari-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–º–∏ –∏–∫–æ–Ω–∫–∞–º–∏
    return {
      body: options.body || '–ù–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ',
      icon: options.icon || safariIcon,
      badge: options.badge || safariBadge,
      tag: options.tag || 'default',
      requireInteraction: false,
      silent: false,
    };
  }
  
  // –î–ª—è –¥—Ä—É–≥–∏—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤: –ø–æ–ª–Ω—ã–µ –æ–ø—Ü–∏–∏
  return {
    body: options.body || '–ù–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ',
    icon: options.icon || safariIcon,
    badge: options.badge || safariBadge,
    tag: options.tag || 'default',
    requireInteraction: options.requireInteraction || false,
    silent: options.silent || false,
    data: options.data || {},
    actions: options.actions || [],
    ...options,
  };
}

// Push event handler
self.addEventListener('push', (event) => {
  console.log('ü¶Å SW Custom: Push event received');
  
  let data = {};
  try {
    data = event.data ? event.data.json() : {};
  } catch (error) {
    console.warn('‚ö†Ô∏è SW Custom: –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å push –¥–∞–Ω–Ω—ã–µ:', error);
    data = { title: 'Gafus', body: '–ù–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ' };
  }
  
  const title = data.title || 'Gafus';
  const options = createNotificationOptions(title, {
    body: data.body || '–ù–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ',
    icon: data.icon,
    badge: data.badge,
    tag: data.tag || 'default',
    requireInteraction: data.requireInteraction || false,
    data: data,
    actions: data.actions || [],
  });
  
  console.log('ü¶Å SW Custom: Showing notification:', title);
  
  event.waitUntil(
    self.registration.showNotification(title, options)
      .then(() => {
        console.log('‚úÖ SW Custom: Notification shown successfully');
      })
      .catch(error => {
        console.error('‚ùå SW Custom: Error showing notification:', error);
      })
  );
});

// Notification click event handler
self.addEventListener('notificationclick', (event) => {
  console.log('ü¶Å SW Custom: Notification click event');
  
  event.notification.close();
  
  event.waitUntil(
    self.clients.matchAll({ type: 'window', includeUncontrolled: true })
      .then((clients) => {
        // –ò—â–µ–º —É–∂–µ –æ—Ç–∫—Ä—ã—Ç–æ–µ –æ–∫–Ω–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        for (const client of clients) {
          if (client.url.includes('gafus.ru') && 'focus' in client) {
            console.log('‚úÖ SW Custom: Focusing existing window');
            return client.focus();
          }
        }
        
        // –ï—Å–ª–∏ –Ω–µ—Ç –æ—Ç–∫—Ä—ã—Ç–æ–≥–æ –æ–∫–Ω–∞, –æ—Ç–∫—Ä—ã–≤–∞–µ–º –Ω–æ–≤–æ–µ
        if (clients.openWindow) {
          console.log('‚úÖ SW Custom: Opening new window');
          return clients.openWindow('/');
        }
      })
      .catch(error => {
        console.error('‚ùå SW Custom: Error handling notification click:', error);
      })
  );
});

// Message event handler –¥–ª—è –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏ —Å –∫–ª–∏–µ–Ω—Ç–æ–º
self.addEventListener('message', (event) => {
  console.log('ü¶Å SW Custom: Message event', event.data);
  
  if (event.data && event.data.type === 'SKIP_WAITING') {
    console.log('ü¶Å SW Custom: Skip waiting requested');
    self.skipWaiting();
  }
  
  if (event.data && event.data.type === 'GET_VERSION') {
    event.ports[0].postMessage({
      type: 'VERSION_INFO',
      version: 'workbox-custom-1.0.0',
      safari: settings.isSafari,
      ios: settings.isIOS,
    });
  }
});

// Fallback —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
self.fallback = function(request) {
  console.log('ü¶Å SW Custom: Fallback called for:', request.url);
  
  if (request.destination === 'document') {
    // –î–ª—è HTML —Å—Ç—Ä–∞–Ω–∏—Ü –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ñ–ª–∞–π–Ω —Å—Ç—Ä–∞–Ω–∏—Ü—É
    return caches.match('/~offline').then(response => {
      return response || new Response(
        '<!DOCTYPE html><html><head><title>Gafus - –û—Ñ–ª–∞–π–Ω</title></head><body><h1>Gafus</h1><p>–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É</p><p>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ–∑–∂–µ</p></body></html>',
        { headers: { 'Content-Type': 'text/html; charset=utf-8' } }
      );
    });
  }
  
  // –î–ª—è –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤ –∑–∞–ø—Ä–æ—Å–æ–≤
  return new Response('Offline', {
    status: 408,
    headers: { 'Content-Type': 'text/plain' }
  });
};

console.log('‚úÖ SW Custom: Custom logic loaded successfully');