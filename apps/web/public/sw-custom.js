// –ö–∞—Å—Ç–æ–º–Ω—ã–π Service Worker –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è offline —Ä–µ–∂–∏–º–∞
self.addEventListener('install', (event) => {
  console.log('üîÑ Custom SW installing...');
  event.waitUntil(
    Promise.resolve().then(() => {
      console.log('‚úÖ Custom SW installed successfully');
      return self.skipWaiting();
    })
  );
});

self.addEventListener('activate', (event) => {
  console.log('‚úÖ Custom SW activated');
  event.waitUntil(
    self.clients.claim()
      .then(() => {
        console.log('‚úÖ Clients claimed successfully');
      })
      .catch((error) => {
        console.error('‚ùå Failed to claim clients:', error);
      })
  );
});

// –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º fetch –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è –ª—É—á—à–µ–≥–æ offline —Ä–µ–∂–∏–º–∞
self.addEventListener('fetch', (event) => {
  const { request } = event;
  
  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ GET –∑–∞–ø—Ä–æ—Å—ã
  if (request.method !== 'GET') return;
  
  // –î–ª—è push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ
  if (request.url.includes('/api/push')) {
    return;
  }
  
  // –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è Safari - —Ç–æ–ª—å–∫–æ –±–∞–∑–æ–≤–æ–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ
  try {
    event.respondWith(
      fetch(request)
        .then((response) => {
          // –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–µ–Ω –∏ —ç—Ç–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞, –∫—ç—à–∏—Ä—É–µ–º
          if (response.status === 200 && request.mode === 'navigate') {
            const responseClone = response.clone();
            caches.open('pages').then((cache) => {
              cache.put(request, responseClone).catch(err => {
                console.warn('‚ö†Ô∏è Failed to cache page:', err);
              });
            });
          }
          return response;
        })
        .catch(async (error) => {
          console.log('üåê Network failed, trying cache...', error);
          
          // –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –≤ –∫—ç—à–µ
          try {
            const cachedResponse = await caches.match(request);
            if (cachedResponse) {
              console.log('‚úÖ Serving from cache:', request.url);
              return cachedResponse;
            }
          } catch (cacheError) {
            console.warn('‚ö†Ô∏è Cache error:', cacheError);
          }
          
          // Fallback –Ω–∞ –ø—É—Å—Ç—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
          return new Response(
            '<html><body><h1>Offline</h1><p>No internet connection</p></body></html>',
            {
              headers: { 'Content-Type': 'text/html' },
            }
          );
        })
    );
  } catch (error) {
    console.warn('‚ö†Ô∏è Fetch handler error:', error);
    // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
    return;
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
self.addEventListener('push', (event) => {
  console.log('üîî Push event received:', event);
  
  if (event.data) {
    try {
      const data = event.data.json();
      console.log('üîî Push data:', data);
      
      // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è iOS Safari
      const options = {
        body: data.body || data.message || '–ù–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ',
        icon: data.icon || '/icons/icon192.png',
        badge: data.badge || '/icons/icon192.png',
        tag: data.tag || 'gafus-notification',
        data: data,
        requireInteraction: false,
        actions: [
          {
            action: 'open',
            title: '–û—Ç–∫—Ä—ã—Ç—å',
          },
          {
            action: 'close',
            title: '–ó–∞–∫—Ä—ã—Ç—å',
          }
        ],
        // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏ –¥–ª—è iOS Safari
        silent: false,
        vibrate: [200, 100, 200],
        timestamp: Date.now()
      };
      
      console.log('üîî Showing notification with options:', options);
      
      event.waitUntil(
        self.registration.showNotification(data.title || 'Gafus', options)
          .then(() => {
            console.log('‚úÖ Notification shown successfully');
          })
          .catch((error) => {
            console.error('‚ùå Failed to show notification:', error);
          })
      );
    } catch (error) {
      console.error('‚ùå Error processing push data:', error);
      
      // Fallback notification
      event.waitUntil(
        self.registration.showNotification('Gafus', {
          body: '–ù–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ',
          icon: '/icons/icon192.png',
          tag: 'gafus-notification-fallback'
        })
      );
    }
  } else {
    console.log('üîî Push event without data');
    
    // Fallback notification
    event.waitUntil(
      self.registration.showNotification('Gafus', {
        body: '–ù–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ',
        icon: '/icons/icon192.png',
        tag: 'gafus-notification-fallback'
      })
    );
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞ (–¥–ª—è —Ç–µ—Å—Ç–æ–≤—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π)
self.addEventListener('message', (event) => {
  console.log('üì® Message received in Service Worker:', event.data);
  
  if (event.data && event.data.type === 'TEST_PUSH') {
    console.log('üîî Processing test push notification');
    
    const { data } = event.data;
    
    const options = {
      body: data.body || '–¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ',
      icon: data.icon || '/icons/icon192.png',
      badge: data.badge || '/icons/icon192.png',
      tag: 'test-notification',
      data: data,
      requireInteraction: false,
      actions: [
        {
          action: 'open',
          title: '–û—Ç–∫—Ä—ã—Ç—å',
        },
        {
          action: 'close',
          title: '–ó–∞–∫—Ä—ã—Ç—å',
        }
      ],
      silent: false,
      vibrate: [200, 100, 200],
      timestamp: Date.now()
    };
    
    event.waitUntil(
      self.registration.showNotification(data.title || '–¢–µ—Å—Ç Gafus', options)
        .then(() => {
          console.log('‚úÖ Test notification shown successfully');
          // –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞
          if (event.ports && event.ports.length > 0) {
            event.ports[0].postMessage({ success: true });
          }
        })
        .catch((error) => {
          console.error('‚ùå Failed to show test notification:', error);
          if (event.ports && event.ports.length > 0) {
            event.ports[0].postMessage({ success: false, error: error.message });
          }
        })
    );
  } else if (event.data && event.data.type === 'PING') {
    console.log('üèì PING received, responding with PONG');
    
    // –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞
    if (event.ports && event.ports.length > 0) {
      event.ports[0].postMessage({ 
        success: true, 
        message: 'PONG',
        timestamp: event.data.timestamp,
        swTimestamp: Date.now()
      });
    }
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–æ–≤ –ø–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º
self.addEventListener('notificationclick', (event) => {
  console.log('üîî Notification clicked:', event);
  event.notification.close();
  
  if (event.action === 'open') {
    event.waitUntil(
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å –¥–ª—è Safari
      self.clients.openWindow('./')
        .then((windowClient) => {
          if (windowClient) {
            console.log('‚úÖ Window opened successfully');
          }
        })
        .catch((error) => {
          console.error('‚ùå Failed to open window:', error);
          // Fallback - –æ—Ç–∫—Ä—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π URL
          self.clients.openWindow(self.location.origin);
        })
    );
  }
});

console.log('üöÄ Custom Service Worker loaded');



