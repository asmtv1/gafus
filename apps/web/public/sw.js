// –ö–∞—Å—Ç–æ–º–Ω—ã–π Service Worker –¥–ª—è Gafus
// –û—Ç–≤–µ—á–∞–µ—Ç –∑–∞ push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏ –æ—Ñ–ª–∞–π–Ω –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ

console.log('üöÄ SW: Starting Gafus Service Worker for Push Notifications & Offline Caching');

// üéØ –ì–ò–ë–†–ò–î–ù–ê–Ø –°–¢–†–ê–¢–ï–ì–ò–Ø –ö–≠–®–ò–†–û–í–ê–ù–ò–Ø –î–õ–Ø NEXT.JS RSC
// –†–µ—à–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º—É –æ—Ñ–ª–∞–π–Ω-–¥–æ—Å—Ç—É–ø–∞ –∫ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º –≤ Next.js —Å React Server Components

const CACHE_CONFIG = {
  // üèóÔ∏è –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –∫—ç—à–µ–π
  CACHES: {
    // –ü–æ–ª–Ω—ã–µ HTML-—Å—Ç—Ä–∞–Ω–∏—Ü—ã (–¥–ª—è –æ—Ñ–ª–∞–π–Ω-–Ω–∞–≤–∏–≥–∞—Ü–∏–∏)
    HTML_PAGES: 'gafus-html-v1',
    
    // RSC-–¥–∞–Ω–Ω—ã–µ (–¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π)
    RSC_DATA: 'gafus-rsc-v1',
    
    // –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ—Å—É—Ä—Å—ã
    STATIC: 'gafus-static-v1',
    
    // API-–æ—Ç–≤–µ—Ç—ã
    API: 'gafus-api-v1',
    
    // –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    IMAGES: 'gafus-images-v1',
  },
  
  // ‚ö° –°—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
  STRATEGIES: {
    HTML_PAGES: 'cacheFirst',    // HTML - –∫—ç—à –≤ –ø–µ—Ä–≤—É—é –æ—á–µ—Ä–µ–¥—å (–∫—Ä–∏—Ç–∏—á–Ω–æ –¥–ª—è –æ—Ñ–ª–∞–π–Ω–∞)
    RSC_DATA: 'networkFirst',    // RSC - —Å–µ—Ç—å –≤ –ø–µ—Ä–≤—É—é –æ—á–µ—Ä–µ–¥—å, –Ω–æ –∫—ç—à–∏—Ä—É–µ–º
    STATIC: 'cacheFirst',        // –°—Ç–∞—Ç–∏–∫–∞ - –∫—ç—à –≤ –ø–µ—Ä–≤—É—é –æ—á–µ—Ä–µ–¥—å
    API: 'networkFirst',         // API - —Å–µ—Ç—å –≤ –ø–µ—Ä–≤—É—é –æ—á–µ—Ä–µ–¥—å
    IMAGES: 'cacheFirst',        // –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è - –∫—ç—à –≤ –ø–µ—Ä–≤—É—é –æ—á–µ—Ä–µ–¥—å
  },
  
  // üéØ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
  PRIORITIES: {
    CRITICAL: ['HTML_PAGES'],           // –ö—Ä–∏—Ç–∏—á–Ω–æ –¥–ª—è –æ—Ñ–ª–∞–π–Ω–∞
    HIGH: ['RSC_DATA', 'STATIC'],       // –í—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
    NORMAL: ['API', 'IMAGES'],          // –û–±—ã—á–Ω—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
  },
  
  // ‚è∞ TTL –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Ä–µ—Å—É—Ä—Å–æ–≤
  TTL: {
    HTML_PAGES: 7 * 24 * 60 * 60 * 1000,  // 7 –¥–Ω–µ–π
    RSC_DATA: 2 * 60 * 60 * 1000,         // 2 —á–∞—Å–∞
    STATIC: 7 * 24 * 60 * 60 * 1000,      // 7 –¥–Ω–µ–π
    API: 2 * 60 * 60 * 1000,              // 2 —á–∞—Å–∞
    IMAGES: 30 * 24 * 60 * 60 * 1000,     // 30 –¥–Ω–µ–π
  },
  
  // üìä –õ–∏–º–∏—Ç—ã –∫—ç—à–∞
  LIMITS: {
    HTML_PAGES: 50,    // –ú–∞–∫—Å–∏–º—É–º 50 HTML-—Å—Ç—Ä–∞–Ω–∏—Ü
    RSC_DATA: 200,     // –ú–∞–∫—Å–∏–º—É–º 200 RSC-–∑–∞–ø—Ä–æ—Å–æ–≤
    STATIC: 500,       // –ú–∞–∫—Å–∏–º—É–º 500 —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤
    API: 100,          // –ú–∞–∫—Å–∏–º—É–º 100 API-–æ—Ç–≤–µ—Ç–æ–≤
    IMAGES: 300,       // –ú–∞–∫—Å–∏–º—É–º 300 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
  },
  
  // üîç –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–æ–≤ —Ä–µ—Å—É—Ä—Å–æ–≤
  PATTERNS: {
    HTML_PAGES: [
      /^\/$/,
      /^\/courses/,
      /^\/profile/,
      /^\/achievements/,
    ],
    RSC_DATA: [
      /_rsc=/,
      /Accept.*text\/x-component/,
    ],
    STATIC: [
      /\.(?:js|css|woff2?|ttf|eot|mp3|mp4|webm|ogg|wav|m4a)$/,
      /\/_next\/static\//,
      /\/icons\//,
    ],
    API: [
      /^\/api\//,
    ],
    IMAGES: [
      /\.(?:png|jpg|jpeg|gif|webp|svg)$/,
      /\/uploads\//,
    ],
  },
};

// –¢–∞–π–º–∞—É—Ç –¥–ª—è —Å–µ—Ç–µ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ RSC (best practice: –±—ã—Å—Ç—Ä—ã–π failover –∫ –∫—ç—à—É)
const RSC_NETWORK_TIMEOUT_MS = 500;

// üß† –£–ú–ù–ê–Ø –°–ò–°–¢–ï–ú–ê –û–ü–†–ï–î–ï–õ–ï–ù–ò–Ø –¢–ò–ü–û–í –†–ï–°–£–†–°–û–í
// –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∑–∞–ø—Ä–æ—Å—ã –∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è

function getResourceType(request) {
  const url = new URL(request.url);
  const pathname = url.pathname;
  const search = url.search;
  const accept = request.headers.get('Accept') || '';
  const method = request.method;
  
  console.log(`üîç SW: Analyzing request: ${pathname}${search}, Accept: ${accept}, Method: ${method}`);
  
  // 1. üß≠ –ù–ê–í–ò–ì–ê–¶–ò–û–ù–ù–´–ï –ó–ê–ü–†–û–°–´ (HTML-—Å—Ç—Ä–∞–Ω–∏—Ü—ã)
  // –≠—Ç–æ –∑–∞–ø—Ä–æ—Å—ã, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –ø–æ–ª–Ω—ã–µ HTML-—Å—Ç—Ä–∞–Ω–∏—Ü—ã
  const isNavigation = request.mode === 'navigate' || 
                      (method === 'GET' && accept.includes('text/html') && !accept.includes('image/'));
  
  if (isNavigation) {
    console.log(`üß≠ SW: Navigation request detected - will cache as HTML page`);
    return 'HTML_PAGES';
  }
  
  // 1.5. (—É–¥–∞–ª–µ–Ω–æ) –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç—Ä–µ–Ω–∏–Ω–≥–æ–≤—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü –ø—Ä–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
  
  // 1.5. üéØ –°–ü–ï–¶–ò–ê–õ–¨–ù–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê –î–õ–Ø NEXT.JS RSC
  // –ö—ç—à–∏—Ä—É–µ–º HTML-—Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–µ —á–µ—Ä–µ–∑ RSC-–∑–∞–ø—Ä–æ—Å—ã
  if (method === 'GET' && !search.includes('_rsc') && !accept.includes('text/x-component')) {
    // –≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–ø—Ä–æ—Å HTML-—Å—Ç—Ä–∞–Ω–∏—Ü—ã –±–µ–∑ RSC –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    for (const pattern of CACHE_CONFIG.PATTERNS.HTML_PAGES) {
      if (pattern.test(pathname)) {
        console.log(`üìÑ SW: Potential HTML page request detected: ${pathname}`);
        return 'HTML_PAGES';
      }
    }
  }
  
  // 2. üîÑ RSC-–ó–ê–ü–†–û–°–´ (React Server Components)
  // –≠—Ç–æ –∑–∞–ø—Ä–æ—Å—ã Next.js –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
  const isRSC = search.includes('_rsc=') || 
                accept.includes('text/x-component') ||
                (method === 'POST' && accept.includes('text/x-component'));
  
  if (isRSC) {
    console.log(`üîÑ SW: RSC request detected - will cache as RSC data`);
    return 'RSC_DATA';
  }
  
  // 3. üìÅ –°–¢–ê–¢–ò–ß–ï–°–ö–ò–ï –†–ï–°–£–†–°–´
  for (const pattern of CACHE_CONFIG.PATTERNS.STATIC) {
    if (pattern.test(pathname)) {
      console.log(`üìÅ SW: Static resource detected`);
      return 'STATIC';
    }
  }
  
  // 4. üñºÔ∏è –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–Ø
  // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è favicon.ico
  if (pathname === '/favicon.ico') {
    console.log(`üñºÔ∏è SW: Favicon detected - special handling`);
    return 'IMAGES';
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ Accept –∑–∞–≥–æ–ª–æ–≤–∫—É –∏ –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º
  if (accept.includes('image/') || accept.includes('image/*')) {
    console.log(`üñºÔ∏è SW: Image resource detected by Accept header`);
    return 'IMAGES';
  }
  
  // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è Next.js Image Optimization API
  if (pathname.startsWith('/_next/image')) {
    console.log(`üñºÔ∏è SW: Next.js Image Optimization detected`);
    return 'IMAGES';
  }
  
  for (const pattern of CACHE_CONFIG.PATTERNS.IMAGES) {
    if (pattern.test(pathname)) {
      console.log(`üñºÔ∏è SW: Image resource detected by pattern`);
      return 'IMAGES';
    }
  }
  
  // 5. üîå API-–ó–ê–ü–†–û–°–´
  for (const pattern of CACHE_CONFIG.PATTERNS.API) {
    if (pattern.test(pathname)) {
      console.log(`üîå SW: API request detected`);
      return 'API';
    }
  }
  
  // 6. üìÑ –°–¢–†–ê–ù–ò–¶–´ (fallback)
  for (const pattern of CACHE_CONFIG.PATTERNS.HTML_PAGES) {
    if (pattern.test(pathname)) {
      console.log(`üìÑ SW: Page request detected (fallback)`);
      return 'HTML_PAGES';
    }
  }
  
  // 6.5. üéØ –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –î–õ–Ø –°–¢–†–ê–ù–ò–¶
  // –ï—Å–ª–∏ —ç—Ç–æ GET-–∑–∞–ø—Ä–æ—Å –∫ –∫–æ—Ä–Ω—é –∏–ª–∏ –∏–∑–≤–µ—Å—Ç–Ω—ã–º —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º, —Å—á–∏—Ç–∞–µ–º —ç—Ç–æ HTML-—Å—Ç—Ä–∞–Ω–∏—Ü–µ–π
  if (method === 'GET' && (pathname === '/' || pathname.startsWith('/profile') || pathname.startsWith('/statistics') || pathname.startsWith('/achievements') || pathname.startsWith('/courses') || pathname.startsWith('/favorites'))) {
    console.log(`üìÑ SW: Page request detected by path: ${pathname}`);
    return 'HTML_PAGES';
  }
  
  // 6.6. (—É–¥–∞–ª–µ–Ω–æ) –°–ø–µ—Ü. –æ–±—Ä–∞–±–æ—Ç–∫–∞ HTML –¥–ª—è —Ç—Ä–µ–Ω–∏–Ω–≥–æ–≤—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü
  
  // 7. ‚ùì –ù–ï–ò–ó–í–ï–°–¢–ù–´–ô –¢–ò–ü
  console.log(`‚ùì SW: Unknown resource type, defaulting to API`);
  return 'API';
}

// üéØ –û–ü–†–ï–î–ï–õ–ï–ù–ò–ï –°–¢–†–ê–¢–ï–ì–ò–ò –ö–≠–®–ò–†–û–í–ê–ù–ò–Ø
function getCachingStrategy(resourceType) {
  return CACHE_CONFIG.STRATEGIES[resourceType] || 'networkFirst';
}

// üèóÔ∏è –ü–û–õ–£–ß–ï–ù–ò–ï –ò–ú–ï–ù–ò –ö–≠–®–ê
function getCacheName(resourceType) {
  return CACHE_CONFIG.CACHES[resourceType] || CACHE_CONFIG.CACHES.API;
}

// ‚ö° –£–ú–ù–´–ï –°–¢–†–ê–¢–ï–ì–ò–ò –ö–≠–®–ò–†–û–í–ê–ù–ò–Ø
// –†–µ–∞–ª–∏–∑—É—é—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ –ø–æ–¥—Ö–æ–¥—ã –∫ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—é –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Ä–µ—Å—É—Ä—Å–∞

// üéØ CACHE FIRST - –∫—ç—à –≤ –ø–µ—Ä–≤—É—é –æ—á–µ—Ä–µ–¥—å (–¥–ª—è —Å—Ç–∞—Ç–∏–∫–∏ –∏ HTML)
async function cacheFirstStrategy(request, resourceType) {
  const cacheName = getCacheName(resourceType);
  const cache = await caches.open(cacheName);
  
  console.log(`üéØ SW: Cache First strategy for ${resourceType}: ${request.url}`);
  
  // (—É–¥–∞–ª–µ–Ω–æ) –°–ø–µ—Ü. retry –¥–ª—è HTML /trainings ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º RSC
  
  // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
  const cachedResponse = await cache.match(request);
  if (cachedResponse) {
    console.log(`‚úÖ SW: Cache hit for ${request.url}`);
    return cachedResponse;
  }
  
  // 2. –ï—Å–ª–∏ –Ω–µ—Ç –≤ –∫—ç—à–µ - –∏–¥–µ–º –≤ —Å–µ—Ç—å
  console.log(`üåê SW: Cache miss, fetching from network: ${request.url}`);
  try {
    const networkResponse = await fetch(request);
    
    if (networkResponse.ok) {
      // 3. –ö—ç—à–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
      const responseToCache = networkResponse.clone();
      const headers = new Headers(responseToCache.headers);
      headers.set('sw-cache-time', Date.now().toString());
      headers.set('sw-cache-type', resourceType);
      
      const modifiedResponse = new Response(responseToCache.body, {
        status: responseToCache.status,
        statusText: responseToCache.statusText,
        headers: headers,
      });
      
      await cache.put(request, modifiedResponse);
      // –î–ª—è HTML —Å—Ç—Ä–∞–Ω–∏—Ü —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫: —Ç–∞–∫–∂–µ –∫–µ—à–∏—Ä—É–µ–º –ø–æ–¥ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–º –∫–ª—é—á–æ–º –±–µ–∑ _rsc
      if (resourceType === 'HTML_PAGES' && request.url.includes('/trainings/')) {
        try {
          const normalizedRequest = getNormalizedRSCRequest(request);
          await cache.put(normalizedRequest, modifiedResponse.clone());
          console.log(`üíæ SW: Also cached normalized HTML key: ${normalizedRequest.url}`);
        } catch (e) {
          console.warn('‚ö†Ô∏è SW: Failed to cache normalized HTML key', e);
        }
      }
      console.log(`üíæ SW: Cached ${resourceType}: ${request.url}`);
      
      // 4. –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏
      await cleanupCache(cacheName, resourceType);
    }
    
    return networkResponse;
  } catch (error) {
    console.log(`‚ùå SW: Network error for ${request.url}:`, error);
    
    // 5. –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π fallback –¥–ª—è favicon.ico
    if (request.url.endsWith('/favicon.ico')) {
      console.log(`üñºÔ∏è SW: Providing favicon fallback for ${request.url}`);
      return new Response('', {
        status: 200,
        statusText: 'OK',
        headers: {
          'Content-Type': 'image/x-icon',
          'sw-cache-time': Date.now().toString(),
          'sw-cache-type': 'IMAGES'
        }
      });
    }
    
    // 6. Fallback –¥–ª—è HTML-—Å—Ç—Ä–∞–Ω–∏—Ü
    if (resourceType === 'HTML_PAGES') {
      return await getOfflineFallback(request);
    }
    
    throw error;
  }
}

// (—É–¥–∞–ª–µ–Ω–æ) cacheFirstWithRetry ‚Äî –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è

// üåê NETWORK FIRST - —Å–µ—Ç—å –≤ –ø–µ—Ä–≤—É—é –æ—á–µ—Ä–µ–¥—å (–¥–ª—è API –∏ RSC)
async function networkFirstStrategy(request, resourceType) {
  const cacheName = getCacheName(resourceType);
  const cache = await caches.open(cacheName);
  
  console.log(`üåê SW: Network First strategy for ${resourceType}: ${request.url}`);
  
  // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è retry –ª–æ–≥–∏–∫–∞ –¥–ª—è RSC-–∑–∞–ø—Ä–æ—Å–æ–≤
  if (resourceType === 'RSC_DATA') {
    console.log(`üîÑ SW: Using timeout strategy for RSC: ${request.url}`);
    return await networkFirstWithTimeout(request, cache, resourceType, RSC_NETWORK_TIMEOUT_MS);
  }
  
  try {
    // 1. –ü—Ä–æ–±—É–µ–º —Å–µ—Ç—å
    const networkResponse = await fetch(request);
    
    if (networkResponse.ok) {
      // 2. –ö—ç—à–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
      const responseToCache = networkResponse.clone();
      const headers = new Headers(responseToCache.headers);
      headers.set('sw-cache-time', Date.now().toString());
      headers.set('sw-cache-type', resourceType);
      
      const modifiedResponse = new Response(responseToCache.body, {
        status: responseToCache.status,
        statusText: responseToCache.statusText,
        headers: headers,
      });
      
      // –ö–ª–∞–¥–µ–º –ø–æ–¥ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–º –∫–ª—é—á–æ–º
      await cache.put(request, modifiedResponse);
      // –ò –ø–æ–¥ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–º –∫–ª—é—á–æ–º –±–µ–∑ _rsc (—á—Ç–æ–±—ã –æ—Ñ–ª–∞–π–Ω —Ä–∞–±–æ—Ç–∞–ª —Å –ø–µ—Ä–≤–æ–≥–æ —Ä–∞–∑–∞)
      try {
        const normalizedRequest = getNormalizedRSCRequest(request);
        // –ö–ª–æ–Ω–∏—Ä—É–µ–º response –¥–æ –µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        const normalizedResponse = new Response(responseToCache.body, {
          status: responseToCache.status,
          statusText: responseToCache.statusText,
          headers: headers,
        });
        await cache.put(normalizedRequest, normalizedResponse);
        console.log(`üíæ SW: Also cached normalized RSC key: ${normalizedRequest.url}`);
      } catch (e) {
        console.warn('‚ö†Ô∏è SW: Failed to cache normalized RSC key', e);
      }
      console.log(`üíæ SW: Cached ${resourceType}: ${request.url}`);
      
      // 3. –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏
      await cleanupCache(cacheName, resourceType);
    }
    
    return networkResponse;
  } catch (error) {
    console.log(`‚ùå SW: Network error, trying cache: ${request.url}`);
    
    // 4. –ï—Å–ª–∏ —Å–µ—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ - –ø—Ä–æ–±—É–µ–º –∫—ç—à
    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º —Ç–æ—á–Ω—ã–π –∫–ª—é—á
    let cachedResponse = await cache.match(request);
    // –ï—Å–ª–∏ –ø—Ä–æ–º–∞—Ö ‚Äî –ø—Ä–æ–±—É–µ–º –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –∫–ª—é—á –±–µ–∑ _rsc
    if (!cachedResponse) {
      try {
        const normalizedRequest = getNormalizedRSCRequest(request);
        cachedResponse = await cache.match(normalizedRequest);
        if (cachedResponse) {
          console.log(`‚úÖ SW: RSC normalized cache hit for ${normalizedRequest.url}`);
        }
      } catch (e) {
        console.warn('‚ö†Ô∏è SW: Failed to match normalized RSC key', e);
      }
    }
    if (cachedResponse) {
      console.log(`‚úÖ SW: Cache fallback for ${request.url}`);
      return cachedResponse;
    }
    
    // 5. Fallback –¥–ª—è RSC-–∑–∞–ø—Ä–æ—Å–æ–≤ -> –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π RSC-–æ—Ç–≤–µ—Ç
    if (resourceType === 'RSC_DATA') {
      return await getRSCFallback(request);
    }
    
    // 6. Fallback –¥–ª—è HTML-—Å—Ç—Ä–∞–Ω–∏—Ü
    if (resourceType === 'HTML_PAGES') {
      return await getOfflineFallback(request);
    }
    
    throw error;
  }
}

// üîÑ Network-first with timeout –¥–ª—è RSC-–∑–∞–ø—Ä–æ—Å–æ–≤
async function networkFirstWithTimeout(request, cache, resourceType, timeoutMs) {
  function fetchWithTimeout(req, ms) {
    return new Promise((resolve, reject) => {
      const timer = setTimeout(() => reject(new Error('timeout')), ms);
      fetch(req).then((res) => {
        clearTimeout(timer);
        resolve(res);
      }).catch((err) => {
        clearTimeout(timer);
        reject(err);
      });
    });
  }

  // 1) –ë—ã—Å—Ç—Ä–∞—è –ø–æ–ø—ã—Ç–∫–∞ —Å–µ—Ç–∏ —Å —Ç–∞–π–º–∞—É—Ç–æ–º
  try {
    const networkResponse = await fetchWithTimeout(request, timeoutMs);
    if (networkResponse.ok) {
      const responseToCache = networkResponse.clone();
      const headers = new Headers(responseToCache.headers);
      headers.set('sw-cache-time', Date.now().toString());
      headers.set('sw-cache-type', resourceType);
      const modifiedResponse = new Response(responseToCache.body, {
        status: responseToCache.status,
        statusText: responseToCache.statusText,
        headers: headers,
      });
      // –ü–æ–¥ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–º –∫–ª—é—á–æ–º
      await cache.put(request, modifiedResponse);
      // –ò –ø–æ–¥ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–º –∫–ª—é—á–æ–º –±–µ–∑ _rsc
      try {
        const normalizedRequest = getNormalizedRSCRequest(request);
        // –ö–ª–æ–Ω–∏—Ä—É–µ–º response –¥–æ –µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        const normalizedResponse = new Response(responseToCache.body, {
          status: responseToCache.status,
          statusText: responseToCache.statusText,
          headers: headers,
        });
        await cache.put(normalizedRequest, normalizedResponse);
        console.log(`üíæ SW: Also cached normalized RSC key: ${normalizedRequest.url}`);
      } catch (e) {
        console.warn('‚ö†Ô∏è SW: Failed to cache normalized RSC key', e);
      }
      return networkResponse;
    }
  } catch (e) {
    console.log(`‚ùå SW: RSC network attempt failed or timed out for ${request.url}`);
  }

  // 2) –ü–∞–¥–∞–µ–º –≤ –∫—ç—à: —Å–Ω–∞—á–∞–ª–∞ —Ç–æ—á–Ω—ã–π –∫–ª—é—á
  let cachedResponse = await cache.match(request);
  // –ó–∞—Ç–µ–º –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –±–µ–∑ _rsc
  if (!cachedResponse) {
    try {
      const normalizedRequest = getNormalizedRSCRequest(request);
      cachedResponse = await cache.match(normalizedRequest);
      if (cachedResponse) {
        console.log(`‚úÖ SW: RSC normalized cache hit for ${normalizedRequest.url}`);
      }
    } catch (e) {
      console.warn('‚ö†Ô∏è SW: Failed to match normalized RSC key', e);
    }
  }
  // –ó–∞—Ç–µ–º –ø–æ–∏—Å–∫ –ø–æ pathname –±–µ–∑ query
  if (!cachedResponse) {
    try {
      const cacheName = getCacheName(resourceType);
      const rscCache = await caches.open(cacheName);
      const keys = await rscCache.keys();
      const reqUrl = new URL(request.url);
      const matchKey = keys.find(k => {
        try {
          const kUrl = new URL(k.url);
          return kUrl.origin === reqUrl.origin && kUrl.pathname === reqUrl.pathname;
        } catch { return false; }
      });
      if (matchKey) {
        console.log(`‚úÖ SW: RSC pathname cache hit for ${reqUrl.pathname} via ${matchKey.url}`);
        cachedResponse = await rscCache.match(matchKey);
      }
    } catch (e) {
      console.warn('‚ö†Ô∏è SW: Pathname-based RSC lookup failed', e);
    }
  }
  if (cachedResponse) return cachedResponse;

  // 3) –ü–æ—Å–ª–µ–¥–Ω–∏–π fallback ‚Äî HTML –æ—Ñ–ª–∞–π–Ω-—Å—Ç—Ä–∞–Ω–∏—Ü–∞ (–ø–æ–≤–µ–¥–µ–Ω–∏–µ Next –∑–∞–≥–ª—É—à–∫–∏)
  console.log(`üÜò SW: No RSC data available, using HTML offline fallback: ${request.url}`);
  return await getOfflineFallback(request);
}

// üßπ –£–ú–ù–ê–Ø –û–ß–ò–°–¢–ö–ê –ö–≠–®–ê
async function cleanupCache(cacheName, resourceType) {
  const cache = await caches.open(cacheName);
  const keys = await cache.keys();
  const limit = CACHE_CONFIG.LIMITS[resourceType] || 100;
  
  if (keys.length <= limit) return;
  
  console.log(`üßπ SW: Cleaning up ${cacheName}, current: ${keys.length}, limit: ${limit}`);
  
  // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è (—Å—Ç–∞—Ä—ã–µ –ø–µ—Ä–≤—ã–º–∏)
  const entries = await Promise.all(
    keys.map(async (key) => {
      const response = await cache.match(key);
      const cacheTime = response?.headers.get('sw-cache-time') || '0';
      return { key, cacheTime: parseInt(cacheTime) };
    })
  );
  
  entries.sort((a, b) => a.cacheTime - b.cacheTime);
  
  // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏
  const toDelete = entries.slice(0, entries.length - limit);
  await Promise.all(toDelete.map(entry => cache.delete(entry.key)));
  
  console.log(`üóëÔ∏è SW: Deleted ${toDelete.length} old entries from ${cacheName}`);
}

// üÜò FALLBACK –î–õ–Ø –û–§–õ–ê–ô–ù-–°–¢–†–ê–ù–ò–¶
async function getOfflineFallback(request) {
  console.log(`üÜò SW: Providing offline fallback for: ${request.url}`);
  
  // –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ—Ö–æ–∂—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤ –∫—ç—à–µ
  const htmlCache = await caches.open(CACHE_CONFIG.CACHES.HTML_PAGES);
  const keys = await htmlCache.keys();
  
  // –ò—â–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ –ø—É—Ç–∏ (–∏–≥–Ω–æ—Ä–∏—Ä—É—è query –ø–∞—Ä–∞–º–µ—Ç—Ä—ã)
  const url = new URL(request.url);
  const pathname = url.pathname;
  
  for (const key of keys) {
    const keyUrl = new URL(key.url);
    if (keyUrl.pathname === pathname) {
      console.log(`üéØ SW: Found similar page in cache: ${key.url}`);
      return await htmlCache.match(key);
    }
  }
  
  // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—â—É—é –æ—Ñ–ª–∞–π–Ω-—Å—Ç—Ä–∞–Ω–∏—Ü—É
  return new Response(`
    <!DOCTYPE html>
    <html>
    <head>
      <title>–û—Ñ–ª–∞–π–Ω - Gafus</title>
      <meta charset="utf-8">
      <meta name="viewport" content="width=device-width, initial-scale=1">
      <style>
        body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; 
               margin: 0; padding: 20px; background: #f5f5f5; }
        .container { max-width: 600px; margin: 0 auto; background: white; 
                    padding: 40px; border-radius: 8px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }
        .icon { font-size: 48px; text-align: center; margin-bottom: 20px; }
        h1 { color: #333; text-align: center; margin-bottom: 20px; }
        p { color: #666; line-height: 1.6; text-align: center; }
        .retry { background: #007bff; color: white; border: none; 
                padding: 12px 24px; border-radius: 6px; cursor: pointer; 
                margin-top: 20px; display: block; margin-left: auto; margin-right: auto; }
      </style>
    </head>
    <body>
      <div class="container">
        <div class="icon">üì±</div>
        <h1>–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É</h1>
        <p>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.</p>
        <button class="retry" onclick="window.location.reload()">–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞</button>
      </div>
    </body>
    </html>
  `, {
    status: 200,
    statusText: 'OK',
    headers: { 'Content-Type': 'text/html' }
  });
}

// üîÑ FALLBACK –î–õ–Ø RSC-–ó–ê–ü–†–û–°–û–í
async function getRSCFallback(request) {
  console.log(`üîÑ SW: Providing RSC fallback for: ${request.url}`);
  
  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤–∞–ª–∏–¥–Ω—ã–π RSC-–æ—Ç–≤–µ—Ç —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
  // Next.js –æ–∂–∏–¥–∞–µ—Ç JSON —Å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏
  const rscData = {
    "0": ["$", "div", null, {"children": ["$", "div", null, {"children": "–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É", "className": "text-center p-8"}]}]
  };
  
  return new Response(JSON.stringify(rscData), {
    status: 200,
    statusText: 'OK',
    headers: { 
      'Content-Type': 'text/x-component',
      'sw-fallback': 'rsc-offline'
    }
  });
}

// Safari/WebKit-specific settings –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
function getSafariSettings() {
  const isIOS = /iPad|iPhone|iPod/.test(navigator.userAgent);
  const isWebKit = /webkit/i.test(navigator.userAgent);
  const isChrome = /chrome/i.test(navigator.userAgent);
  const isSafari = isWebKit && (/safari/i.test(navigator.userAgent) && !isChrome || isIOS);
  const isStandalone = navigator.standalone;
  
  return {
    isSafari,
    isIOS,
    isWebKit,
    isStandalone,
    useSimpleNotifications: isSafari,
    usePWALogic: isSafari && isStandalone,
  };
}

const settings = getSafariSettings();

console.log('ü¶Å SW: Settings loaded', {
  isSafari: settings.isSafari,
  isIOS: settings.isIOS,
  isStandalone: settings.isStandalone,
  usePWALogic: settings.usePWALogic
});

// –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫—ç—à–µ–º
class CacheManager {
  constructor() {
    this.caches = new Map();
  }

  // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ —Ä–µ—Å—É—Ä—Å–∞ –ø–æ URL
  getResourceType(url) {
    const pathname = new URL(url).pathname;
    
    for (const [type, patterns] of Object.entries(CACHE_CONFIG.PATTERNS)) {
      if (patterns.some(pattern => pattern.test(pathname))) {
        return type;
      }
    }
    
    return 'API'; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å—á–∏—Ç–∞–µ–º API
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –∫—ç—à–∞ –¥–ª—è —Ç–∏–ø–∞ —Ä–µ—Å—É—Ä—Å–∞
  getCacheName(type) {
    const cacheMap = {
      STATIC: CACHE_CONFIG.STATIC_CACHE,
      PAGES: CACHE_CONFIG.PAGES_CACHE,
      API: CACHE_CONFIG.API_CACHE,
      IMAGES: CACHE_CONFIG.IMAGES_CACHE,
    };
    return cacheMap[type] || CACHE_CONFIG.API_CACHE;
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω—É–∂–Ω–æ –ª–∏ –∫—ç—à–∏—Ä–æ–≤–∞—Ç—å —Ä–µ—Å—É—Ä—Å
  shouldCache(url, type) {
    // –ù–µ –∫—ç—à–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å—ã —Å no-cache –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
    if (url.includes('no-cache')) return false;
    
    // –ù–µ –∫—ç—à–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å—ã –∫ –≤–Ω–µ—à–Ω–∏–º –¥–æ–º–µ–Ω–∞–º
    try {
      const urlObj = new URL(url);
      if (urlObj.origin !== self.location.origin) return false;
    } catch {
      return false;
    }
    
    return true;
  }

  // –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π –∏–∑ –∫—ç—à–∞
  async cleanupCache(cacheName, maxEntries = CACHE_CONFIG.MAX_CACHE_ENTRIES) {
    try {
      const cache = await caches.open(cacheName);
      const keys = await cache.keys();
      
      if (keys.length > maxEntries) {
        const keysToDelete = keys.slice(0, keys.length - maxEntries);
        await Promise.all(keysToDelete.map(key => cache.delete(key)));
        console.log(`üßπ SW: Cleaned up ${keysToDelete.length} old entries from ${cacheName}`);
      }
    } catch (error) {
      console.warn(`‚ö†Ô∏è SW: Failed to cleanup cache ${cacheName}:`, error);
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ TTL –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ –∫—ç—à–µ
  async isCacheEntryValid(request, cacheName) {
    try {
      const cache = await caches.open(cacheName);
      const response = await cache.match(request);
      
      if (!response) return false;
      
      const cacheTime = response.headers.get('sw-cache-time');
      if (!cacheTime) return true; // –ï—Å–ª–∏ –Ω–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è, —Å—á–∏—Ç–∞–µ–º –≤–∞–ª–∏–¥–Ω—ã–º
      
      const resourceType = this.getResourceType(request.url);
      const ttl = CACHE_CONFIG.TTL[resourceType];
      const age = Date.now() - parseInt(cacheTime);
      
      return age < ttl;
    } catch {
      return false;
    }
  }
}

const cacheManager = new CacheManager();

// –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ —Å—Ç—Ä–∞–Ω–∏—Ü: —É–¥–∞–ª—è–µ–º –≤–æ–ª–∞—Ç–∏–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, _rsc —É Next.js)
function getNormalizedPageRequest(originalRequest) {
  try {
    const originalUrl = new URL(originalRequest.url);
    const normalizedUrl = new URL(originalUrl.toString());
    // –£–¥–∞–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä _rsc, —á—Ç–æ–±—ã –∫—ç—à –Ω–µ —Ä–∞–∑—Ä–∞—Å—Ç–∞–ª—Å—è –∏ —Ö–∏—Ç—ã —Å–æ–≤–ø–∞–¥–∞–ª–∏
    if (normalizedUrl.searchParams.has('_rsc')) {
      normalizedUrl.searchParams.delete('_rsc');
    }
    // –ú–æ–∂–Ω–æ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –æ—á–∏—â–∞—Ç—å –∏ –¥—Ä—É–≥–∏–µ –º–µ—Ç–∫–∏ —Ç—Ä–µ–∫–∏–Ω–≥–∞ (utm_* –∏ —Ç.–ø.)
    return new Request(normalizedUrl.toString(), { method: 'GET' });
  } catch {
    return originalRequest;
  }
}

// –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è RSC-–∑–∞–ø—Ä–æ—Å–æ–≤: —É–¥–∞–ª—è–µ–º –≤–æ–ª–∞—Ç–∏–ª—å–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä _rsc
function getNormalizedRSCRequest(originalRequest) {
  try {
    const originalUrl = new URL(originalRequest.url);
    const normalizedUrl = new URL(originalUrl.toString());
    if (normalizedUrl.searchParams.has('_rsc')) {
      normalizedUrl.searchParams.delete('_rsc');
    }
    return new Request(normalizedUrl.toString(), { method: 'GET' });
  } catch {
    return originalRequest;
  }
}

// Install event
self.addEventListener('install', (event) => {
  console.log('üì¶ SW: Install event - Setting up caches');
  
  event.waitUntil(
    (async () => {
      try {
        // –°–æ–∑–¥–∞–µ–º –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫—ç—à–∏
        const cacheNames = [
          CACHE_CONFIG.CACHES.HTML_PAGES,
          CACHE_CONFIG.CACHES.RSC_DATA,
          CACHE_CONFIG.CACHES.STATIC,
          CACHE_CONFIG.CACHES.API,
          CACHE_CONFIG.CACHES.IMAGES,
        ];
        
        await Promise.all(
          cacheNames.map(cacheName => caches.open(cacheName))
        );
        
        console.log('‚úÖ SW: All caches created successfully');
        self.skipWaiting();
      } catch (error) {
        console.error('‚ùå SW: Failed to create caches:', error);
      }
    })()
  );
});

// Activate event
self.addEventListener('activate', (event) => {
  console.log('üîÑ SW: Activate event - Cleaning up old caches');
  
  event.waitUntil(
    (async () => {
      try {
        // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –≤–µ—Ä—Å–∏–∏ –∫—ç—à–µ–π
        const cacheNames = await caches.keys();
        const currentCacheNames = Object.values(CACHE_CONFIG.CACHES);
        
        const cachesToDelete = cacheNames.filter(
          cacheName => !currentCacheNames.includes(cacheName)
        );
        
        await Promise.all(
          cachesToDelete.map(cacheName => caches.delete(cacheName))
        );
        
        if (cachesToDelete.length > 0) {
          console.log(`üßπ SW: Deleted ${cachesToDelete.length} old caches`);
        }
        
        // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ –∏–∑ —Ç–µ–∫—É—â–∏—Ö –∫—ç—à–µ–π
        await Promise.all(
          currentCacheNames.map(cacheName => 
            cacheManager.cleanupCache(cacheName)
          )
        );
        
        console.log('‚úÖ SW: Cache cleanup completed');
        await self.clients.claim();
        
        // üéØ –ü–†–ï–î–í–ê–†–ò–¢–ï–õ–¨–ù–û–ï –ö–≠–®–ò–†–û–í–ê–ù–ò–ï HTML-–°–¢–†–ê–ù–ò–¶
        await precacheHTMLPages();
      } catch (error) {
        console.error('‚ùå SW: Failed to cleanup caches:', error);
      }
    })()
  );
});

// üéØ –§–£–ù–ö–¶–ò–Ø –ü–†–ï–î–í–ê–†–ò–¢–ï–õ–¨–ù–û–ì–û –ö–≠–®–ò–†–û–í–ê–ù–ò–Ø HTML-–°–¢–†–ê–ù–ò–¶
async function precacheHTMLPages() {
  console.log('üéØ SW: Starting HTML pages precaching');
  
  try {
    const htmlCache = await caches.open(CACHE_CONFIG.CACHES.HTML_PAGES);
    const pagesToCache = [
      '/',
      '/profile?username=admin',
      '/statistics',
      '/achievements',
      '/courses',
      '/favorites'
    ];
    
    // –ö—ç—à–∏—Ä—É–µ–º favicon.ico
    const faviconUrl = '/favicon.ico';
    try {
      console.log(`üéØ SW: Precaching favicon: ${faviconUrl}`);
      
      const faviconRequest = new Request(faviconUrl, {
        method: 'GET',
        headers: {
          'Accept': 'image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8'
        }
      });
      
      const faviconResponse = await fetch(faviconRequest);
      
      if (faviconResponse.ok) {
        const modifiedResponse = new Response(faviconResponse.body, {
          status: faviconResponse.status,
          statusText: faviconResponse.statusText,
          headers: {
            ...Object.fromEntries(faviconResponse.headers.entries()),
            'sw-cache-time': Date.now().toString(),
            'sw-cache-type': 'IMAGES'
          }
        });
        
        await htmlCache.put(faviconRequest, modifiedResponse);
        console.log(`‚úÖ SW: Precached favicon: ${faviconUrl}`);
      } else {
        console.warn(`‚ö†Ô∏è SW: Favicon not found, creating fallback`);
        // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π favicon fallback
        const fallbackFavicon = new Response('', {
          status: 200,
          statusText: 'OK',
          headers: {
            'Content-Type': 'image/x-icon',
            'sw-cache-time': Date.now().toString(),
            'sw-cache-type': 'IMAGES'
          }
        });
        
        await htmlCache.put(faviconRequest, fallbackFavicon);
        console.log(`‚úÖ SW: Created favicon fallback`);
      }
    } catch (error) {
      console.warn(`‚ö†Ô∏è SW: Failed to precache favicon:`, error);
    }
    
    for (const pageUrl of pagesToCache) {
      try {
        console.log(`üéØ SW: Precaching HTML page: ${pageUrl}`);
        
        // –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è HTML
        const request = new Request(pageUrl, {
          method: 'GET',
          headers: {
            'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
            'Cache-Control': 'no-cache'
          },
          mode: 'cors'
        });
        
        const response = await fetch(request);
        
        if (response.ok && response.headers.get('Content-Type')?.includes('text/html')) {
          const modifiedResponse = new Response(response.body, {
            status: response.status,
            statusText: response.statusText,
            headers: {
              ...Object.fromEntries(response.headers.entries()),
              'sw-cache-time': Date.now().toString(),
              'sw-cache-type': 'HTML_PAGES'
            }
          });
          
          await htmlCache.put(request, modifiedResponse);
          console.log(`‚úÖ SW: Precached HTML page: ${pageUrl}`);
        } else {
          console.warn(`‚ö†Ô∏è SW: Response not HTML for ${pageUrl}:`, response.headers.get('Content-Type'));
        }
      } catch (error) {
        console.warn(`‚ö†Ô∏è SW: Failed to precache ${pageUrl}:`, error);
      }
    }
    
    console.log('‚úÖ SW: HTML pages precaching completed');
  } catch (error) {
    console.error('‚ùå SW: Error in precacheHTMLPages:', error);
  }
}

// Fetch event handler –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
// üéØ –ì–õ–ê–í–ù–´–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö FETCH –°–û–ë–´–¢–ò–ô
// –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –Ω–æ–≤—É—é –≥–∏–±—Ä–∏–¥–Ω—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è

self.addEventListener('fetch', (event) => {
  const { request } = event;
  const url = new URL(request.url);
  
  console.log(`üåê SW: Fetch intercepted: ${request.url}, method: ${request.method}, mode: ${request.mode}`);
  
  // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ-GET –∑–∞–ø—Ä–æ—Å—ã (–∫—Ä–æ–º–µ API)
  if (request.method !== 'GET' && !url.pathname.startsWith('/api/')) {
    console.log(`‚è≠Ô∏è SW: Skipping non-GET request: ${request.url}`);
    return;
  }
  
  // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º chrome-extension –∏ –¥—Ä—É–≥–∏–µ –ø—Ä–æ—Ç–æ–∫–æ–ª—ã
  if (!url.protocol.startsWith('http')) {
    console.log(`‚è≠Ô∏è SW: Skipping non-HTTP request: ${request.url}`);
    return;
  }
  
  try {
    // üß† –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ä–µ—Å—É—Ä—Å–∞ —Å –ø–æ–º–æ—â—å—é —É–º–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
    const resourceType = getResourceType(request);
    const strategy = getCachingStrategy(resourceType);
    
    console.log(`üéØ SW: Resource type: ${resourceType}, Strategy: ${strategy}`);
    
    // üöÄ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å —Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–µ–π
    event.respondWith(handleRequest(request, resourceType, strategy));
  } catch (error) {
    console.error(`‚ùå SW: Error in fetch handler:`, error);
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É, —á—Ç–æ–±—ã –±—Ä–∞—É–∑–µ—Ä –º–æ–≥ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–ø—Ä–æ—Å —Å–∞–º
    event.respondWith(new Response('Service Worker Error', { 
      status: 500, 
      statusText: 'Internal Server Error' 
    }));
  }
});

// üöÄ –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –û–ë–†–ê–ë–û–¢–ö–ò –ó–ê–ü–†–û–°–û–í
// –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –Ω–æ–≤—É—é –≥–∏–±—Ä–∏–¥–Ω—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è

async function handleRequest(request, resourceType, strategy) {
  console.log(`üöÄ SW: Handling ${resourceType} request with ${strategy} strategy: ${request.url}`);
  
  try {
    // –í—ã–±–∏—Ä–∞–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
    switch (strategy) {
      case 'cacheFirst':
        console.log(`üéØ SW: Using cacheFirst strategy for ${resourceType}`);
        return await cacheFirstStrategy(request, resourceType);
      
      case 'networkFirst':
        console.log(`üåê SW: Using networkFirst strategy for ${resourceType}`);
        return await networkFirstStrategy(request, resourceType);
      
      default:
        console.warn(`‚ö†Ô∏è SW: Unknown strategy ${strategy}, using networkFirst`);
        return await networkFirstStrategy(request, resourceType);
    }
  } catch (error) {
    console.error(`‚ùå SW: Request failed for ${request.url}:`, error);
    console.error(`‚ùå SW: Error details:`, error.stack);
    
    // Fallback –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ñ–ª–∞–π–Ω —Å—Ç—Ä–∞–Ω–∏—Ü—É
    if (resourceType === 'HTML_PAGES') {
      return await getOfflineFallback(request);
    }
    
    // Fallback –¥–ª—è RSC-–∑–∞–ø—Ä–æ—Å–æ–≤
    if (resourceType === 'RSC_DATA') {
      return await getRSCFallback(request);
    }
    
    // –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ç–∏–ø–æ–≤ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É
    return new Response('Offline', { 
      status: 503, 
      statusText: 'Service Unavailable' 
    });
  }
}

// üóëÔ∏è –£–î–ê–õ–ï–ù–´ –°–¢–ê–†–´–ï –§–£–ù–ö–¶–ò–ò - –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –Ω–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≤—ã—à–µ

// –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å Safari-–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π
function createNotificationOptions(title, options = {}) {
  const safariIcon = settings.isSafari ? '/icons/icon-256-safari.png' : '/icons/icon192.png';
  const safariBadge = settings.isSafari ? '/icons/badge-72.png' : '/icons/icon192.png';
  
  if (settings.useSimpleNotifications) {
    // –î–ª—è Safari: —Ç–æ–ª—å–∫–æ –±–∞–∑–æ–≤—ã–µ –æ–ø—Ü–∏–∏ —Å Safari-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–º–∏ –∏–∫–æ–Ω–∫–∞–º–∏
    return {
      body: options.body || '–ù–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ',
      icon: options.icon || safariIcon,
      badge: options.badge || safariBadge,
      tag: options.tag || 'default',
      requireInteraction: false,
      silent: false,
    };
  }
  
  // –î–ª—è –¥—Ä—É–≥–∏—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤: –ø–æ–ª–Ω—ã–µ –æ–ø—Ü–∏–∏
  return {
    body: options.body || '–ù–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ',
    icon: options.icon || safariIcon,
    badge: options.badge || safariBadge,
    tag: options.tag || 'default',
    requireInteraction: options.requireInteraction || false,
    silent: options.silent || false,
    data: options.data || {},
    actions: options.actions || [],
    ...options,
  };
}

// Push event handler
self.addEventListener('push', (event) => {
  console.log('ü¶Å SW Custom: Push event received');
  
  let data = {};
  try {
    data = event.data ? event.data.json() : {};
  } catch (error) {
    console.warn('‚ö†Ô∏è SW Custom: –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å push –¥–∞–Ω–Ω—ã–µ:', error);
    data = { title: 'Gafus', body: '–ù–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ' };
  }
  
  const title = data.title || 'Gafus';
  const options = createNotificationOptions(title, {
    body: data.body || '–ù–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ',
    icon: data.icon,
    badge: data.badge,
    tag: data.tag || 'default',
    requireInteraction: data.requireInteraction || false,
    data: data,
    actions: data.actions || [],
  });
  
  console.log('ü¶Å SW Custom: Showing notification:', title);
  
  event.waitUntil(
    self.registration.showNotification(title, options)
      .then(() => {
        console.log('‚úÖ SW Custom: Notification shown successfully');
      })
      .catch(error => {
        console.error('‚ùå SW Custom: Error showing notification:', error);
      })
  );
});

// Notification click event handler
self.addEventListener('notificationclick', (event) => {
  console.log('ü¶Å SW Custom: Notification click event');
  
  event.notification.close();
  
  event.waitUntil(
    self.clients.matchAll({ type: 'window', includeUncontrolled: true })
      .then((clients) => {
        // –ò—â–µ–º —É–∂–µ –æ—Ç–∫—Ä—ã—Ç–æ–µ –æ–∫–Ω–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        for (const client of clients) {
          if (client.url.includes('gafus.ru') && 'focus' in client) {
            console.log('‚úÖ SW Custom: Focusing existing window');
            return client.focus();
          }
        }
        
        // –ï—Å–ª–∏ –Ω–µ—Ç –æ—Ç–∫—Ä—ã—Ç–æ–≥–æ –æ–∫–Ω–∞, –æ—Ç–∫—Ä—ã–≤–∞–µ–º –Ω–æ–≤–æ–µ
        if (clients.openWindow) {
          console.log('‚úÖ SW Custom: Opening new window');
          return clients.openWindow('/');
        }
      })
      .catch(error => {
        console.error('‚ùå SW Custom: Error handling notification click:', error);
      })
  );
});

// Message event handler –¥–ª—è –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏ —Å –∫–ª–∏–µ–Ω—Ç–æ–º
self.addEventListener('message', (event) => {
  console.log('ü¶Å SW Custom: Message event', event.data);
  
  if (event.data && event.data.type === 'SKIP_WAITING') {
    console.log('ü¶Å SW Custom: Skip waiting requested');
    self.skipWaiting();
  }
  
  if (event.data && event.data.type === 'GET_VERSION') {
    event.ports[0].postMessage({
      type: 'VERSION_INFO',
      version: 'push-and-cache',
      safari: settings.isSafari,
      ios: settings.isIOS,
    });
  }
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç offlineStore
  if (event.data && event.data.type === 'OFFLINE_STATUS') {
    handleOfflineStatusChange(event.data.isOnline);
  }
  
  if (event.data && event.data.type === 'SYNC_QUEUE') {
    handleSyncQueue(event.data.actions);
  }
  
  if (event.data && event.data.type === 'CACHE_STATUS') {
    handleCacheStatusRequest(event);
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ—Ñ–ª–∞–π–Ω —Å—Ç–∞—Ç—É—Å–∞
async function handleOfflineStatusChange(isOnline) {
  console.log(`üåê SW: Offline status changed: ${isOnline ? 'online' : 'offline'}`);
  
  // –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ –∫–ª–∏–µ–Ω—Ç—ã –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞
  const clients = await self.clients.matchAll();
  clients.forEach(client => {
    client.postMessage({
      type: 'NETWORK_STATUS_CHANGED',
      isOnline,
      timestamp: Date.now(),
    });
  });
  
  // –ï—Å–ª–∏ —Å—Ç–∞–ª–∏ –æ–Ω–ª–∞–π–Ω, –ø—ã—Ç–∞–µ–º—Å—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫—ç—à
  if (isOnline) {
    await syncCachedData();
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—á–µ—Ä–µ–¥–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
async function handleSyncQueue(actions) {
  console.log(`üîÑ SW: Processing sync queue with ${actions.length} actions`);
  
  for (const action of actions) {
    try {
      await processOfflineAction(action);
    } catch (error) {
      console.warn(`‚ö†Ô∏è SW: Failed to process action ${action.id}:`, error);
    }
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Å—Ç–∞—Ç—É—Å–∞ –∫—ç—à–∞
async function handleCacheStatusRequest(event) {
  try {
    const cacheNames = [
      CACHE_CONFIG.STATIC_CACHE,
      CACHE_CONFIG.PAGES_CACHE,
      CACHE_CONFIG.API_CACHE,
      CACHE_CONFIG.IMAGES_CACHE,
    ];
    
    const cacheStatus = {};
    
    for (const cacheName of cacheNames) {
      const cache = await caches.open(cacheName);
      const keys = await cache.keys();
      cacheStatus[cacheName] = {
        entries: keys.length,
        size: await estimateCacheSize(cache),
      };
    }
    
    event.ports[0].postMessage({
      type: 'CACHE_STATUS_RESPONSE',
      status: cacheStatus,
    });
  } catch (error) {
    console.warn('‚ö†Ô∏è SW: Failed to get cache status:', error);
    event.ports[0].postMessage({
      type: 'CACHE_STATUS_RESPONSE',
      error: error.message,
    });
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ñ–ª–∞–π–Ω –¥–µ–π—Å—Ç–≤–∏—è
async function processOfflineAction(action) {
  console.log(`üîÑ SW: Processing offline action: ${action.type}`);
  
  // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
  // –ù–∞–ø—Ä–∏–º–µ—Ä, –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
  
  // –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–µ
  const clients = await self.clients.matchAll();
  clients.forEach(client => {
    client.postMessage({
      type: 'OFFLINE_ACTION_PROCESSED',
      actionId: action.id,
      success: true,
    });
  });
}

// –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–µ—Ç–∏
async function syncCachedData() {
  console.log('üîÑ SW: Syncing cached data after network restoration');
  
  try {
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    // –ù–∞–ø—Ä–∏–º–µ—Ä, –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫ –∏–ª–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
    
    const clients = await self.clients.matchAll();
    clients.forEach(client => {
      client.postMessage({
        type: 'NETWORK_RESTORED',
        timestamp: Date.now(),
      });
    });
  } catch (error) {
    console.warn('‚ö†Ô∏è SW: Failed to sync cached data:', error);
  }
}

// –û—Ü–µ–Ω–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ –∫—ç—à–∞
async function estimateCacheSize(cache) {
  try {
    const keys = await cache.keys();
    let totalSize = 0;
    
    for (const key of keys) {
      const response = await cache.match(key);
      if (response && response.body) {
        const reader = response.body.getReader();
        let size = 0;
        
        while (true) {
          const { done, value } = await reader.read();
          if (done) break;
          size += value.length;
        }
        
        totalSize += size;
      }
    }
    
    return totalSize;
  } catch {
    return 0;
  }
}

console.log('‚úÖ SW: Gafus Service Worker loaded successfully - Push Notifications & Offline Caching enabled');