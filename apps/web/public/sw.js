// –ö–∞—Å—Ç–æ–º–Ω—ã–π Service Worker –¥–ª—è Gafus
// –û—Ç–≤–µ—á–∞–µ—Ç –∑–∞ push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏ –æ—Ñ–ª–∞–π–Ω –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ

console.log('üöÄ SW: Starting Gafus Service Worker for Push Notifications & Offline Caching');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
const CACHE_CONFIG = {
  // –í–µ—Ä—Å–∏–∏ –∫—ç—à–µ–π –¥–ª—è –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
  STATIC_CACHE: 'gafus-static-v1',
  PAGES_CACHE: 'gafus-pages-v1',
  API_CACHE: 'gafus-api-v1',
  IMAGES_CACHE: 'gafus-images-v1',
  
  // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –≤ –∫—ç—à–µ
  MAX_CACHE_ENTRIES: 100,
  
  // TTL –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Ä–µ—Å—É—Ä—Å–æ–≤ (–≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö)
  TTL: {
    STATIC: 7 * 24 * 60 * 60 * 1000, // 7 –¥–Ω–µ–π
    PAGES: 24 * 60 * 60 * 1000,      // 1 –¥–µ–Ω—å
    API: 30 * 60 * 1000,             // 30 –º–∏–Ω—É—Ç
    IMAGES: 30 * 24 * 60 * 60 * 1000, // 30 –¥–Ω–µ–π
  },
  
  // –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
  PATTERNS: {
    STATIC: [
      /\.(?:js|css|woff2?|ttf|eot)$/,
      /\/_next\/static\//,
      /\/icons\//,
    ],
    PAGES: [
      /^\/$/,
      /^\/courses/,
      /^\/profile/,
      /^\/achievements/,
      /^\/trainings/,
    ],
    API: [
      /^\/api\//,
    ],
    IMAGES: [
      /\.(?:png|jpg|jpeg|gif|webp|svg)$/,
      /\/uploads\//,
    ],
  },
};

// Safari/WebKit-specific settings –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
function getSafariSettings() {
  const isIOS = /iPad|iPhone|iPod/.test(navigator.userAgent);
  const isWebKit = /webkit/i.test(navigator.userAgent);
  const isChrome = /chrome/i.test(navigator.userAgent);
  const isSafari = isWebKit && (/safari/i.test(navigator.userAgent) && !isChrome || isIOS);
  const isStandalone = navigator.standalone;
  
  return {
    isSafari,
    isIOS,
    isWebKit,
    isStandalone,
    useSimpleNotifications: isSafari,
    usePWALogic: isSafari && isStandalone,
  };
}

const settings = getSafariSettings();

console.log('ü¶Å SW: Settings loaded', {
  isSafari: settings.isSafari,
  isIOS: settings.isIOS,
  isStandalone: settings.isStandalone,
  usePWALogic: settings.usePWALogic
});

// –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫—ç—à–µ–º
class CacheManager {
  constructor() {
    this.caches = new Map();
  }

  // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ —Ä–µ—Å—É—Ä—Å–∞ –ø–æ URL
  getResourceType(url) {
    const pathname = new URL(url).pathname;
    
    for (const [type, patterns] of Object.entries(CACHE_CONFIG.PATTERNS)) {
      if (patterns.some(pattern => pattern.test(pathname))) {
        return type;
      }
    }
    
    return 'API'; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å—á–∏—Ç–∞–µ–º API
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –∫—ç—à–∞ –¥–ª—è —Ç–∏–ø–∞ —Ä–µ—Å—É—Ä—Å–∞
  getCacheName(type) {
    const cacheMap = {
      STATIC: CACHE_CONFIG.STATIC_CACHE,
      PAGES: CACHE_CONFIG.PAGES_CACHE,
      API: CACHE_CONFIG.API_CACHE,
      IMAGES: CACHE_CONFIG.IMAGES_CACHE,
    };
    return cacheMap[type] || CACHE_CONFIG.API_CACHE;
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω—É–∂–Ω–æ –ª–∏ –∫—ç—à–∏—Ä–æ–≤–∞—Ç—å —Ä–µ—Å—É—Ä—Å
  shouldCache(url, type) {
    // –ù–µ –∫—ç—à–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å—ã —Å no-cache –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
    if (url.includes('no-cache')) return false;
    
    // –ù–µ –∫—ç—à–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å—ã –∫ –≤–Ω–µ—à–Ω–∏–º –¥–æ–º–µ–Ω–∞–º
    try {
      const urlObj = new URL(url);
      if (urlObj.origin !== self.location.origin) return false;
    } catch {
      return false;
    }
    
    return true;
  }

  // –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π –∏–∑ –∫—ç—à–∞
  async cleanupCache(cacheName, maxEntries = CACHE_CONFIG.MAX_CACHE_ENTRIES) {
    try {
      const cache = await caches.open(cacheName);
      const keys = await cache.keys();
      
      if (keys.length > maxEntries) {
        const keysToDelete = keys.slice(0, keys.length - maxEntries);
        await Promise.all(keysToDelete.map(key => cache.delete(key)));
        console.log(`üßπ SW: Cleaned up ${keysToDelete.length} old entries from ${cacheName}`);
      }
    } catch (error) {
      console.warn(`‚ö†Ô∏è SW: Failed to cleanup cache ${cacheName}:`, error);
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ TTL –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ –∫—ç—à–µ
  async isCacheEntryValid(request, cacheName) {
    try {
      const cache = await caches.open(cacheName);
      const response = await cache.match(request);
      
      if (!response) return false;
      
      const cacheTime = response.headers.get('sw-cache-time');
      if (!cacheTime) return true; // –ï—Å–ª–∏ –Ω–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è, —Å—á–∏—Ç–∞–µ–º –≤–∞–ª–∏–¥–Ω—ã–º
      
      const resourceType = this.getResourceType(request.url);
      const ttl = CACHE_CONFIG.TTL[resourceType];
      const age = Date.now() - parseInt(cacheTime);
      
      return age < ttl;
    } catch {
      return false;
    }
  }
}

const cacheManager = new CacheManager();

// Install event
self.addEventListener('install', (event) => {
  console.log('üì¶ SW: Install event - Setting up caches');
  
  event.waitUntil(
    (async () => {
      try {
        // –°–æ–∑–¥–∞–µ–º –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫—ç—à–∏
        const cacheNames = [
          CACHE_CONFIG.STATIC_CACHE,
          CACHE_CONFIG.PAGES_CACHE,
          CACHE_CONFIG.API_CACHE,
          CACHE_CONFIG.IMAGES_CACHE,
        ];
        
        await Promise.all(
          cacheNames.map(cacheName => caches.open(cacheName))
        );
        
        console.log('‚úÖ SW: All caches created successfully');
        self.skipWaiting();
      } catch (error) {
        console.error('‚ùå SW: Failed to create caches:', error);
      }
    })()
  );
});

// Activate event
self.addEventListener('activate', (event) => {
  console.log('üîÑ SW: Activate event - Cleaning up old caches');
  
  event.waitUntil(
    (async () => {
      try {
        // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –≤–µ—Ä—Å–∏–∏ –∫—ç—à–µ–π
        const cacheNames = await caches.keys();
        const currentCacheNames = [
          CACHE_CONFIG.STATIC_CACHE,
          CACHE_CONFIG.PAGES_CACHE,
          CACHE_CONFIG.API_CACHE,
          CACHE_CONFIG.IMAGES_CACHE,
        ];
        
        const cachesToDelete = cacheNames.filter(
          cacheName => !currentCacheNames.includes(cacheName)
        );
        
        await Promise.all(
          cachesToDelete.map(cacheName => caches.delete(cacheName))
        );
        
        if (cachesToDelete.length > 0) {
          console.log(`üßπ SW: Deleted ${cachesToDelete.length} old caches`);
        }
        
        // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ –∏–∑ —Ç–µ–∫—É—â–∏—Ö –∫—ç—à–µ–π
        await Promise.all(
          currentCacheNames.map(cacheName => 
            cacheManager.cleanupCache(cacheName)
          )
        );
        
        console.log('‚úÖ SW: Cache cleanup completed');
        await self.clients.claim();
      } catch (error) {
        console.error('‚ùå SW: Failed to cleanup caches:', error);
      }
    })()
  );
});

// Fetch event handler –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
self.addEventListener('fetch', (event) => {
  const { request } = event;
  const url = new URL(request.url);
  
  // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ-GET –∑–∞–ø—Ä–æ—Å—ã (–∫—Ä–æ–º–µ API)
  if (request.method !== 'GET' && !url.pathname.startsWith('/api/')) {
    return;
  }
  
  // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º chrome-extension –∏ –¥—Ä—É–≥–∏–µ –ø—Ä–æ—Ç–æ–∫–æ–ª—ã
  if (!url.protocol.startsWith('http')) {
    return;
  }
  
  const resourceType = cacheManager.getResourceType(request.url);
  
  if (!cacheManager.shouldCache(request.url, resourceType)) {
    return;
  }
  
  event.respondWith(handleRequest(request, resourceType));
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ —Å —Ä–∞–∑–Ω—ã–º–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º–∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
async function handleRequest(request, resourceType) {
  const cacheName = cacheManager.getCacheName(resourceType);
  
  try {
    switch (resourceType) {
      case 'STATIC':
      case 'IMAGES':
        return await cacheFirstStrategy(request, cacheName);
      
      case 'PAGES':
        return await cacheFirstStrategy(request, cacheName);
      
      case 'API':
        return await networkFirstStrategy(request, cacheName);
      
      default:
        return await networkFirstStrategy(request, cacheName);
    }
  } catch (error) {
    console.warn(`‚ö†Ô∏è SW: Request failed for ${request.url}:`, error);
    
    // Fallback –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ñ–ª–∞–π–Ω —Å—Ç—Ä–∞–Ω–∏—Ü—É
    if (resourceType === 'PAGES') {
      return await getOfflinePage();
    }
    
    // –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ç–∏–ø–æ–≤ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É
    return new Response('Offline', { 
      status: 503, 
      statusText: 'Service Unavailable' 
    });
  }
}

// –°—Ç—Ä–∞—Ç–µ–≥–∏—è Cache First (–¥–ª—è —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ä–µ—Å—É—Ä—Å–æ–≤ –∏ —Å—Ç—Ä–∞–Ω–∏—Ü)
async function cacheFirstStrategy(request, cacheName) {
  const cache = await caches.open(cacheName);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
  const cachedResponse = await cache.match(request);
  if (cachedResponse && await cacheManager.isCacheEntryValid(request, cacheName)) {
    console.log(`üì¶ SW: Serving from cache: ${request.url}`);
    return cachedResponse;
  }
  
  // –ï—Å–ª–∏ –Ω–µ—Ç –≤ –∫—ç—à–µ –∏–ª–∏ –∏—Å—Ç–µ–∫ TTL, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏–∑ —Å–µ—Ç–∏
  try {
    const networkResponse = await fetch(request);
    
    if (networkResponse.ok) {
      // –ö–ª–æ–Ω–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –∏ –¥–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
      const responseToCache = networkResponse.clone();
      const headers = new Headers(responseToCache.headers);
      headers.set('sw-cache-time', Date.now().toString());
      
      const modifiedResponse = new Response(responseToCache.body, {
        status: responseToCache.status,
        statusText: responseToCache.statusText,
        headers: headers,
      });
      
      await cache.put(request, modifiedResponse);
      console.log(`üíæ SW: Cached: ${request.url}`);
      
      // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏
      await cacheManager.cleanupCache(cacheName);
    }
    
    return networkResponse;
  } catch (error) {
    // –ï—Å–ª–∏ —Å–µ—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é (–¥–∞–∂–µ –µ—Å–ª–∏ TTL –∏—Å—Ç–µ–∫)
    if (cachedResponse) {
      console.log(`üì¶ SW: Network failed, serving stale cache: ${request.url}`);
      return cachedResponse;
    }
    throw error;
  }
}

// –°—Ç—Ä–∞—Ç–µ–≥–∏—è Network First (–¥–ª—è API –∑–∞–ø—Ä–æ—Å–æ–≤)
async function networkFirstStrategy(request, cacheName) {
  const cache = await caches.open(cacheName);
  
  try {
    // –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–∑ —Å–µ—Ç–∏
    const networkResponse = await fetch(request);
    
    if (networkResponse.ok) {
      // –ö—ç—à–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
      const responseToCache = networkResponse.clone();
      const headers = new Headers(responseToCache.headers);
      headers.set('sw-cache-time', Date.now().toString());
      
      const modifiedResponse = new Response(responseToCache.body, {
        status: responseToCache.status,
        statusText: responseToCache.statusText,
        headers: headers,
      });
      
      await cache.put(request, modifiedResponse);
      console.log(`üíæ SW: Cached API response: ${request.url}`);
      
      // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏
      await cacheManager.cleanupCache(cacheName);
    }
    
    return networkResponse;
  } catch (error) {
    // –ï—Å–ª–∏ —Å–µ—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–∑ –∫—ç—à–∞
    const cachedResponse = await cache.match(request);
    if (cachedResponse) {
      console.log(`üì¶ SW: Network failed, serving cached API: ${request.url}`);
      return cachedResponse;
    }
    throw error;
  }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ñ–ª–∞–π–Ω —Å—Ç—Ä–∞–Ω–∏—Ü—ã
async function getOfflinePage() {
  try {
    const cache = await caches.open(CACHE_CONFIG.PAGES_CACHE);
    const offlineResponse = await cache.match('/~offline');
    
    if (offlineResponse) {
      return offlineResponse;
    }
  } catch (error) {
    console.warn('‚ö†Ô∏è SW: Failed to get offline page from cache:', error);
  }
  
  // Fallback –æ—Ñ–ª–∞–π–Ω —Å—Ç—Ä–∞–Ω–∏—Ü–∞
  return new Response(`
    <!DOCTYPE html>
    <html>
      <head>
        <title>Gafus - –û—Ñ–ª–∞–π–Ω</title>
        <meta charset="utf-8">
        <meta name="viewport" content="width=device-width, initial-scale=1">
        <style>
          body { 
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            margin: 0; padding: 20px; text-align: center; 
            background: #f5f5f5; color: #333;
          }
          .container { 
            max-width: 400px; margin: 50px auto; 
            background: white; padding: 40px; border-radius: 12px;
            box-shadow: 0 4px 12px rgba(0,0,0,0.1);
          }
          .icon { font-size: 48px; margin-bottom: 20px; }
          h1 { margin: 0 0 16px; color: #2563eb; }
          p { margin: 0 0 24px; line-height: 1.5; }
          .retry-btn {
            background: #2563eb; color: white; border: none;
            padding: 12px 24px; border-radius: 8px; cursor: pointer;
            font-size: 16px; transition: background 0.2s;
          }
          .retry-btn:hover { background: #1d4ed8; }
        </style>
      </head>
      <body>
        <div class="container">
          <div class="icon">üì±</div>
          <h1>–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É</h1>
          <p>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.</p>
          <button class="retry-btn" onclick="window.location.reload()">
            –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
          </button>
        </div>
      </body>
    </html>
  `, {
    headers: { 'Content-Type': 'text/html' }
  });
}

// –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å Safari-–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π
function createNotificationOptions(title, options = {}) {
  const safariIcon = settings.isSafari ? '/icons/icon-256-safari.png' : '/icons/icon192.png';
  const safariBadge = settings.isSafari ? '/icons/badge-72.png' : '/icons/icon192.png';
  
  if (settings.useSimpleNotifications) {
    // –î–ª—è Safari: —Ç–æ–ª—å–∫–æ –±–∞–∑–æ–≤—ã–µ –æ–ø—Ü–∏–∏ —Å Safari-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–º–∏ –∏–∫–æ–Ω–∫–∞–º–∏
    return {
      body: options.body || '–ù–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ',
      icon: options.icon || safariIcon,
      badge: options.badge || safariBadge,
      tag: options.tag || 'default',
      requireInteraction: false,
      silent: false,
    };
  }
  
  // –î–ª—è –¥—Ä—É–≥–∏—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤: –ø–æ–ª–Ω—ã–µ –æ–ø—Ü–∏–∏
  return {
    body: options.body || '–ù–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ',
    icon: options.icon || safariIcon,
    badge: options.badge || safariBadge,
    tag: options.tag || 'default',
    requireInteraction: options.requireInteraction || false,
    silent: options.silent || false,
    data: options.data || {},
    actions: options.actions || [],
    ...options,
  };
}

// Push event handler
self.addEventListener('push', (event) => {
  console.log('ü¶Å SW Custom: Push event received');
  
  let data = {};
  try {
    data = event.data ? event.data.json() : {};
  } catch (error) {
    console.warn('‚ö†Ô∏è SW Custom: –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å push –¥–∞–Ω–Ω—ã–µ:', error);
    data = { title: 'Gafus', body: '–ù–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ' };
  }
  
  const title = data.title || 'Gafus';
  const options = createNotificationOptions(title, {
    body: data.body || '–ù–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ',
    icon: data.icon,
    badge: data.badge,
    tag: data.tag || 'default',
    requireInteraction: data.requireInteraction || false,
    data: data,
    actions: data.actions || [],
  });
  
  console.log('ü¶Å SW Custom: Showing notification:', title);
  
  event.waitUntil(
    self.registration.showNotification(title, options)
      .then(() => {
        console.log('‚úÖ SW Custom: Notification shown successfully');
      })
      .catch(error => {
        console.error('‚ùå SW Custom: Error showing notification:', error);
      })
  );
});

// Notification click event handler
self.addEventListener('notificationclick', (event) => {
  console.log('ü¶Å SW Custom: Notification click event');
  
  event.notification.close();
  
  event.waitUntil(
    self.clients.matchAll({ type: 'window', includeUncontrolled: true })
      .then((clients) => {
        // –ò—â–µ–º —É–∂–µ –æ—Ç–∫—Ä—ã—Ç–æ–µ –æ–∫–Ω–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        for (const client of clients) {
          if (client.url.includes('gafus.ru') && 'focus' in client) {
            console.log('‚úÖ SW Custom: Focusing existing window');
            return client.focus();
          }
        }
        
        // –ï—Å–ª–∏ –Ω–µ—Ç –æ—Ç–∫—Ä—ã—Ç–æ–≥–æ –æ–∫–Ω–∞, –æ—Ç–∫—Ä—ã–≤–∞–µ–º –Ω–æ–≤–æ–µ
        if (clients.openWindow) {
          console.log('‚úÖ SW Custom: Opening new window');
          return clients.openWindow('/');
        }
      })
      .catch(error => {
        console.error('‚ùå SW Custom: Error handling notification click:', error);
      })
  );
});

// Message event handler –¥–ª—è –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏ —Å –∫–ª–∏–µ–Ω—Ç–æ–º
self.addEventListener('message', (event) => {
  console.log('ü¶Å SW Custom: Message event', event.data);
  
  if (event.data && event.data.type === 'SKIP_WAITING') {
    console.log('ü¶Å SW Custom: Skip waiting requested');
    self.skipWaiting();
  }
  
  if (event.data && event.data.type === 'GET_VERSION') {
    event.ports[0].postMessage({
      type: 'VERSION_INFO',
      version: 'push-and-cache',
      safari: settings.isSafari,
      ios: settings.isIOS,
    });
  }
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç offlineStore
  if (event.data && event.data.type === 'OFFLINE_STATUS') {
    handleOfflineStatusChange(event.data.isOnline);
  }
  
  if (event.data && event.data.type === 'SYNC_QUEUE') {
    handleSyncQueue(event.data.actions);
  }
  
  if (event.data && event.data.type === 'CACHE_STATUS') {
    handleCacheStatusRequest(event);
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ—Ñ–ª–∞–π–Ω —Å—Ç–∞—Ç—É—Å–∞
async function handleOfflineStatusChange(isOnline) {
  console.log(`üåê SW: Offline status changed: ${isOnline ? 'online' : 'offline'}`);
  
  // –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ –∫–ª–∏–µ–Ω—Ç—ã –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞
  const clients = await self.clients.matchAll();
  clients.forEach(client => {
    client.postMessage({
      type: 'NETWORK_STATUS_CHANGED',
      isOnline,
      timestamp: Date.now(),
    });
  });
  
  // –ï—Å–ª–∏ —Å—Ç–∞–ª–∏ –æ–Ω–ª–∞–π–Ω, –ø—ã—Ç–∞–µ–º—Å—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫—ç—à
  if (isOnline) {
    await syncCachedData();
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—á–µ—Ä–µ–¥–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
async function handleSyncQueue(actions) {
  console.log(`üîÑ SW: Processing sync queue with ${actions.length} actions`);
  
  for (const action of actions) {
    try {
      await processOfflineAction(action);
    } catch (error) {
      console.warn(`‚ö†Ô∏è SW: Failed to process action ${action.id}:`, error);
    }
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Å—Ç–∞—Ç—É—Å–∞ –∫—ç—à–∞
async function handleCacheStatusRequest(event) {
  try {
    const cacheNames = [
      CACHE_CONFIG.STATIC_CACHE,
      CACHE_CONFIG.PAGES_CACHE,
      CACHE_CONFIG.API_CACHE,
      CACHE_CONFIG.IMAGES_CACHE,
    ];
    
    const cacheStatus = {};
    
    for (const cacheName of cacheNames) {
      const cache = await caches.open(cacheName);
      const keys = await cache.keys();
      cacheStatus[cacheName] = {
        entries: keys.length,
        size: await estimateCacheSize(cache),
      };
    }
    
    event.ports[0].postMessage({
      type: 'CACHE_STATUS_RESPONSE',
      status: cacheStatus,
    });
  } catch (error) {
    console.warn('‚ö†Ô∏è SW: Failed to get cache status:', error);
    event.ports[0].postMessage({
      type: 'CACHE_STATUS_RESPONSE',
      error: error.message,
    });
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ñ–ª–∞–π–Ω –¥–µ–π—Å—Ç–≤–∏—è
async function processOfflineAction(action) {
  console.log(`üîÑ SW: Processing offline action: ${action.type}`);
  
  // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
  // –ù–∞–ø—Ä–∏–º–µ—Ä, –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
  
  // –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–µ
  const clients = await self.clients.matchAll();
  clients.forEach(client => {
    client.postMessage({
      type: 'OFFLINE_ACTION_PROCESSED',
      actionId: action.id,
      success: true,
    });
  });
}

// –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–µ—Ç–∏
async function syncCachedData() {
  console.log('üîÑ SW: Syncing cached data after network restoration');
  
  try {
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    // –ù–∞–ø—Ä–∏–º–µ—Ä, –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫ –∏–ª–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
    
    const clients = await self.clients.matchAll();
    clients.forEach(client => {
      client.postMessage({
        type: 'NETWORK_RESTORED',
        timestamp: Date.now(),
      });
    });
  } catch (error) {
    console.warn('‚ö†Ô∏è SW: Failed to sync cached data:', error);
  }
}

// –û—Ü–µ–Ω–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ –∫—ç—à–∞
async function estimateCacheSize(cache) {
  try {
    const keys = await cache.keys();
    let totalSize = 0;
    
    for (const key of keys) {
      const response = await cache.match(key);
      if (response && response.body) {
        const reader = response.body.getReader();
        let size = 0;
        
        while (true) {
          const { done, value } = await reader.read();
          if (done) break;
          size += value.length;
        }
        
        totalSize += size;
      }
    }
    
    return totalSize;
  } catch {
    return 0;
  }
}

console.log('‚úÖ SW: Gafus Service Worker loaded successfully - Push Notifications & Offline Caching enabled');