#!/usr/bin/env node

const { execSync } = require("child_process");
const fs = require("fs");
const path = require("path");

console.log("üîç –ê–Ω–∞–ª–∏–∑ —Ä–∞–∑–º–µ—Ä–∞ –±–∞–Ω–¥–ª–∞...");

try {
  // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–±–æ—Ä–∫—É —Å –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–æ–º
  console.log("üì¶ –°–±–æ—Ä–∫–∞ —Å Bundle Analyzer...");
  execSync("ANALYZE=true npm run build", {
    stdio: "inherit",
    env: { ...process.env, ANALYZE: "true" },
  });

  console.log("\n‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!");
  console.log("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ .next/analyze/");

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
  const analyzeDir = path.join(".next", "analyze");
  if (fs.existsSync(analyzeDir)) {
    const files = fs.readdirSync(analyzeDir);
    console.log("\nüìà –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ–∞–π–ª—ã:");

    let totalSize = 0;
    files.forEach((file) => {
      const stats = fs.statSync(path.join(analyzeDir, file));
      const sizeKB = (stats.size / 1024).toFixed(2);
      totalSize += stats.size;
      console.log(`  ${file}: ${sizeKB} KB`);
    });

    console.log(`\nüìä –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä: ${(totalSize / 1024).toFixed(2)} KB`);

    // –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    console.log("\nüîç –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã:");
    console.log("  - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–∑–º–µ—Ä MUI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤");
    console.log("  - –£–±–µ–¥–∏—Ç–µ—Å—å –≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ tree shaking");
    console.log("  - –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ lazy loading –¥–ª—è —Ç—è–∂–µ–ª—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤");
  }
} catch (error) {
  console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ:", error.message);
} finally {
  // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
  if (fs.existsSync("next.config.analyze.js")) {
    fs.unlinkSync("next.config.analyze.js");
  }
}
