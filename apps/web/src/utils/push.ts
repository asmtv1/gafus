"use server";

import { prisma } from "@gafus/prisma";
import webpush from "@gafus/webpush";
import { revalidatePath } from "next/cache";

import { savePushSubscription } from "../shared/lib/savePushSubscription/savePushSubscription";
import { getCurrentUserId } from "./getCurrentUserId";

import type { PushSubscriptionJSON } from "@gafus/types";
/**
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É–±–ª–∏—á–Ω—ã–π VAPID-–∫–ª—é—á –¥–ª—è Push API.
 */
export async function getVapidPublicKey(): Promise<string> {
  if (!process.env.VAPID_PUBLIC_KEY) {
    throw new Error("VAPID_PUBLIC_KEY is not set in env");
  }
  // –ß–∏—Ç–∞–µ–º –∫–ª—é—á –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
  return process.env.VAPID_PUBLIC_KEY!;
}

/**
 * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç PushSubscription –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î.
 * 1) –ü–æ–ª—É—á–∞–µ—Ç userId —á–µ—Ä–µ–∑ getCurrentUserId().
 * 2) –í—ã–∑—ã–≤–∞–µ—Ç savePushSubscription() —Å userId –∏ subscription.
 */
export async function saveSubscription(subscription: PushSubscriptionJSON): Promise<void> {
  await savePushSubscription(subscription);
}

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—É—à-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
 * –ï—Å–ª–∏ userId –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω, –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –∏–∑ —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏.
 * @param payload - –î–∞–Ω–Ω—ã–µ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (—Å—Ç—Ä–æ–∫–∞ –∏–ª–∏ JSON).
 * @param userIdOverride - –ù–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π userId –¥–ª—è —è–≤–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
 */
export async function sendPushToUser(
  payload: string | Record<string, unknown>,
  userIdOverride?: string,
): Promise<void> {
  // –ï—Å–ª–∏ payload ‚Äî –ø—Ä–æ—Å—Ç–æ —Å—Ç—Ä–æ–∫–∞, —É–ø–∞–∫–æ–≤—ã–≤–∞–µ–º –≤ { body: string }
  const data = typeof payload === "string" ? { body: payload } : payload;

  const payloadString = JSON.stringify(data);

  try {
    const userId = userIdOverride ?? (await getCurrentUserId());

    // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
    const subscriptions = await prisma.pushSubscription.findMany({
      where: { userId },
      select: { endpoint: true, keys: true },
    });

    if (subscriptions.length === 0) {
      return;
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º push —á–µ—Ä–µ–∑ –∫–∞–∂–¥—É—é –ø–æ–¥–ø–∏—Å–∫—É
    const results = await Promise.allSettled(
      subscriptions.map(async (sub) => {
        try {
          await webpush.sendNotification(
            {
              endpoint: sub.endpoint,
              keys: sub.keys as { p256dh: string; auth: string },
            },
            payloadString,
          );
          return { success: true, endpoint: sub.endpoint };
        } catch (error: unknown) {
          console.error("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ push –Ω–∞", sub.endpoint, ":", error);
          // –ê–≤—Ç–æ-–æ—á–∏—Å—Ç–∫–∞ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫ (404/410)
          if (typeof error === "object" && error !== null && "statusCode" in error) {
            const statusCode = (error as { statusCode?: number }).statusCode;
            if (statusCode === 404 || statusCode === 410) {
              try {
                await prisma.pushSubscription.delete({ where: { endpoint: sub.endpoint } });
                console.warn("üßπ –£–¥–∞–ª–µ–Ω–∞ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞:", sub.endpoint);
              } catch (dbErr) {
                console.error("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –∏–∑ –ë–î:", dbErr);
              }
            }
          }
          return { success: false, endpoint: sub.endpoint, error };
        }
      }),
    );

    const _successful = results.filter((r: { status: string; value: { success: boolean } }) => r.status === "fulfilled" && r.value.success).length;
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ push:", error);
  }

  // –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
  revalidatePath("/");
}

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—É—à-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –í–°–ï–ú –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Å–∏—Å—Ç–µ–º—ã.
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –º–∞—Å—Å–æ–≤—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–Ω–æ–≤–æ—Å—Ç–∏, –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è, —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è).
 * @param payload - –î–∞–Ω–Ω—ã–µ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (—Å—Ç—Ä–æ–∫–∞ –∏–ª–∏ JSON).
 */
export async function sendPushToAll(payload: string | Record<string, unknown>): Promise<void> {
  const data = typeof payload === "string" ? { body: payload } : payload;
  const payloadString = JSON.stringify(data);

  try {
    // –ü–æ–ª—É—á–∞–µ–º –í–°–ï –ø–æ–¥–ø–∏—Å–∫–∏ –∏–∑ –ë–î
    const allSubscriptions = await prisma.pushSubscription.findMany({
      select: { endpoint: true, keys: true, userId: true },
    });

    if (allSubscriptions.length === 0) {
      return;
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º push —á–µ—Ä–µ–∑ –∫–∞–∂–¥—É—é –ø–æ–¥–ø–∏—Å–∫—É
    const results = await Promise.allSettled(
      allSubscriptions.map(async (sub) => {
        try {
          await webpush.sendNotification(
            {
              endpoint: sub.endpoint,
              keys: sub.keys as { p256dh: string; auth: string },
            },
            payloadString,
          );
          return { success: true, endpoint: sub.endpoint, userId: sub.userId };
        } catch (error) {
          console.error("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ push –Ω–∞", sub.endpoint, ":", error);
          return { success: false, endpoint: sub.endpoint, userId: sub.userId, error };
        }
      }),
    );

    const _successful = results.filter((r: { status: string; value: { success: boolean } }) => r.status === "fulfilled" && r.value.success).length;
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ push –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:", error);
  }

  // –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
  revalidatePath("/");
}
