/**
 * –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è offline –º–µ—Ö–∞–Ω–∏–∑–º–∞
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤ development —Ä–µ–∂–∏–º–µ
 */

import { useOfflineStore } from "@shared/stores/offlineStore";

export class OfflineTester {
  private static instance: OfflineTester;
  
  static getInstance(): OfflineTester {
    if (!OfflineTester.instance) {
      OfflineTester.instance = new OfflineTester();
    }
    return OfflineTester.instance;
  }

  /**
   * –°–∏–º—É–ª–∏—Ä—É–µ—Ç –ø–æ—Ç–µ—Ä—é —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
   */
  simulateOffline(): void {
    if (process.env.NODE_ENV !== "development") {
      console.warn("OfflineTester: Available only in development mode");
      return;
    }

    console.warn("üß™ OfflineTester: Simulating offline state");
    useOfflineStore.getState().setOnlineStatus(false);
  }

  /**
   * –°–∏–º—É–ª–∏—Ä—É–µ—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
   */
  simulateOnline(): void {
    if (process.env.NODE_ENV !== "development") {
      console.warn("OfflineTester: Available only in development mode");
      return;
    }

    console.warn("üß™ OfflineTester: Simulating online state");
    useOfflineStore.getState().setOnlineStatus(true);
  }

  /**
   * –°–∏–º—É–ª–∏—Ä—É–µ—Ç –º–µ–¥–ª–µ–Ω–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
   */
  simulateSlowConnection(): void {
    if (process.env.NODE_ENV !== "development") {
      console.warn("OfflineTester: Available only in development mode");
      return;
    }

    console.warn("üß™ OfflineTester: Simulating slow connection");
    useOfflineStore.getState().setConnectionQuality('poor');
  }

  /**
   * –°–∏–º—É–ª–∏—Ä—É–µ—Ç –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
   */
  simulateUnstableConnection(): void {
    if (process.env.NODE_ENV !== "development") {
      console.warn("OfflineTester: Available only in development mode");
      return;
    }

    console.warn("üß™ OfflineTester: Simulating unstable connection");
    useOfflineStore.getState().setNetworkStability(false);
  }

  /**
   * –î–æ–±–∞–≤–ª—è–µ—Ç —Ç–µ—Å—Ç–æ–≤–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –æ—á–µ—Ä–µ–¥—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
   */
  addTestAction(): void {
    if (process.env.NODE_ENV !== "development") {
      console.warn("OfflineTester: Available only in development mode");
      return;
    }

    console.warn("üß™ OfflineTester: Adding test action to sync queue");
    useOfflineStore.getState().addToSyncQueue({
      type: "step-completion",
      data: {
        stepId: "test-step-" + Date.now(),
        courseId: "test-course",
        userId: "test-user",
        completedAt: new Date(),
      },
      maxRetries: 3,
    });
  }

  /**
   * –û—á–∏—â–∞–µ—Ç –æ—á–µ—Ä–µ–¥—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
   */
  clearSyncQueue(): void {
    if (process.env.NODE_ENV !== "development") {
      console.warn("OfflineTester: Available only in development mode");
      return;
    }

    console.warn("üß™ OfflineTester: Clearing sync queue");
    useOfflineStore.getState().clearSyncQueue();
  }

  /**
   * –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
   */
  async forceConnectionCheck(): Promise<void> {
    if (process.env.NODE_ENV !== "development") {
      console.warn("OfflineTester: Available only in development mode");
      return;
    }

    console.warn("üß™ OfflineTester: Forcing connection check");
    await useOfflineStore.getState().checkExternalConnection();
  }

  /**
   * –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
   */
  async forceQualityCheck(): Promise<void> {
    if (process.env.NODE_ENV !== "development") {
      console.warn("OfflineTester: Available only in development mode");
      return;
    }

    console.warn("üß™ OfflineTester: Forcing quality check");
    await useOfflineStore.getState().checkConnectionQuality();
  }

  /**
   * –í—ã–≤–æ–¥–∏—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ –∫–æ–Ω—Å–æ–ª—å
   */
  logCurrentState(): void {
    if (process.env.NODE_ENV !== "development") {
      console.warn("OfflineTester: Available only in development mode");
      return;
    }

    const state = useOfflineStore.getState();
    console.warn("üß™ OfflineTester: Current state:", {
      isOnline: state.isOnline,
      isActuallyConnected: state.isActuallyConnected,
      isStable: state.isStable,
      connectionQuality: state.connectionQuality,
      networkMetrics: state.networkMetrics,
      syncQueueLength: state.syncQueue.length,
      lastSyncAttempt: state.lastSyncAttempt,
    });
  }

  /**
   * –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–ª–Ω—ã–π —Ç–µ—Å—Ç offline –º–µ—Ö–∞–Ω–∏–∑–º–∞
   */
  async runFullTest(): Promise<void> {
    if (process.env.NODE_ENV !== "development") {
      console.warn("OfflineTester: Available only in development mode");
      return;
    }

    console.warn("üß™ OfflineTester: Starting full test...");
    
    // 1. –ò—Å—Ö–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    console.warn("üß™ Step 1: Initial state");
    this.logCurrentState();
    
    // 2. –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ
    console.warn("üß™ Step 2: Adding test action");
    this.addTestAction();
    
    // 3. –°–∏–º—É–ª–∏—Ä—É–µ–º –æ—Ñ–ª–∞–π–Ω
    console.warn("üß™ Step 3: Simulating offline");
    this.simulateOffline();
    await new Promise(resolve => setTimeout(resolve, 1000));
    
    // 4. –°–∏–º—É–ª–∏—Ä—É–µ–º –æ–Ω–ª–∞–π–Ω
    console.warn("üß™ Step 4: Simulating online");
    this.simulateOnline();
    await new Promise(resolve => setTimeout(resolve, 2000));
    
    // 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    console.warn("üß™ Step 5: Checking connection quality");
    await this.forceQualityCheck();
    
    // 6. –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    console.warn("üß™ Step 6: Final state");
    this.logCurrentState();
    
    console.warn("üß™ OfflineTester: Full test completed!");
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –∫–æ–Ω—Å–æ–ª–∏ –±—Ä–∞—É–∑–µ—Ä–∞
if (typeof window !== "undefined" && process.env.NODE_ENV === "development") {
  (window as unknown as Record<string, unknown>).offlineTester = OfflineTester.getInstance();
  console.warn("üß™ OfflineTester: Available as window.offlineTester");
  console.warn("üß™ Available methods: simulateOffline(), simulateOnline(), addTestAction(), runFullTest(), logCurrentState()");
}
