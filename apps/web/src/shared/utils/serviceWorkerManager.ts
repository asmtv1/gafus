// –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä Service Worker –¥–ª—è –≤—Å–µ—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤
// –ö–∞—Ä–¥–∏–Ω–∞–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º —Å PWA –∏ Safari

import { createWebLogger } from "@gafus/logger";

// –°–æ–∑–¥–∞–µ–º –ª–æ–≥–≥–µ—Ä –¥–ª—è service worker
const logger = createWebLogger('web-service-worker');

interface ServiceWorkerManager {
  isSupported(): boolean;
  register(): Promise<ServiceWorkerRegistration>;
  getRegistration(): Promise<ServiceWorkerRegistration | null>;
  isReady(): Promise<boolean>;
}

class UniversalServiceWorkerManager implements ServiceWorkerManager {
  private registration: ServiceWorkerRegistration | null = null;
  private isRegistering = false;
  private registrationPromise: Promise<ServiceWorkerRegistration> | null = null;

  isSupported(): boolean {
    return 'serviceWorker' in navigator && 'PushManager' in window;
  }

  async register(): Promise<ServiceWorkerRegistration> {
    if (!this.isSupported()) {
      throw new Error('Service Worker not supported');
    }

    // –ï—Å–ª–∏ —É–∂–µ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ—Ç –∂–µ –ø—Ä–æ–º–∏—Å
    if (this.registrationPromise) {
      return this.registrationPromise;
    }

    // –ï—Å–ª–∏ —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π
    if (this.registration) {
      return this.registration;
    }

    logger.info('üöÄ SW Manager: Starting service worker registration', {
      operation: 'start_service_worker_registration',
      supported: this.isSupported()
    });

    this.registrationPromise = this.performRegistration();
    
    try {
      this.registration = await this.registrationPromise;
      return this.registration;
    } catch (error) {
      this.registrationPromise = null;
      throw error;
    }
  }

  private async performRegistration(): Promise<ServiceWorkerRegistration> {
    logger.info('üîß SW Manager: Registering service worker', {
      operation: 'perform_service_worker_registration'
    });

    try {
      // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–µ—Ä–µ–¥ –Ω–æ–≤–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–µ–π
      await this.cleanupOldRegistrations();

      // –ú–≥–Ω–æ–≤–µ–Ω–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –±–µ–∑ —Ç–∞–π–º–∞—É—Ç–æ–≤
      const registration = await navigator.serviceWorker.register('/sw.js', {
        scope: '/',
        type: 'classic',
        updateViaCache: 'none'
      });

      logger.success('‚úÖ SW Manager: SW registered successfully', {
        operation: 'service_worker_registered',
        scope: registration.scope
      });
      return registration;

    } catch (error) {
      logger.error('‚ùå SW Manager: Registration failed', error as Error, {
        operation: 'service_worker_registration_failed'
      });
      throw new Error('Service Worker registration failed');
    }
  }

  private async cleanupOldRegistrations(): Promise<void> {
    try {
      const registrations = await navigator.serviceWorker.getRegistrations();
      const currentScope = new URL('/', location.href).href;
      
      // –£–¥–∞–ª—è–µ–º –≤—Å–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏, –∫—Ä–æ–º–µ —Ç–µ–∫—É—â–µ–π
      const cleanupPromises = registrations
        .filter(reg => reg.scope !== currentScope)
        .map(reg => reg.unregister());
      
      if (cleanupPromises.length > 0) {
        await Promise.all(cleanupPromises);
        logger.info(`üßπ SW Manager: Cleaned up ${cleanupPromises.length} old registrations`, {
          operation: 'cleanup_old_registrations',
          cleanedCount: cleanupPromises.length
        });
      }
    } catch (error) {
      logger.warn('‚ö†Ô∏è SW Manager: Failed to cleanup old registrations', {
        operation: 'cleanup_old_registrations_failed',
        error: error instanceof Error ? error.message : String(error)
      });
    }
  }







  async getRegistration(): Promise<ServiceWorkerRegistration | null> {
    if (this.registration) {
      return this.registration;
    }

    try {
      return await this.register();
    } catch {
      logger.error('SW Manager: Failed to get registration', new Error('Registration failed'), {
        operation: 'get_registration_failed'
      });
      return null;
    }
  }

  async isReady(): Promise<boolean> {
    try {
      const registration = await this.getRegistration();
      return !!(registration?.active && navigator.serviceWorker.controller);
    } catch {
      return false;
    }
  }

  private detectSafari(): boolean {
    const isIOS = /iPad|iPhone|iPod/.test(navigator.userAgent);
    const isWebKit = /webkit/i.test(navigator.userAgent);
    const isChrome = /chrome/i.test(navigator.userAgent);
    return isWebKit && (/safari/i.test(navigator.userAgent) && !isChrome || isIOS);
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–∏–Ω–≥–ª—Ç–æ–Ω
export const serviceWorkerManager = new UniversalServiceWorkerManager();
export default serviceWorkerManager;
