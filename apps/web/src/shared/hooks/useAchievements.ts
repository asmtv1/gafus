"use client";

import { useData, useMutate } from "@gafus/swr";
import { getUserWithTrainings } from "@shared/lib/user/getUserWithTrainings";
import { createAchievementData } from "@shared/lib/achievements/calculateAchievements";

import type { AchievementData } from "@gafus/types";

/**
 * –•—É–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π —Å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
 * 
 * –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:
 * - –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ 5 –º–∏–Ω—É—Ç (–¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ä–µ–¥–∫–æ –∏–∑–º–µ–Ω—è—é—Ç—Å—è)
 * - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∫—É—Ä—Å–æ–≤
 * - –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
 * - –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
 */
export function useAchievements() {
  return useData<AchievementData>(
    "user:achievements",
    async () => {
      try {
        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const user = await getUserWithTrainings();
        
        if (!user) {
          throw new Error("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω");
        }
        
        // –í—ã—á–∏—Å–ª—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
        const achievementData = await createAchievementData(user);
        
        return achievementData;
      } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π:", error);
        throw error;
      }
    },
    {
      // –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ
      revalidateOnFocus: false, // –ù–µ –æ–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–∏ —Ñ–æ–∫—É—Å–µ (–¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—á–Ω—ã)
      revalidateOnReconnect: true, // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
      dedupingInterval: 300000, // 5 –º–∏–Ω—É—Ç - –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ä–µ–¥–∫–æ –∏–∑–º–µ–Ω—è—é—Ç—Å—è
      
      // –ü–æ–≤—Ç–æ—Ä–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏
      errorRetryCount: 3,
      errorRetryInterval: 5000,
      
      // –ö—ç—à
      keepPreviousData: true, // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –≤–æ –≤—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
      
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
      onError: (error: Error) => {
        console.error("SWR Error (Achievements):", error);
      },
      
      // –£—Å–ø–µ—à–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞
      onSuccess: (data: AchievementData) => {
        if (process.env.NODE_ENV === "development") {
          console.warn(`üèÜ Achievements loaded: ${data.achievements.length} achievements, ${data.completedCourses} completed courses`);
        }
      },
    }
  );
}

/**
 * –•—É–∫ –¥–ª—è –º—É—Ç–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
 */
export function useAchievementsMutation() {
  const { mutate } = useMutate();
  
  /**
   * –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ—Ç –∫—ç—à –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
   */
  const invalidateAchievements = () => {
    mutate("user:achievements", undefined);
  };
  
  /**
   * –û–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
   */
  const updateAchievements = async (newData?: AchievementData) => {
    if (newData) {
      // –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à –Ω–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
      mutate("user:achievements", newData, { revalidate: false });
    } else {
      // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
      mutate("user:achievements", undefined, { revalidate: true });
    }
  };
  
  /**
   * –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ—Ç –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
   */
  const invalidateAllUserData = () => {
    mutate("user:achievements", undefined);
    mutate("user:profile", undefined);
    mutate("user:with-trainings", undefined);
    mutate("courses:all", undefined);
  };
  
  return {
    invalidateAchievements,
    updateAchievements,
    invalidateAllUserData,
  };
}

/**
 * –•—É–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
 */
export function useAchievementsByCategory() {
  const { data, error, isLoading } = useAchievements();
  
  const achievementsByCategory = data?.achievements.reduce((acc, achievement) => {
    if (!acc[achievement.category]) {
      acc[achievement.category] = [];
    }
    acc[achievement.category].push(achievement);
    return acc;
  }, {} as Record<string, typeof data.achievements>) || {};
  
  const unlockedCount = data?.achievements.filter(a => a.unlocked).length || 0;
  const totalCount = data?.achievements.length || 0;
  const completionPercentage = totalCount > 0 ? Math.round((unlockedCount / totalCount) * 100) : 0;
  
  return {
    achievementsByCategory,
    unlockedCount,
    totalCount,
    completionPercentage,
    data,
    error,
    isLoading,
  };
}

/**
 * –•—É–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
 */
export function useAchievementsStats() {
  const { data, error, isLoading } = useAchievements();
  
  if (!data) {
    return {
      stats: null,
      error,
      isLoading,
    };
  }
  
  const stats = {
    // –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    totalCourses: data.totalCourses,
    completedCourses: data.completedCourses,
    inProgressCourses: data.inProgressCourses,
    overallProgress: data.overallProgress,
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
    totalAchievements: data.achievements.length,
    unlockedAchievements: data.achievements.filter(a => a.unlocked).length,
    completionPercentage: Math.round((data.achievements.filter(a => a.unlocked).length / data.achievements.length) * 100),
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    totalTrainingTime: data.totalTrainingTime,
    averageCourseProgress: data.averageCourseProgress,
    longestStreak: data.longestStreak,
    currentStreak: data.currentStreak,
    
    // –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
    lastUpdated: data.lastUpdated,
    version: data.version,
  };
  
  return {
    stats,
    error,
    isLoading,
  };
}
