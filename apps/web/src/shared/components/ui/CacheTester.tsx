"use client";

import { useState } from "react";
import { useSyncStatus } from "@shared/hooks/useSyncStatus";

interface CacheTestResult {
  type: string;
  url: string;
  cached: boolean;
  size?: number;
  timestamp?: Date;
  error?: string;
}

export function CacheTester() {
  const [results, setResults] = useState<CacheTestResult[]>([]);
  const [isTesting, setIsTesting] = useState(false);
  const [offlineMode, setOfflineMode] = useState(false);
  const { isSyncing, pendingChanges } = useSyncStatus();

  // –¢–µ—Å—Ç–æ–≤—ã–µ URL –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
  const testUrls = [
    // HTML —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    { type: "HTML_PAGES", url: "/trainings/beginner" },
    { type: "HTML_PAGES", url: "/trainings/intermediate" },
    { type: "HTML_PAGES", url: "/trainings/advanced" },
    
    // RSC –¥–∞–Ω–Ω—ã–µ
    { type: "RSC_DATA", url: "/api/courses/all" },
    { type: "RSC_DATA", url: "/api/favorites" },
    
    // –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ—Å—É—Ä—Å—ã
    { type: "STATIC", url: "/_next/static/chunks/webpack-1288dfd2083207e8.js" },
    { type: "STATIC", url: "/_next/static/css/app/layout.css" },
    
    // –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    { type: "IMAGES", url: "/images/logo.png" },
    { type: "IMAGES", url: "/images/hero-bg.webp" },
    
    // –î–∞–Ω–Ω—ã–µ –∫—É—Ä—Å–æ–≤
    { type: "COURSE_DATA", url: "/api/courses/beginner" },
    { type: "COURSE_DATA", url: "/api/training/progress" },
  ];

  const checkCache = async (type: string, url: string): Promise<CacheTestResult> => {
    try {
      const cacheNames = await caches.keys();
      const cacheName = getCacheName(type);
      
      if (!cacheNames.includes(cacheName)) {
        return {
          type,
          url,
          cached: false,
          error: `–ö—ç—à ${cacheName} –Ω–µ –Ω–∞–π–¥–µ–Ω`
        };
      }

      const cache = await caches.open(cacheName);
      const response = await cache.match(url);
      
      if (!response) {
        return {
          type,
          url,
          cached: false,
          error: "–†–µ—Å—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫—ç—à–µ"
        };
      }

      const headers = response.headers;
      const contentLength = headers.get('content-length');
      const lastModified = headers.get('last-modified');
      
      return {
        type,
        url,
        cached: true,
        size: contentLength ? parseInt(contentLength) : undefined,
        timestamp: lastModified ? new Date(lastModified) : new Date(),
      };
    } catch (error) {
      return {
        type,
        url,
        cached: false,
        error: error instanceof Error ? error.message : "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"
      };
    }
  };

  const getCacheName = (type: string): string => {
    const cacheMap: Record<string, string> = {
      'HTML_PAGES': 'gafus-html-v2',
      'RSC_DATA': 'gafus-rsc-v2',
      'STATIC': 'gafus-static-v2',
      'IMAGES': 'gafus-images-v2',
      'COURSE_DATA': 'gafus-course-v2',
    };
    return cacheMap[type] || 'unknown';
  };

  const runCacheTest = async () => {
    setIsTesting(true);
    setResults([]);
    
    console.log("üß™ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è...");
    
    for (const test of testUrls) {
      const result = await checkCache(test.type, test.url);
      setResults(prev => [...prev, result]);
      
      // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
      await new Promise(resolve => setTimeout(resolve, 100));
    }
    
    setIsTesting(false);
    console.log("‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ");
  };

  const testOfflineMode = async () => {
    console.log("üåê –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º...");
    
    // –°–∏–º—É–ª–∏—Ä—É–µ–º –æ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º
    setOfflineMode(true);
    
    // –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É
    try {
      const response = await fetch('/trainings/beginner', {
        method: 'GET',
        cache: 'only-if-cached'
      });
      
      if (response.ok) {
        console.log("‚úÖ –û—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç–∞–µ—Ç - —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ –∫—ç—à–∞");
      } else {
        console.log("‚ùå –û—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç - —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –∫—ç—à–µ");
      }
    } catch (error) {
      console.log("‚ùå –û—à–∏–±–∫–∞ –≤ –æ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º–µ:", error);
    }
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–Ω–ª–∞–π–Ω —Ä–µ–∂–∏–º
    setTimeout(() => setOfflineMode(false), 2000);
  };

  const clearAllCaches = async () => {
    console.log("üóëÔ∏è –û—á–∏—â–∞–µ–º –≤—Å–µ –∫—ç—à–∏...");
    
    try {
      const cacheNames = await caches.keys();
      await Promise.all(cacheNames.map(name => caches.delete(name)));
      
      console.log("‚úÖ –í—Å–µ –∫—ç—à–∏ –æ—á–∏—â–µ–Ω—ã");
      setResults([]);
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫—ç—à–µ–π:", error);
    }
  };

  const getStatusColor = (result: CacheTestResult) => {
    if (result.cached) return "text-green-600";
    if (result.error) return "text-red-600";
    return "text-yellow-600";
  };

  const getStatusIcon = (result: CacheTestResult) => {
    if (result.cached) return "‚úÖ";
    if (result.error) return "‚ùå";
    return "‚è≥";
  };

  const formatSize = (bytes?: number) => {
    if (!bytes) return "N/A";
    if (bytes < 1024) return `${bytes} B`;
    if (bytes < 1024 * 1024) return `${(bytes / 1024).toFixed(1)} KB`;
    return `${(bytes / (1024 * 1024)).toFixed(1)} MB`;
  };

  const groupedResults = results.reduce((acc, result) => {
    if (!acc[result.type]) {
      acc[result.type] = [];
    }
    acc[result.type].push(result);
    return acc;
  }, {} as Record<string, CacheTestResult[]>);

  return (
    <div className="p-6 bg-white rounded-lg shadow-lg max-w-4xl mx-auto">
      <h2 className="text-2xl font-bold mb-4">üß™ –¢–µ—Å—Ç–µ—Ä –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –æ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º–∞</h2>
      
      {/* –°—Ç–∞—Ç—É—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ */}
      <div className="mb-4 p-3 bg-blue-50 rounded-lg">
        <h3 className="font-semibold text-blue-800">–°—Ç–∞—Ç—É—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:</h3>
        <div className="flex items-center gap-4 mt-2">
          <span className={isSyncing ? "text-blue-600" : "text-gray-600"}>
            {isSyncing ? "üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è..." : "‚úÖ –ì–æ—Ç–æ–≤–æ"}
          </span>
          {pendingChanges > 0 && (
            <span className="text-yellow-600">
              ‚è≥ –û–∂–∏–¥–∞–µ—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {pendingChanges}
            </span>
          )}
        </div>
      </div>

      {/* –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è */}
      <div className="flex gap-4 mb-6">
        <button
          onClick={runCacheTest}
          disabled={isTesting}
          className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:opacity-50"
        >
          {isTesting ? "üîÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º..." : "üß™ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫—ç—à–∏"}
        </button>
        
        <button
          onClick={testOfflineMode}
          className="px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700"
        >
          üåê –¢–µ—Å—Ç –æ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º–∞
        </button>
        
        <button
          onClick={clearAllCaches}
          className="px-4 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700"
        >
          üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à–∏
        </button>
      </div>

      {/* –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è */}
      {results.length > 0 && (
        <div className="space-y-4">
          <h3 className="text-lg font-semibold">–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:</h3>
          
          {Object.entries(groupedResults).map(([type, typeResults]) => (
            <div key={type} className="border rounded-lg p-4">
              <h4 className="font-semibold text-lg mb-2">{type}</h4>
              <div className="space-y-2">
                {typeResults.map((result, index) => (
                  <div key={index} className="flex items-center justify-between p-2 bg-gray-50 rounded">
                    <div className="flex items-center gap-2">
                      <span className={getStatusColor(result)}>
                        {getStatusIcon(result)}
                      </span>
                      <span className="font-mono text-sm">{result.url}</span>
                    </div>
                    <div className="text-sm text-gray-600">
                      {result.cached ? (
                        <span>
                          {formatSize(result.size)} ‚Ä¢ {result.timestamp?.toLocaleTimeString()}
                        </span>
                      ) : (
                        <span className="text-red-600">{result.error}</span>
                      )}
                    </div>
                  </div>
                ))}
              </div>
            </div>
          ))}
        </div>
      )}

      {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ–∂–∏–º–µ */}
      {offlineMode && (
        <div className="mt-4 p-3 bg-yellow-50 border border-yellow-200 rounded-lg">
          <p className="text-yellow-800">
            üåê –û—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º –∞–∫—Ç–∏–≤–µ–Ω (—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ...)
          </p>
        </div>
      )}
    </div>
  );
}
