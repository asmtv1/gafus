"use server";

import { prisma } from "@gafus/prisma";
import { createWebLogger } from "@gafus/logger";
import { uploadFileToCDN, deleteFileFromCDN } from "@gafus/cdn-upload";
import { z } from "zod";

import { petIdSchema } from "../validation/petSchemas";

// –°–æ–∑–¥–∞–µ–º –ª–æ–≥–≥–µ—Ä –¥–ª—è updatePetAvatar
const logger = createWebLogger('web-update-pet-avatar');

const fileSchema = z.instanceof(File, { message: "–§–∞–π–ª –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω" });

export async function updatePetAvatar(file: File, petId: string): Promise<string> {
  const validFile = fileSchema.parse(file);
  const safePetId = petIdSchema.parse(petId);
  try {
    // 1. –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –∏ —Ñ–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞
    const ext = validFile.name.split(".").pop();
    if (!ext) throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞");

    const timestamp = Date.now();
    const fileName = `pet-${safePetId}-${timestamp}.${ext}`;
    const relativePath = `pets/${fileName}`;

    // 2. –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ä—ã–π photoUrl –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    const existingPet = await prisma.pet.findUnique({
      where: { id: safePetId },
      select: { photoUrl: true },
    });

    // 3. –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–æ–≤—ã–π —Ñ–∞–π–ª –≤ CDN
    const photoUrl = await uploadFileToCDN(validFile, relativePath);

    // 4. –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π —Ñ–∞–π–ª –∏–∑ CDN (–µ—Å–ª–∏ –µ—Å—Ç—å)
    if (existingPet?.photoUrl) {
      const oldRelativePath = existingPet.photoUrl.replace('/uploads/', '');
      try {
        await deleteFileFromCDN(oldRelativePath);
        logger.info(`üóëÔ∏è –°—Ç–∞—Ä–æ–µ —Ñ–æ—Ç–æ –ø–∏—Ç–æ–º—Ü–∞ —É–¥–∞–ª–µ–Ω–æ –∏–∑ CDN: ${oldRelativePath}`);
      } catch (error) {
        logger.warn(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä–æ–µ —Ñ–æ—Ç–æ –ø–∏—Ç–æ–º—Ü–∞: ${error}`);
      }
    }

    // 5. –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π photoUrl –≤ –±–∞–∑–µ
    await prisma.pet.update({
      where: { id: safePetId },
      data: { photoUrl },
    });

    logger.warn("Pet photo URL saved to database:", { photoUrl, operation: 'warn' });
    return photoUrl;
  } catch (error) {
    logger.error("–û—à–∏–±–∫–∞ –≤ updatePetAvatar:", error as Error, {
      operation: 'update_pet_avatar_error',
      petId: safePetId
    });
    throw error;
  }
}