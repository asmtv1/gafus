"use server";

import { deleteFileFromCDN } from "@gafus/cdn-upload";
import { prisma } from "@gafus/prisma";
import { revalidatePath } from "next/cache";
import { createWebLogger } from "@gafus/logger";

import { petIdSchema } from "../validation/petSchemas";

// –°–æ–∑–¥–∞–µ–º –ª–æ–≥–≥–µ—Ä –¥–ª—è deletePet
const logger = createWebLogger('web-delete-pet');

export async function deletePet(petId: string, pathToRevalidate = "/") {
  const safePetId = petIdSchema.parse(petId);
  try {
    const pet = await prisma.pet.findUnique({
      where: { id: safePetId },
      select: { photoUrl: true },
    });

    if (pet?.photoUrl) {
      const relativePath = pet.photoUrl.replace('https://gafus-media.storage.yandexcloud.net/uploads/', '');
      logger.info(`üîç –ù–∞–π–¥–µ–Ω–æ —Ñ–æ—Ç–æ –ø–∏—Ç–æ–º—Ü–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: ${pet.photoUrl} -> ${relativePath}`);
      try {
        await deleteFileFromCDN(relativePath);
        logger.info(`üóëÔ∏è –§–æ—Ç–æ –ø–∏—Ç–æ–º—Ü–∞ —É–¥–∞–ª–µ–Ω–æ –∏–∑ CDN: ${relativePath}`);
      } catch (error) {
        logger.error(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ñ–æ—Ç–æ –ø–∏—Ç–æ–º—Ü–∞ –∏–∑ CDN: ${error}`, error as Error);
      }
    } else {
      logger.info(`‚ÑπÔ∏è –§–æ—Ç–æ –ø–∏—Ç–æ–º—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ`);
    }

    await prisma.pet.delete({
      where: { id: safePetId },
    });

    revalidatePath(pathToRevalidate);
  } catch (error) {
    logger.error("–û—à–∏–±–∫–∞ –≤ deletePet:", error as Error, { operation: 'error' });
    throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø–∏—Ç–æ–º—Ü–µ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");
  }
}
