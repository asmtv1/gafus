// src/app/actions/login-utils.ts (–∏–ª–∏ –¥—Ä—É–≥–æ–µ –º–µ—Å—Ç–æ)
"use server";

import {
  checkUserConfirmed,
  getUserPhoneByUsername,
  sendTelegramPasswordResetRequest,
  resetPasswordByToken,
  registerUser,
} from "@gafus/auth";
import { reportErrorToDashboard } from "@shared/lib/actions/reportError";
import parsePhoneNumberFromString from "libphonenumber-js";

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export async function checkUserState(username: string) {
  try {
    console.warn("üîç checkUserState started for username:", username);

    const phone = await getUserPhoneByUsername(username);
    console.warn("üì± Found phone:", phone);

    if (!phone) {
      console.warn("‚ùå No phone found for user");
      return { confirmed: false, phone: null };
    }

    const confirmed = await checkUserConfirmed(phone);
    console.warn("‚úÖ User confirmed status:", confirmed);

    return { confirmed, phone };
  } catch (error) {
    console.error("‚ùå Error in checkUserState:", error);

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—à–∏–±–∫—É –≤ –¥–∞—à–±–æ—Ä–¥
    await reportErrorToDashboard({
      message: error instanceof Error ? error.message : "Unknown error in checkUserState",
      stack: error instanceof Error ? error.stack : undefined,
      appName: "web",
      environment: process.env.NODE_ENV || "development",
      additionalContext: {
        action: "checkUserState",
        username,
        errorType: error instanceof Error ? error.constructor.name : typeof error,
      },
      tags: ["auth", "checkUserState", "server-action"],
    });

    throw new Error("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");
  }
}
// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É
export async function serverCheckUserConfirmed(phone: string) {
  return checkUserConfirmed(phone);
}
// –ó–∞–ø—Ä–æ—Å –Ω–∞ —Å–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è —á–µ—Ä–µ–∑ Telegram
export async function sendPasswordResetRequest(username: string, phone: string) {
  try {
    return await sendTelegramPasswordResetRequest(username, phone);
  } catch (error) {
    console.error("‚ùå Error in sendPasswordResetRequest:", error);

    await reportErrorToDashboard({
      message: error instanceof Error ? error.message : "Unknown error in sendPasswordResetRequest",
      stack: error instanceof Error ? error.stack : undefined,
      appName: "web",
      environment: process.env.NODE_ENV || "development",
      additionalContext: {
        action: "sendPasswordResetRequest",
        username,
        phone,
        errorType: error instanceof Error ? error.constructor.name : typeof error,
      },
      tags: ["auth", "password-reset", "server-action"],
    });

    throw new Error("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Å–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è");
  }
}
// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export async function registerUserAction(name: string, phone: string, password: string) {
  try {
    // –°–µ—Ä–≤–µ—Ä–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
    const errors: string[] = [];

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (!name || name.trim().length === 0) {
      errors.push("–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ");
    } else if (name.length < 3) {
      errors.push("–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞");
    } else if (name.length > 50) {
      errors.push("–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–ª–∏–Ω–Ω–µ–µ 50 —Å–∏–º–≤–æ–ª–æ–≤");
    } else if (!/^[A-Za-z0-9_]+$/.test(name)) {
      errors.push("–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ _");
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–æ–ª—è
    if (!password || password.length === 0) {
      errors.push("–ü–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω");
    } else if (password.length < 6) {
      errors.push("–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤");
    } else if (password.length > 100) {
      errors.push("–ü–∞—Ä–æ–ª—å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–ª–∏–Ω–Ω–µ–µ 100 —Å–∏–º–≤–æ–ª–æ–≤");
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    if (!phone || phone.trim().length === 0) {
      errors.push("–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω");
    } else {
      const phoneNumber = parsePhoneNumberFromString(phone, "RU");
      if (!phoneNumber || !phoneNumber.isValid()) {
        errors.push("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞");
      }
    }

    if (errors.length > 0) {
      throw new Error(`–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: ${errors.join(", ")}`);
    }

    return await registerUser(name, phone, password);
  } catch (error) {
    console.error("‚ùå Error in registerUserAction:", error);

    await reportErrorToDashboard({
      message: error instanceof Error ? error.message : "Unknown error in registerUserAction",
      stack: error instanceof Error ? error.stack : undefined,
      appName: "web",
      environment: process.env.NODE_ENV || "development",
      additionalContext: {
        action: "registerUserAction",
        name,
        phone,
        errorType: error instanceof Error ? error.constructor.name : typeof error,
      },
      tags: ["auth", "registration", "server-action"],
    });

    throw new Error("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");
  }
}
// –°–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è –ø–æ —Ç–æ–∫–µ–Ω—É
export default async function resetPassword(token: string, password: string) {
  try {
    await resetPasswordByToken(token, password);
  } catch (error) {
    console.error("‚ùå Error in resetPassword:", error);

    await reportErrorToDashboard({
      message: error instanceof Error ? error.message : "Unknown error in resetPassword",
      stack: error instanceof Error ? error.stack : undefined,
      appName: "web",
      environment: process.env.NODE_ENV || "development",
      additionalContext: {
        action: "resetPassword",
        token: token.substring(0, 10) + "...", // –ù–µ –ª–æ–≥–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π —Ç–æ–∫–µ–Ω
        errorType: error instanceof Error ? error.constructor.name : typeof error,
      },
      tags: ["auth", "password-reset", "server-action"],
    });

    throw new Error("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –ø–∞—Ä–æ–ª—è");
  }
}
// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞ –∏–∑ —Ñ–æ—Ä–º—ã —Å –Ω–æ–º–µ—Ä–æ–º –≤ –±–∞–∑–µ
export async function checkPhoneMatchesUsername(username: string, phone: string) {
  try {
    const dbPhone = await getUserPhoneByUsername(username);
    if (!dbPhone) return false;

    // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –æ–±–∞ –Ω–æ–º–µ—Ä–∞
    const inputPhone = parsePhoneNumberFromString(phone, "RU")?.format("E.164");
    const storedPhone = parsePhoneNumberFromString(dbPhone, "RU")?.format("E.164");

    return inputPhone === storedPhone;
  } catch (error) {
    console.error("‚ùå Error in checkPhoneMatchesUsername:", error);

    await reportErrorToDashboard({
      message:
        error instanceof Error ? error.message : "Unknown error in checkPhoneMatchesUsername",
      stack: error instanceof Error ? error.stack : undefined,
      appName: "web",
      environment: process.env.NODE_ENV || "development",
      additionalContext: {
        action: "checkPhoneMatchesUsername",
        username,
        phone,
        errorType: error instanceof Error ? error.constructor.name : typeof error,
      },
      tags: ["auth", "phone-check", "server-action"],
    });

    throw new Error("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞");
  }
}
