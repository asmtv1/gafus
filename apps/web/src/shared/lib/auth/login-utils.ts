// src/app/actions/login-utils.ts (–∏–ª–∏ –¥—Ä—É–≥–æ–µ –º–µ—Å—Ç–æ)
"use server";

import {
  checkUserConfirmed,
  getUserPhoneByUsername,
  sendTelegramPasswordResetRequest,
  resetPasswordByToken,
  registerUser,
} from "@gafus/auth";
import { reportErrorToDashboard } from "@shared/lib/actions/reportError";
import { parsePhoneNumberFromString } from "libphonenumber-js";
import { createWebLogger } from "@gafus/logger";

import {
  phoneSchema,
  registerUserSchema,
  resetPasswordSchema,
  usernameSchema,
} from "@shared/lib/validation/authSchemas";

// –°–æ–∑–¥–∞–µ–º –ª–æ–≥–≥–µ—Ä –¥–ª—è login-utils
const logger = createWebLogger('web-login-utils');

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export async function checkUserState(username: string) {
  try {
    const safeUsername = usernameSchema.parse(username);
    logger.info("üîç checkUserState started for username", {
      operation: 'check_user_state_start',
      username: username
    });

    const phone = await getUserPhoneByUsername(safeUsername);
    logger.info("üì± Found phone", {
      operation: 'found_phone',
      phone: phone
    });

    if (!phone) {
      logger.warn("‚ùå No phone found for user", {
        operation: 'no_phone_found',
        username: username
      });
      return { confirmed: false, phone: null };
    }

    const confirmed = await checkUserConfirmed(phone);
    logger.info("‚úÖ User confirmed status", {
      operation: 'user_confirmed_status',
      confirmed: confirmed,
      phone: phone
    });

    return { confirmed, phone };
  } catch (error) {
    logger.error("‚ùå Error in checkUserState", error as Error, {
      operation: 'check_user_state_error',
      username: username
    });

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—à–∏–±–∫—É –≤ –¥–∞—à–±–æ—Ä–¥
    await reportErrorToDashboard({
      message: error instanceof Error ? error.message : "Unknown error in checkUserState",
      stack: error instanceof Error ? error.stack : undefined,
      appName: "web",
      environment: process.env.NODE_ENV || "development",
      additionalContext: {
        action: "checkUserState",
        username,
        errorType: error instanceof Error ? error.constructor.name : typeof error,
      },
      tags: ["auth", "checkUserState", "server-action"],
    });

    throw new Error("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");
  }
}
// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É
export async function serverCheckUserConfirmed(phone: string) {
  const safePhone = phoneSchema.parse(phone);
  return checkUserConfirmed(safePhone);
}
// –ó–∞–ø—Ä–æ—Å –Ω–∞ —Å–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è —á–µ—Ä–µ–∑ Telegram
export async function sendPasswordResetRequest(username: string, phone: string) {
  try {
    const { name: safeUsername, phone: safePhone } = registerUserSchema
      .pick({ name: true, phone: true })
      .parse({ name: username, phone });

    return await sendTelegramPasswordResetRequest(safeUsername, safePhone);
  } catch (error) {
    logger.error("‚ùå Error in sendPasswordResetRequest", error as Error, {
      operation: 'send_password_reset_request_error',
      username: username,
      phone: phone
    });

    await reportErrorToDashboard({
      message: error instanceof Error ? error.message : "Unknown error in sendPasswordResetRequest",
      stack: error instanceof Error ? error.stack : undefined,
      appName: "web",
      environment: process.env.NODE_ENV || "development",
      additionalContext: {
        action: "sendPasswordResetRequest",
        username,
        phone,
        errorType: error instanceof Error ? error.constructor.name : typeof error,
      },
      tags: ["auth", "password-reset", "server-action"],
    });

    throw new Error("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Å–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è");
  }
}
// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export async function registerUserAction(name: string, phone: string, password: string) {
  try {
    const result = registerUserSchema.safeParse({ name, phone, password });

    if (!result.success) {
      const message = result.error.errors.map((issue) => issue.message).join(", ");
      throw new Error(`–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: ${message}`);
    }

    return await registerUser(result.data.name, result.data.phone, result.data.password);
  } catch (error) {
    logger.error("‚ùå Error in registerUserAction", error as Error, {
      operation: 'register_user_action_error',
      name,
      phone
    });

    await reportErrorToDashboard({
      message: error instanceof Error ? error.message : "Unknown error in registerUserAction",
      stack: error instanceof Error ? error.stack : undefined,
      appName: "web",
      environment: process.env.NODE_ENV || "development",
      additionalContext: {
        action: "registerUserAction",
        name,
        phone,
        errorType: error instanceof Error ? error.constructor.name : typeof error,
      },
      tags: ["auth", "registration", "server-action"],
    });

    throw new Error("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");
  }
}
// –°–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è –ø–æ —Ç–æ–∫–µ–Ω—É
export default async function resetPassword(token: string, password: string) {
  try {
    const { token: safeToken, password: safePassword } = resetPasswordSchema.parse({ token, password });
    await resetPasswordByToken(safeToken, safePassword);
  } catch (error) {
    logger.error("‚ùå Error in resetPassword", error as Error, {
      operation: 'reset_password_error',
      token: token,
      password: password
    });

    await reportErrorToDashboard({
      message: error instanceof Error ? error.message : "Unknown error in resetPassword",
      stack: error instanceof Error ? error.stack : undefined,
      appName: "web",
      environment: process.env.NODE_ENV || "development",
      additionalContext: {
        action: "resetPassword",
        token: token.substring(0, 10) + "...", // –ù–µ –ª–æ–≥–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π —Ç–æ–∫–µ–Ω
        errorType: error instanceof Error ? error.constructor.name : typeof error,
      },
      tags: ["auth", "password-reset", "server-action"],
    });

    throw new Error("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –ø–∞—Ä–æ–ª—è");
  }
}
// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞ –∏–∑ —Ñ–æ—Ä–º—ã —Å –Ω–æ–º–µ—Ä–æ–º –≤ –±–∞–∑–µ
export async function checkPhoneMatchesUsername(username: string, phone: string) {
  try {
    const safeUsername = usernameSchema.parse(username);
    const safePhone = phoneSchema.parse(phone);

    const dbPhone = await getUserPhoneByUsername(safeUsername);
    if (!dbPhone) return false;

    // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –æ–±–∞ –Ω–æ–º–µ—Ä–∞
    const inputPhone = parsePhoneNumberFromString(safePhone, "RU")?.format("E.164");
    const storedPhone = parsePhoneNumberFromString(dbPhone, "RU")?.format("E.164");

    return inputPhone === storedPhone;
  } catch (error) {
    logger.error("‚ùå Error in checkPhoneMatchesUsername", error as Error, {
      operation: 'check_phone_matches_username_error',
      username: username,
      phone: phone
    });

    await reportErrorToDashboard({
      message:
        error instanceof Error ? error.message : "Unknown error in checkPhoneMatchesUsername",
      stack: error instanceof Error ? error.stack : undefined,
      appName: "web",
      environment: process.env.NODE_ENV || "development",
      additionalContext: {
        action: "checkPhoneMatchesUsername",
        username,
        phone,
        errorType: error instanceof Error ? error.constructor.name : typeof error,
      },
      tags: ["auth", "phone-check", "server-action"],
    });

    throw new Error("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞");
  }
}
