"use server";
import { prisma } from "@gafus/prisma";

import { getCurrentUserId } from "@/utils";

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–∫—Ç–∏–≤–Ω–∞—è push-–ø–æ–¥–ø–∏—Å–∫–∞
 */
export async function getUserSubscriptionStatus() {
  console.log("üöÄ getUserSubscriptionStatus: –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–ø–∏—Å–∫–∏");
  
  // –ü—Ä–æ–±—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ —Å —É–≤–µ–ª–∏—á–∏–≤–∞—é—â–∏–º—Å—è —Ç–∞–π–º–∞—É—Ç–æ–º
  const retries = 3;
  const baseTimeout = 3000; // 3 —Å–µ–∫—É–Ω–¥—ã
  
  for (let attempt = 1; attempt <= retries; attempt++) {
    try {
      console.log(`üîß getUserSubscriptionStatus: –ü–æ–ø—ã—Ç–∫–∞ ${attempt}/${retries}`);
      console.log("üîß getUserSubscriptionStatus: –ü–æ–ª—É—á–∞–µ–º userId...");
      const userId = await getCurrentUserId();
      console.log("‚úÖ getUserSubscriptionStatus: userId –ø–æ–ª—É—á–µ–Ω:", userId);

      // –î–æ–±–∞–≤–ª—è–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è Prisma –∑–∞–ø—Ä–æ—Å–∞
      console.log("üîß getUserSubscriptionStatus: –°–æ–∑–¥–∞–µ–º Prisma –∑–∞–ø—Ä–æ—Å...");
      const subscriptionPromise = prisma.pushSubscription.findFirst({
        where: { userId },
        select: { id: true },
      });
      
      const timeout = baseTimeout * attempt; // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç —Å –∫–∞–∂–¥–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
      console.log(`üîß getUserSubscriptionStatus: –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–∏—Å —Å —Ç–∞–π–º–∞—É—Ç–æ–º ${timeout}–º—Å`);
      const timeoutPromise = new Promise<null>((_, reject) => {
        setTimeout(() => {
          console.log(`‚è∞ getUserSubscriptionStatus: –¢–∞–π–º–∞—É—Ç –∏—Å—Ç–µ–∫ –Ω–∞ –ø–æ–ø—ã—Ç–∫–µ ${attempt}!`);
          reject(new Error(`Database query timeout (attempt ${attempt})`));
        }, timeout);
      });
      
      console.log("üîß getUserSubscriptionStatus: –ó–∞–ø—É—Å–∫–∞–µ–º –≥–æ–Ω–∫—É –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–æ–º –∏ —Ç–∞–π–º–∞—É—Ç–æ–º");
      const subscription = await Promise.race([subscriptionPromise, timeoutPromise]);
      console.log("‚úÖ getUserSubscriptionStatus: –ó–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω, —Ä–µ–∑—É–ª—å—Ç–∞—Ç:", subscription);

      const hasSubscription = !!subscription;
      console.log("‚úÖ getUserSubscriptionStatus: –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç:", { hasSubscription });
      return { hasSubscription };
      
    } catch (error) {
      console.error(`‚ùå getUserSubscriptionStatus: –û—à–∏–±–∫–∞ –Ω–∞ –ø–æ–ø—ã—Ç–∫–µ ${attempt}:`, error);
      
      if (attempt === retries) {
        console.log("üîß getUserSubscriptionStatus: –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º hasSubscription: false");
        return { hasSubscription: false };
      }
      
      // –ñ–¥–µ–º –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π
      const waitTime = 1000 * attempt; // 1—Å, 2—Å, 3—Å
      console.log(`‚è≥ getUserSubscriptionStatus: –ñ–¥–µ–º ${waitTime}–º—Å –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π...`);
      await new Promise(resolve => setTimeout(resolve, waitTime));
    }
  }
  
  // Fallback
  console.log("üîß getUserSubscriptionStatus: Fallback - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º hasSubscription: false");
  return { hasSubscription: false };
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö push-–ø–æ–¥–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
export async function getUserSubscriptionCount() {
  try {
    const userId = await getCurrentUserId();

    const count = await prisma.pushSubscription.count({
      where: { userId },
    });

    return { subscriptionCount: count };
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–¥–ø–∏—Å–æ–∫:", error);
    return { subscriptionCount: 0 };
  }
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–¥–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –¥–µ—Ç–∞–ª—è–º–∏
 */
export async function getUserSubscriptions() {
  try {
    const userId = await getCurrentUserId();

    const subscriptions = await prisma.pushSubscription.findMany({
      where: { userId },
      select: {
        id: true,
        endpoint: true,
        createdAt: true,
        updatedAt: true,
      },
      orderBy: { createdAt: 'desc' },
    });

    return { subscriptions };
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫:", error);
    return { subscriptions: [] };
  }
}
