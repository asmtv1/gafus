"use server";
import { prisma } from "@gafus/prisma";

import { getCurrentUserId } from "@/utils";

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–∫—Ç–∏–≤–Ω–∞—è push-–ø–æ–¥–ø–∏—Å–∫–∞
 */
export async function getUserSubscriptionStatus() {
  console.log("üöÄ getUserSubscriptionStatus: –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–ø–∏—Å–∫–∏");
  
  try {
    console.log("üîß getUserSubscriptionStatus: –ü–æ–ª—É—á–∞–µ–º userId...");
    const userId = await getCurrentUserId();
    console.log("‚úÖ getUserSubscriptionStatus: userId –ø–æ–ª—É—á–µ–Ω:", userId);

    // –°–æ–∑–¥–∞–µ–º Prisma –∑–∞–ø—Ä–æ—Å —Å –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–º —Ç–∞–π–º–∞—É—Ç–æ–º
    console.log("üîß getUserSubscriptionStatus: –°–æ–∑–¥–∞–µ–º Prisma –∑–∞–ø—Ä–æ—Å...");
    const subscriptionPromise = prisma.pushSubscription.findFirst({
      where: { userId },
      select: { id: true },
    });
    
    // –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π —Ç–∞–π–º–∞—É—Ç: –±–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è Safari (–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ User-Agent)
    // –í production —ç—Ç–æ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ, –Ω–æ –ª–æ–≥–∏–∫–∞ –æ—Å—Ç–∞–µ—Ç—Å—è
    const timeoutMs = 15000; // 15 —Å–µ–∫—É–Ω–¥ –¥–ª—è –≤—Å–µ—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤ (—Å–µ—Ä–≤–µ—Ä–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è)
    console.log(`‚è∞ getUserSubscriptionStatus: –¢–∞–π–º–∞—É—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: ${timeoutMs}ms`);
    
    const timeoutPromise = new Promise<null>((_, reject) => {
      setTimeout(() => {
        console.log("‚è∞ getUserSubscriptionStatus: –¢–∞–π–º–∞—É—Ç –∏—Å—Ç–µ–∫!");
        reject(new Error("Database query timeout"));
      }, timeoutMs);
    });
    
    console.log("üîß getUserSubscriptionStatus: –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–ø—Ä–æ—Å —Å —Ç–∞–π–º–∞—É—Ç–æ–º");
    const subscription = await Promise.race([subscriptionPromise, timeoutPromise]);
    console.log("‚úÖ getUserSubscriptionStatus: –ó–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω, —Ä–µ–∑—É–ª—å—Ç–∞—Ç:", subscription);

    const hasSubscription = !!subscription;
    console.log("‚úÖ getUserSubscriptionStatus: –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç:", { hasSubscription });
    return { hasSubscription };
    
  } catch (error) {
    console.error("‚ùå getUserSubscriptionStatus: –û—à–∏–±–∫–∞:", error);
    
    if (error instanceof Error && error.message.includes("timeout")) {
      console.log("üîß getUserSubscriptionStatus: –¢–∞–π–º–∞—É—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º hasSubscription: false");
      return { hasSubscription: false };
    }
    
    console.log("üîß getUserSubscriptionStatus: –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º hasSubscription: false");
    return { hasSubscription: false };
  }
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö push-–ø–æ–¥–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
export async function getUserSubscriptionCount() {
  try {
    const userId = await getCurrentUserId();

    const count = await prisma.pushSubscription.count({
      where: { userId },
    });

    return { subscriptionCount: count };
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–¥–ø–∏—Å–æ–∫:", error);
    return { subscriptionCount: 0 };
  }
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–¥–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –¥–µ—Ç–∞–ª—è–º–∏
 */
export async function getUserSubscriptions() {
  try {
    const userId = await getCurrentUserId();

    const subscriptions = await prisma.pushSubscription.findMany({
      where: { userId },
      select: {
        id: true,
        endpoint: true,
        createdAt: true,
        updatedAt: true,
      },
      orderBy: { createdAt: 'desc' },
    });

    return { subscriptions };
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫:", error);
    return { subscriptions: [] };
  }
}
