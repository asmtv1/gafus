"use server";

import { uploadFileToCDN, deleteFileFromCDN } from "@gafus/cdn-upload";
import { getServerSession } from "next-auth";
import { authOptions } from "@gafus/auth";
import { randomUUID } from "crypto";
import { createWebLogger } from "@gafus/logger";
import { prisma } from "@gafus/prisma";

const logger = createWebLogger('web-upload-exam-video');

/**
 * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤–∏–¥–µ–æ —ç–∫–∑–∞–º–µ–Ω–∞ –Ω–∞ CDN
 * @param formData - FormData —Å –ø–æ–ª–µ–º "video" —Å–æ–¥–µ—Ä–∂–∞—â–∏–º –≤–∏–¥–µ–æ —Ñ–∞–π–ª
 * @returns URL –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ –≤–∏–¥–µ–æ –Ω–∞ CDN
 */
export async function uploadExamVideo(formData: FormData): Promise<{ success: boolean; videoUrl?: string; error?: string }> {
  try {
    const session = await getServerSession(authOptions);
    
    if (!session?.user?.id) {
      return { success: false, error: "–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω" };
    }

    const videoFile = formData.get("video") as File | null;
    
    if (!videoFile) {
      return { success: false, error: "–í–∏–¥–µ–æ —Ñ–∞–π–ª –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω" };
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞
    if (!videoFile.type.startsWith('video/')) {
      return { success: false, error: "–§–∞–π–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤–∏–¥–µ–æ" };
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ (–º–∞–∫—Å 100MB)
    const maxSize = 100 * 1024 * 1024; // 100MB
    if (videoFile.size > maxSize) {
      return { success: false, error: "–†–∞–∑–º–µ—Ä –≤–∏–¥–µ–æ –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 100MB" };
    }

    logger.info(`üé• –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–∏–¥–µ–æ —ç–∫–∑–∞–º–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${session.user.id}, —Ä–∞–∑–º–µ—Ä: ${(videoFile.size / 1024 / 1024).toFixed(2)}MB`);

    // –í–ê–ñ–ù–û: –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ –≤–∏–¥–µ–æ –ø–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π –Ω–æ–≤–æ–≥–æ (—ç–∫–æ–Ω–æ–º–∏—è CDN)
    const userStepId = formData.get("userStepId")?.toString();
    if (userStepId) {
      try {
        const existingExam = await prisma.examResult.findUnique({
          where: { userStepId },
          select: { videoReportUrl: true }
        });

        if (existingExam?.videoReportUrl) {
          logger.info(`üóëÔ∏è –ù–∞–π–¥–µ–Ω–æ —Å—Ç–∞—Ä–æ–µ –≤–∏–¥–µ–æ, —É–¥–∞–ª—è–µ–º –ø–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π –Ω–æ–≤–æ–≥–æ: ${existingExam.videoReportUrl}`);
          
          // –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å –∏–∑ CDN URL
          const oldRelativePath = existingExam.videoReportUrl
            .replace('https://gafus-media.storage.yandexcloud.net/uploads/', '');
          
          await deleteFileFromCDN(oldRelativePath);
          
          // –õ–æ–≥–∏—Ä—É–µ–º —É–¥–∞–ª–µ–Ω–∏–µ –≤ –ë–î
          await prisma.examResult.update({
            where: { userStepId },
            data: {
              videoDeletedAt: new Date(),
              videoDeleteReason: 'replaced'
            }
          });
          
          logger.success(`‚úÖ –°—Ç–∞—Ä–æ–µ –≤–∏–¥–µ–æ —É–¥–∞–ª–µ–Ω–æ –ø–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π –Ω–æ–≤–æ–≥–æ`);
        }
      } catch (error) {
        logger.warn(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä–æ–µ –≤–∏–¥–µ–æ (–Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º): ${error}`);
        // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –Ω–æ–≤–æ–≥–æ –≤–∏–¥–µ–æ –¥–∞–∂–µ –µ—Å–ª–∏ —Å—Ç–∞—Ä–æ–µ –Ω–µ —É–¥–∞–ª–∏–ª–æ—Å—å
      }
    }

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
    const fileId = randomUUID();
    const extension = videoFile.name.split('.').pop() || 'webm';
    const fileName = `exam-video-${session.user.id}-${fileId}.${extension}`;
    const relativePath = `exam-videos/${fileName}`;

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞ CDN
    const videoUrl = await uploadFileToCDN(videoFile, relativePath);

    logger.info(`‚úÖ –í–∏–¥–µ–æ —ç–∫–∑–∞–º–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –Ω–∞ CDN: ${videoUrl}`);

    return { success: true, videoUrl };
  } catch (error) {
    logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤–∏–¥–µ–æ —ç–∫–∑–∞–º–µ–Ω–∞:", error as Error);
    return { 
      success: false, 
      error: error instanceof Error ? error.message : "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤–∏–¥–µ–æ" 
    };
  }
}
