"use server";

import { prisma } from "@gafus/prisma";
import { createWebLogger } from "@gafus/logger";
import { uploadFileToCDN, deleteFileFromCDN, getRelativePathFromCDNUrl } from "@gafus/cdn-upload";
import { z } from "zod";

import { getCurrentUserId } from "@/utils";

// –°–æ–∑–¥–∞–µ–º –ª–æ–≥–≥–µ—Ä –¥–ª—è updateAvatar
const logger = createWebLogger('web-update-avatar');

const fileSchema = z.instanceof(File, { message: "–§–∞–π–ª –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω" });

export async function updateAvatar(file: File): Promise<string> {
  const validFile = fileSchema.parse(file);
  try {
    // 1. –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –∏ —Ñ–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞
    const userId = await getCurrentUserId();
    const ext = validFile.name.split(".").pop();
    if (!ext) throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞");
    
    const timestamp = Date.now();
    const fileName = `avatar-${userId}-${timestamp}.${ext}`;
    const relativePath = `avatars/${fileName}`;

    // 2. –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ä—ã–π avatarUrl –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    const existingProfile = await prisma.userProfile.findUnique({
      where: { userId },
      select: { avatarUrl: true },
    });

    // 3. –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–æ–≤—ã–π —Ñ–∞–π–ª –≤ CDN
    const avatarUrl = await uploadFileToCDN(validFile, relativePath);

    // 4. –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π —Ñ–∞–π–ª –∏–∑ CDN (–µ—Å–ª–∏ –µ—Å—Ç—å)
    if (existingProfile?.avatarUrl) {
      const oldRelativePath = getRelativePathFromCDNUrl(existingProfile.avatarUrl);
      logger.info(`üîç –ù–∞–π–¥–µ–Ω —Å—Ç–∞—Ä—ã–π –∞–≤–∞—Ç–∞—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: ${existingProfile.avatarUrl} -> ${oldRelativePath}`);
      try {
        await deleteFileFromCDN(oldRelativePath);
        logger.info(`üóëÔ∏è –°—Ç–∞—Ä—ã–π –∞–≤–∞—Ç–∞—Ä —É–¥–∞–ª–µ–Ω –∏–∑ CDN: ${oldRelativePath}`);
      } catch (error) {
        logger.error(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä—ã–π –∞–≤–∞—Ç–∞—Ä: ${error}`, error as Error);
      }
    } else {
      logger.info(`‚ÑπÔ∏è –°—Ç–∞—Ä—ã–π –∞–≤–∞—Ç–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ`);
    }

    // 5. –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π avatarUrl –≤ –±–∞–∑–µ (—Ç–∞–±–ª–∏—Ü–∞ userProfile)
    await prisma.userProfile.upsert({
      where: { userId },
      update: { avatarUrl },
      create: {
        userId,
        avatarUrl,
      },
    });

    logger.warn("Avatar URL saved to database:", { avatarUrl, operation: 'warn' });
    return avatarUrl;
  } catch (error) {
    logger.error("–û—à–∏–±–∫–∞ –≤ updateAvatar:", error as Error, { operation: 'error' });
    throw new Error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∞–≤–∞—Ç–∞—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É.");
  }
}
