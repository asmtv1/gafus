import { create } from "zustand";
import { persist } from "zustand/middleware";
import { createWebLogger } from "@gafus/logger";

import type {
  CommentData,
  OfflineAction,
  OfflineState,
  ProfileUpdateData,
  RatingData,
  StepCompletionData,
  StepStatusUpdateData,
  StepPauseData,
  StepResumeData,
  TrainingStatus,
  FavoriteToggleData,
} from "@gafus/types";

// –°–æ–∑–¥–∞–µ–º –ª–æ–≥–≥–µ—Ä –¥–ª—è offline store
const logger = createWebLogger('web-offline-store');

export const useOfflineStore = create<OfflineState>()(
  persist(
    (set, get) => ({
      // –£–ø—Ä–æ—â–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ - —Ç–æ–ª—å–∫–æ navigator.onLine
      isOnline: typeof window !== "undefined" ? navigator.onLine : true,
      syncQueue: [],
      lastSyncTime: null,
      syncErrors: [],
      maxRetries: 3,
      lastSyncAttempt: null,
      syncCooldown: 60000, // 60 —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏

      // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –æ–Ω–ª–∞–π–Ω/–æ—Ñ–ª–∞–π–Ω - —Ç–æ–ª—å–∫–æ navigator.onLine
      setOnlineStatus: (isOnline: boolean) => {
        set({ isOnline });

        // –ï—Å–ª–∏ —Å—Ç–∞–ª–∏ –æ–Ω–ª–∞–π–Ω, –ø—ã—Ç–∞–µ–º—Å—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –æ—á–µ—Ä–µ–¥—å
        if (isOnline) {
          const state = get();
          if (state.syncQueue.length > 0) {
            const now = Date.now();
            if (!state.lastSyncAttempt || (now - state.lastSyncAttempt) >= state.syncCooldown) {
              setTimeout(() => {
                try {
                  get().syncOfflineActions();
                } catch (error) {
                  logger.warn("Failed to sync offline actions (online)", {
                    operation: 'sync_offline_actions_online_error',
                    error: error instanceof Error ? error.message : String(error)
                  });
                }
              }, 1000);
            }
          }
        }
      },

      // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –≤ –æ—á–µ—Ä–µ–¥—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
      addToSyncQueue: (action) => {
        try {
          const newAction: OfflineAction = {
            ...action,
            id: crypto.randomUUID(),
            timestamp: Date.now(),
            retryCount: 0,
          };

          set((state) => ({
            syncQueue: [...state.syncQueue, newAction],
          }));

          // –ï—Å–ª–∏ –æ–Ω–ª–∞–π–Ω, –ø—ã—Ç–∞–µ–º—Å—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
          if (get().isOnline) {
            const now = Date.now();
            const state = get();
            
            if (!state.lastSyncAttempt || (now - state.lastSyncAttempt) >= state.syncCooldown) {
              setTimeout(() => {
                try {
                  get().syncOfflineActions();
                } catch (error) {
                  logger.warn("Failed to sync offline actions (retry)", {
                    operation: 'sync_offline_actions_retry_error',
                    error: error instanceof Error ? error.message : String(error)
                  });
                }
              }, 100);
            }
          }
        } catch (error) {
          logger.warn("Failed to add action to sync queue", {
            operation: 'add_action_to_sync_queue_error',
            actionType: action.type,
            error: error instanceof Error ? error.message : String(error)
          });
        }
      },

      // –£–¥–∞–ª–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –∏–∑ –æ—á–µ—Ä–µ–¥–∏
      removeFromSyncQueue: (id: string) => {
        set((state) => ({
          syncQueue: state.syncQueue.filter((action: { id: string }) => action.id !== id),
        }));
      },

      // –û—á–∏—Å—Ç–∫–∞ –æ—á–µ—Ä–µ–¥–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
      clearSyncQueue: () => {
        set({ syncQueue: [] });
      },

      // –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π –∏–∑ –æ—á–µ—Ä–µ–¥–∏
      cleanupOldActions: () => {
        const maxAge = 7 * 24 * 60 * 60 * 1000; // 7 –¥–Ω–µ–π
        const now = Date.now();
        
        set((state) => ({
          syncQueue: state.syncQueue.filter((action) => {
            const age = now - action.timestamp;
            return age < maxAge;
          }),
        }));
      },

      // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è offline –¥–µ–π—Å—Ç–≤–∏–π
      syncOfflineActions: async () => {
        try {
          const state = get();
          const now = Date.now();

          // –°–Ω–∞—á–∞–ª–∞ –æ—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
          get().cleanupOldActions();

          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –æ–Ω–ª–∞–π–Ω –∏ –µ—Å—Ç—å –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
          if (!state.isOnline || state.syncQueue.length === 0) {
            return;
          }

          // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–π–º–∞—É—Ç –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
          if (state.lastSyncAttempt && (now - state.lastSyncAttempt) < state.syncCooldown) {
            return;
          }

          // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø–æ–ø—ã—Ç–∫–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
          set({ lastSyncAttempt: now });

          const actionsToSync = [...state.syncQueue];

          for (const action of actionsToSync) {
            try {
              await syncAction(action);
              // –£–¥–∞–ª—è–µ–º —É—Å–ø–µ—à–Ω–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ
              get().removeFromSyncQueue(action.id);
            } catch (error) {
              logger.warn(`‚ùå Failed to sync action ${action.type}`, {
                operation: 'sync_action_failed',
                actionType: action.type,
                actionId: action.id,
                error: error instanceof Error ? error.message : String(error)
              });
              
              // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫
              const updatedAction = { ...action, retryCount: action.retryCount + 1 };
              
              // –ï—Å–ª–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫, —É–¥–∞–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
              if (updatedAction.retryCount >= state.maxRetries) {
                get().removeFromSyncQueue(action.id);
                logger.warn(`üóëÔ∏è Removed action ${action.type} after ${state.maxRetries} failed attempts`, {
                  operation: 'action_removed_after_max_retries',
                  actionType: action.type,
                  maxRetries: state.maxRetries
                });
              }
            }
          }

          // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
          set({ lastSyncTime: now });
          
        } catch (error) {
          logger.warn("Failed to sync offline actions (main)", {
            operation: 'sync_offline_actions_main_error',
            error: error instanceof Error ? error.message : String(error)
          });
        }
      },
    }),
    {
      name: "offline-store",
      partialize: (state) => ({
        syncQueue: state.syncQueue,
        lastSyncTime: state.lastSyncTime,
        syncErrors: state.syncErrors,
        lastSyncAttempt: state.lastSyncAttempt,
      }),
    }
  )
);

// –§—É–Ω–∫—Ü–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è
async function syncAction(action: OfflineAction): Promise<void> {
  switch (action.type) {
    case "step-completion":
      await syncStepCompletion(action.data as StepCompletionData);
      break;
    case "profile-update":
      await syncProfileUpdate(action.data as ProfileUpdateData);
      break;
    case "comment":
      await syncComment(action.data as CommentData);
      break;
    case "rating":
      await syncRating(action.data as RatingData);
      break;
    case "step-status-update":
      await syncStepStatusUpdate(action.data as StepStatusUpdateData);
      break;
    case "step-pause":
      await syncStepPause(action.data as StepPauseData);
      break;
    case "step-resume":
      await syncStepResume(action.data as StepResumeData);
      break;
    case "cache-invalidation":
      await syncCacheInvalidation(action.data as { userId: string; cacheKeys: string[] });
      break;
    case "favorite-toggle":
      await syncFavoriteToggle(action.data as FavoriteToggleData);
      break;
    default:
      throw new Error(`Unknown action type: ${action.type}`);
  }
}

// –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —à–∞–≥–∞
async function syncStepCompletion(data: StepCompletionData): Promise<void> {
  await fetch("/api/training/complete-step", {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify(data),
  });
}

// –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
async function syncProfileUpdate(data: ProfileUpdateData): Promise<void> {
  await fetch("/api/profile/update", {
    method: "PUT",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify(data),
  });
}

// –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
async function syncComment(data: CommentData): Promise<void> {
  await fetch("/api/comments/add", {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify(data),
  });
}

// –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Ä–µ–π—Ç–∏–Ω–≥–∞
async function syncRating(data: RatingData): Promise<void> {
  await fetch("/api/ratings/add", {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify(data),
  });
}

// –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å—Ç–∞—Ç—É—Å–∞ —à–∞–≥–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
async function syncStepStatusUpdate(data: StepStatusUpdateData): Promise<void> {
  try {
    // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —à–∞–≥–∞
    const { updateStepStatusServerAction } = await import(
      "@shared/lib/training/updateUserStepStatus"
    );

    // –í—ã–∑—ã–≤–∞–µ–º —Å–µ—Ä–≤–µ—Ä–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
    await updateStepStatusServerAction(
      data.courseId,
      data.day,
      data.stepIndex,
      data.status as TrainingStatus,
      data.stepTitle
    );
  } catch (error) {
    logger.warn("Failed to sync step status update", {
      operation: 'sync_step_status_update_error',
      courseId: data.courseId,
      day: data.day,
      stepIndex: data.stepIndex,
      error: error instanceof Error ? error.message : String(error)
    });
    throw error;
  }
}

// –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø–∞—É–∑—ã —à–∞–≥–∞: —Å–µ—Ä–≤–µ—Ä–Ω–∞—è –ø–∞—É–∑–∞ + StepNotification
async function syncStepPause(data: StepPauseData): Promise<void> {
  try {
    const [{ pauseUserStepServerAction }, { pauseNotificationClient }] = await Promise.all([
      import("@shared/lib/training/pauseResumeUserStep"),
      import("@shared/lib/StepNotification/manageStepNotificationSimple"),
    ]);
    await Promise.allSettled([
      pauseUserStepServerAction(data.courseId, data.day, data.stepIndex, data.timeLeft),
      pauseNotificationClient({ courseId: data.courseId, day: data.day, stepIndex: data.stepIndex }),
    ]);
  } catch (error) {
    logger.warn("Failed to sync step pause", {
      operation: 'sync_step_pause_error',
      courseId: data.courseId,
      day: data.day,
      stepIndex: data.stepIndex,
      error: error instanceof Error ? error.message : String(error)
    });
    throw error;
  }
}

// –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —à–∞–≥–∞: —Å–Ω–∏–º–∞–µ–º —Å–µ—Ä–≤–µ—Ä–Ω—É—é –ø–∞—É–∑—É + –≤–æ–∑–æ–±–Ω–æ–≤–ª—è–µ–º StepNotification
async function syncStepResume(data: StepResumeData): Promise<void> {
  try {
    const [{ resumeUserStepServerAction }, { resumeNotificationClient }] = await Promise.all([
      import("@shared/lib/training/pauseResumeUserStep"),
      import("@shared/lib/StepNotification/manageStepNotificationSimple"),
    ]);
    await Promise.allSettled([
      resumeUserStepServerAction(data.courseId, data.day, data.stepIndex),
      resumeNotificationClient({ courseId: data.courseId, day: data.day, stepIndex: data.stepIndex, durationSec: data.timeLeft }),
    ]);
  } catch (error) {
    logger.warn("Failed to sync step resume", {
      operation: 'sync_step_resume_error',
      courseId: data.courseId,
      day: data.day,
      stepIndex: data.stepIndex,
      error: error instanceof Error ? error.message : String(error)
    });
    throw error;
  }
}

// –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∏–Ω–≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫—ç—à–∞
async function syncCacheInvalidation(data: { userId: string; cacheKeys: string[] }): Promise<void> {
  try {
    // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∏–Ω–≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫—ç—à–∞
    const { invalidateUserProgressCache } = await import(
      "@shared/lib/actions/invalidateCoursesCache"
    );

    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∏–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∫—ç—à (force = true)
    await invalidateUserProgressCache(data.userId, true);
    
    logger.info(`[OfflineStore] Cache invalidation synced for user ${data.userId}`, {
      operation: 'cache_invalidation_synced',
      userId: data.userId
    });
  } catch (error) {
    logger.warn("Failed to sync cache invalidation", {
      operation: 'sync_cache_invalidation_error',
      userId: data.userId,
      error: error instanceof Error ? error.message : String(error)
    });
    throw error;
  }
}

// –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
async function syncFavoriteToggle(data: FavoriteToggleData): Promise<void> {
  try {
    // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
    const { toggleFavoriteCourse } = await import(
      "@shared/lib/course/addtoFavorite"
    );

    // –í—ã–∑—ã–≤–∞–µ–º —Å–µ—Ä–≤–µ—Ä–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
    await toggleFavoriteCourse(data.courseId);
  } catch (error) {
    logger.warn("Failed to sync favorite toggle", {
      operation: 'sync_favorite_toggle_error',
      courseId: data.courseId,
      action: data.action,
      error: error instanceof Error ? error.message : String(error)
    });
    throw error;
  }
}

// –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ store
export function initializeOfflineStore() {
  if (typeof window === "undefined") return;

  // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—à–∞—Ç–µ–ª–∏ —Å–æ–±—ã—Ç–∏–π —Å–µ—Ç–∏ - —Ç–æ–ª—å–∫–æ navigator.onLine
  window.addEventListener("online", () => {
    useOfflineStore.getState().setOnlineStatus(true);
  });

  window.addEventListener("offline", () => {
    useOfflineStore.getState().setOnlineStatus(false);
  });

  // –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º fetch –æ—à–∏–±–∫–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
  try {
    const originalFetch = window.fetch;
    
    window.fetch = async (...args) => {
      try {
        // –î–æ–±–∞–≤–ª—è–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        const controller = new AbortController();
        const timeoutId = setTimeout(() => controller.abort(), 1000); // 1 —Å–µ–∫—É–Ω–¥–∞ —Ç–∞–π–º–∞—É—Ç
        
        const fetchPromise = originalFetch(args[0], {
          ...args[1],
          signal: controller.signal,
        });
        
        const result = await fetchPromise;
        clearTimeout(timeoutId);
        return result;
      } catch (error) {
        // –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ —Å–µ—Ç–∏ –∏–ª–∏ —Ç–∞–π–º–∞—É—Ç ‚Äî –Ω–µ –ø–æ–Ω–∏–∂–∞–µ–º —Å—Ç–∞—Ç—É—Å –≤—Å–ª–µ–ø—É—é
        if (error instanceof TypeError) {
          // –ï—Å–ª–∏ –±—Ä–∞—É–∑–µ—Ä —Å–∞–º –≥–æ–≤–æ—Ä–∏—Ç, —á—Ç–æ –æ—Ñ–ª–∞–π–Ω ‚Äî –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
          if (!navigator.onLine) {
            useOfflineStore.getState().setOnlineStatus(false);
          }
        }
        
        throw error;
      }
    };
  } catch (error) {
    logger.warn("Error setting up fetch interceptor", {
      operation: 'setup_fetch_interceptor_error',
      error: error instanceof Error ? error.message : String(error)
    });
  }

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ –æ—Å–Ω–æ–≤–µ navigator.onLine
  const isOnline = navigator.onLine;
  const initialState = useOfflineStore.getState();
  
  if (initialState.isOnline !== isOnline) {
    useOfflineStore.getState().setOnlineStatus(isOnline);
  }

  // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
  useOfflineStore.getState().cleanupOldActions();
}