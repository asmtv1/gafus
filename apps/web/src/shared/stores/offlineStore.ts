import { create } from "zustand";
import { persist } from "zustand/middleware";

import type {
  CommentData,
  ConnectionQuality,
  OfflineAction,
  OfflineState,
  ProfileUpdateData,
  RatingData,
  StepCompletionData,
  StepStatusUpdateData,
  TrainingStatus,
} from "@gafus/types";

export const useOfflineStore = create<OfflineState>()(
  persist(
    (set, get) => ({
      // –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      isOnline: typeof window !== "undefined" ? navigator.onLine : true,
      isStable: true,
      isActuallyConnected: typeof window !== "undefined" ? navigator.onLine : true,
      connectionQuality: 'good' as ConnectionQuality,
      networkMetrics: {
        latency: 0,
        quality: 'good' as ConnectionQuality,
        lastChecked: 0,
        consecutiveFailures: 0,
        adaptiveInterval: 300000, // 5 –º–∏–Ω—É—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
      },
      syncQueue: [],
      lastSyncTime: null,
      syncErrors: [],
      maxRetries: 3,
      lastSyncAttempt: null, // –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø–æ–ø—ã—Ç–∫–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
      syncCooldown: 60000, // 60 —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏

      // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –æ–Ω–ª–∞–π–Ω/–æ—Ñ–ª–∞–π–Ω
      setOnlineStatus: (isOnline: boolean) => {
        const currentState = get();

        if (process.env.NODE_ENV !== "production") {
          console.warn(`üåê Setting online status: ${isOnline} (was: ${currentState.isOnline})`);
        }

        set({ isOnline, isActuallyConnected: isOnline });

        if (isOnline && typeof window !== "undefined") {
          // –ï—Å–ª–∏ —Å—Ç–∞–ª–∏ –æ–Ω–ª–∞–π–Ω –∏ –º—ã –≤ –±—Ä–∞—É–∑–µ—Ä–µ, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∞–ª—å–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –≤ —Ñ–æ–Ω–µ
          const checkDelay = process.env.NODE_ENV !== "production" ? 500 : 100;

          if (process.env.NODE_ENV !== "production") {
            console.warn(`‚è∞ Will check external connection in ${checkDelay}ms`);
          }

          // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–º—ã–∫–∞–Ω–∏–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
          setTimeout(() => {
            try {
              // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ –º–æ–º–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
              const actualState = get();
              
              actualState
                .checkExternalConnection()
                .then((isConnected) => {
                  if (process.env.NODE_ENV !== "production") {
                    console.warn(`üîç External connection check result: ${isConnected}`);
                  }
                  
                  // –ü–æ–ª—É—á–∞–µ–º –µ—â–µ —Ä–∞–∑ –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                  const stateForUpdate = get();
                  
                  // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∞–ª—å–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–∫–∞–∑–∞–ª–∞, —á—Ç–æ –µ–≥–æ –Ω–µ—Ç
                  if (!isConnected) {
                    set({ isActuallyConnected: false });
                  }
                  
                  if (isConnected && stateForUpdate.syncQueue.length > 0) {
                    // –ï—Å–ª–∏ –µ—Å—Ç—å —Ä–µ–∞–ª—å–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏ –µ—Å—Ç—å –¥–µ–π—Å—Ç–≤–∏—è –≤ –æ—á–µ—Ä–µ–¥–∏, —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º
                    // –ù–æ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø—Ä–æ—à–ª–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—Ä–µ–º–µ–Ω–∏ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø–æ–ø—ã—Ç–∫–∏
                    const now = Date.now();
                    if (!stateForUpdate.lastSyncAttempt || (now - stateForUpdate.lastSyncAttempt) >= stateForUpdate.syncCooldown) {
                      stateForUpdate.syncOfflineActions();
                    } else {
                      if (process.env.NODE_ENV !== "production") {
                        const remainingTime = Math.ceil((stateForUpdate.syncCooldown - (now - stateForUpdate.lastSyncAttempt)) / 1000);
                        console.warn(`‚è∞ Skipping sync on connection change, cooldown active for ${remainingTime}s`);
                      }
                    }
                  }
                })
                .catch((error) => {
                  console.warn("Failed to check actual connection:", error);
                });
            } catch (error) {
              console.warn("Error in setOnlineStatus:", error);
            }
          }, checkDelay);
        } else {
          // –ï—Å–ª–∏ —Å—Ç–∞–ª–∏ –æ—Ñ–ª–∞–π–Ω, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
          if (process.env.NODE_ENV !== "production") {
            console.warn("üî¥ Resetting actual connection flag");
          }
          set({ isActuallyConnected: false });
        }
      },

      // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ —Å–µ—Ç–∏
      setNetworkStability: (isStable: boolean) => {
        if (process.env.NODE_ENV !== "production") {
          console.warn(`üì∂ Setting network stability: ${isStable}`);
        }
        set({ isStable });
      },

      // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
      setActualConnection: (isConnected: boolean) => {
        if (process.env.NODE_ENV !== "production") {
          console.warn(`üîå Setting actual connection: ${isConnected}`);
        }
        set({ isActuallyConnected: isConnected });
      },

      // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
      setConnectionQuality: (quality: ConnectionQuality) => {
        if (process.env.NODE_ENV !== "production") {
          console.warn(`üìä Setting connection quality: ${quality}`);
        }
        set((state) => ({
          connectionQuality: quality,
          networkMetrics: {
            ...state.networkMetrics,
            quality,
            lastChecked: Date.now(),
          },
        }));
      },

      // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –≤ –æ—á–µ—Ä–µ–¥—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
      addToSyncQueue: (action) => {
        try {
          const newAction: OfflineAction = {
            ...action,
            id: crypto.randomUUID(),
            timestamp: Date.now(),
            retryCount: 0,
          };

          set((state) => ({
            syncQueue: [...state.syncQueue, newAction],
          }));

          // –ï—Å–ª–∏ –æ–Ω–ª–∞–π–Ω, –ø—ã—Ç–∞–µ–º—Å—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π (–Ω–æ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø—Ä–æ—à–ª–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—Ä–µ–º–µ–Ω–∏)
          if (get().isOnline) {
            const now = Date.now();
            const state = get();
            
            if (!state.lastSyncAttempt || (now - state.lastSyncAttempt) >= state.syncCooldown) {
              setTimeout(() => {
                try {
                  get().syncOfflineActions();
                } catch (error) {
                  console.warn("Failed to sync offline actions:", error);
                }
              }, 100);
            } else {
              if (process.env.NODE_ENV !== "production") {
                const remainingTime = Math.ceil((state.syncCooldown - (now - state.lastSyncAttempt)) / 1000);
                console.warn(`‚è∞ Skipping auto-sync, cooldown active for ${remainingTime}s`);
              }
            }
          }
        } catch (error) {
          console.warn("Failed to add action to sync queue:", error);
        }
      },

      // –£–¥–∞–ª–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –∏–∑ –æ—á–µ—Ä–µ–¥–∏
      removeFromSyncQueue: (id: string) => {
        set((state) => ({
          syncQueue: state.syncQueue.filter((action: { id: string }) => action.id !== id),
        }));
      },

      // –û—á–∏—Å—Ç–∫–∞ –æ—á–µ—Ä–µ–¥–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
      clearSyncQueue: () => {
        set({ syncQueue: [] });
      },

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
      checkConnectionQuality: async (): Promise<ConnectionQuality> => {
        try {
          // –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ navigator.onLine
          if (!navigator.onLine) {
            if (process.env.NODE_ENV !== "production") {
              console.warn("üî¥ navigator.onLine = false, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º offline");
            }
            return 'offline';
          }

          if (process.env.NODE_ENV !== "production") {
            console.warn("üìä Checking connection quality...");
          }

          const startTime = Date.now();
          
          // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π API –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
          const controller = new AbortController();
          const timeoutId = setTimeout(() => controller.abort(), 5000); // 5 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç

          try {
            const response = await fetch("/api/ping", {
              method: "GET",
              cache: "no-cache",
              signal: controller.signal,
            });

            clearTimeout(timeoutId);
            const latency = Date.now() - startTime;

            if (response.ok) {
              let quality: ConnectionQuality;
              if (latency < 100) {
                quality = 'excellent';
              } else if (latency < 300) {
                quality = 'good';
              } else if (latency < 1000) {
                quality = 'fair';
              } else {
                quality = 'poor';
              }

              // –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏
              set((state) => ({
                networkMetrics: {
                  ...state.networkMetrics,
                  latency,
                  quality,
                  lastChecked: Date.now(),
                  consecutiveFailures: 0,
                },
              }));

              if (process.env.NODE_ENV !== "production") {
                console.warn(`üìä Connection quality: ${quality} (${latency}ms)`);
              }

              return quality;
            } else {
              throw new Error(`HTTP ${response.status}`);
            }
          } catch (error) {
            clearTimeout(timeoutId);
            throw error;
          }
        } catch (error) {
          // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –Ω–µ—É–¥–∞—á
          set((state) => ({
            networkMetrics: {
              ...state.networkMetrics,
              consecutiveFailures: state.networkMetrics.consecutiveFailures + 1,
              lastChecked: Date.now(),
            },
          }));

          if (process.env.NODE_ENV !== "production") {
            console.warn("üìä Connection quality check failed:", error);
          }

          return 'offline';
        }
      },

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —á–µ—Ä–µ–∑ –≤–Ω–µ—à–Ω–∏–µ —Å–µ—Ä–≤–∏—Å—ã
      checkExternalConnection: async () => {
        try {
          if (process.env.NODE_ENV !== "production") {
            console.warn("üîç Checking external connection...");
          }

          // –£–ª—É—á—à–µ–Ω–Ω–∞—è fallback —Å—Ç—Ä–∞—Ç–µ–≥–∏—è —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º–∏
          const fallbackUrls = [
            { url: "/api/ping", timeout: 3000, priority: 1 }, // –°–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π API - –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç 1
            { url: "https://www.google.com/favicon.ico", timeout: 5000, priority: 2 },
            { url: "https://httpbin.org/status/200", timeout: 5000, priority: 3 },
            { url: "https://api.github.com/zen", timeout: 5000, priority: 4 },
          ];

          // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
          fallbackUrls.sort((a, b) => a.priority - b.priority);

          for (const { url, timeout } of fallbackUrls) {
            try {
              if (process.env.NODE_ENV !== "production") {
                console.warn(`üîç Trying ${url} (timeout: ${timeout}ms)...`);
              }

              const controller = new AbortController();
              const timeoutId = setTimeout(() => controller.abort(), timeout);

              const response = await fetch(url, {
                method: "HEAD",
                cache: "no-cache",
                signal: controller.signal,
                mode: url.startsWith('http') ? "no-cors" : "cors",
              });

              clearTimeout(timeoutId);

              if (response.ok || response.type === 'opaque') { // opaque –¥–ª—è no-cors
                if (process.env.NODE_ENV !== "production") {
                  console.warn(`‚úÖ Connection confirmed via: ${url}`);
                }
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏
                set((state) => ({
                  isActuallyConnected: true,
                  networkMetrics: {
                    ...state.networkMetrics,
                    consecutiveFailures: 0,
                    lastChecked: Date.now(),
                  },
                }));
                
                return true;
              }
            } catch (error) {
              if (error instanceof Error && error.name === "AbortError") {
                if (process.env.NODE_ENV !== "production") {
                  console.warn(`‚è∞ Timeout for ${url}`);
                }
              } else {
                if (process.env.NODE_ENV !== "production") {
                  console.warn(`‚ö†Ô∏è Failed to check ${url}:`, error);
                }
              }
              // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å —Å–ª–µ–¥—É—é—â–∏–º URL
            }
          }

          // –í dev —Ä–µ–∂–∏–º–µ –ø–æ–ª–∞–≥–∞–µ–º—Å—è –Ω–∞ navigator.onLine –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è CORS –ø—Ä–æ–±–ª–µ–º
          if (process.env.NODE_ENV !== "production") {
            console.warn("üîç Dev mode: using navigator.onLine for connection status");
            const navigatorOnline = typeof window !== "undefined" ? navigator.onLine : true;
            set({ isActuallyConnected: navigatorOnline });
            return navigatorOnline;
          }

          // –ï—Å–ª–∏ –≤—Å–µ –∑–∞–ø—Ä–æ—Å—ã –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç, –ø–æ–ª–∞–≥–∞–µ–º—Å—è –Ω–∞ navigator.onLine
          const navigatorOnline = typeof window !== "undefined" ? navigator.onLine : true;
          
          if (process.env.NODE_ENV !== "production") {
            console.warn(`üîÑ All checks failed, using fallback status: ${navigatorOnline} (navigator.onLine)`);
          }

          set({ isActuallyConnected: navigatorOnline });
          return navigatorOnline;
        } catch (error) {
          console.warn("External network check failed:", error);
          set({ isActuallyConnected: false });
          return false;
        }
      },

      // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è offline –¥–µ–π—Å—Ç–≤–∏–π
      syncOfflineActions: async () => {
        try {
          const state = get();
          const now = Date.now();

          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –æ–Ω–ª–∞–π–Ω –∏ –µ—Å—Ç—å —Ä–µ–∞–ª—å–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
          if (!state.isOnline || !state.isActuallyConnected || state.syncQueue.length === 0) {
            return;
          }

          // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–π–º–∞—É—Ç –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
          if (state.lastSyncAttempt && (now - state.lastSyncAttempt) < state.syncCooldown) {
            const remainingTime = Math.ceil((state.syncCooldown - (now - state.lastSyncAttempt)) / 1000);
            if (process.env.NODE_ENV !== "production") {
              console.warn(`‚è∞ Sync cooldown active, waiting ${remainingTime}s before next attempt`);
            }
            return;
          }

          // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø–æ–ø—ã—Ç–∫–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
          set({ lastSyncAttempt: now });

          const actionsToSync = [...state.syncQueue];

          for (const action of actionsToSync) {
            try {
              await syncAction(action);
              // –£–¥–∞–ª—è–µ–º —É—Å–ø–µ—à–Ω–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ
              get().removeFromSyncQueue(action.id);
            } catch (error) {
              // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫
              const updatedAction = { ...action, retryCount: action.retryCount + 1 };

              if (updatedAction.retryCount >= state.maxRetries) {
                // –ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫, —É–¥–∞–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
                get().removeFromSyncQueue(action.id);
                const errorMessage = `Failed to sync ${action.type}: ${error instanceof Error ? error.message : String(error)}`;
                set((state) => ({
                  syncErrors: [...state.syncErrors, errorMessage],
                }));
              } else {
                // –û–±–Ω–æ–≤–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ —Å –Ω–æ–≤—ã–º —Å—á–µ—Ç—á–∏–∫–æ–º –ø–æ–ø—ã—Ç–æ–∫
                set((state) => ({
                  syncQueue: state.syncQueue.map((a) => (a.id === action.id ? updatedAction : a)),
                }));
              }
            }
          }
        } catch (error) {
          console.warn("Error in syncOfflineActions:", error);
        }
      },
    }),
    {
      name: "gafus-offline-store",
      partialize: (state) => ({
        syncQueue: state.syncQueue,
        lastSyncTime: state.lastSyncTime,
        syncErrors: state.syncErrors,
        maxRetries: state.maxRetries,
        lastSyncAttempt: state.lastSyncAttempt,
        syncCooldown: state.syncCooldown,
        networkMetrics: state.networkMetrics,
      }),
    },
  ),
);

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏
function getAdaptiveInterval(consecutiveFailures: number, connectionQuality: ConnectionQuality): number {
  // –ë–∞–∑–æ–≤—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
  const baseIntervals = {
    excellent: 300000,  // 5 –º–∏–Ω—É—Ç
    good: 180000,       // 3 –º–∏–Ω—É—Ç—ã
    fair: 120000,       // 2 –º–∏–Ω—É—Ç—ã
    poor: 60000,        // 1 –º–∏–Ω—É—Ç–∞
    offline: 30000,     // 30 —Å–µ–∫—É–Ω–¥
  };

  let baseInterval = baseIntervals[connectionQuality];
  
  // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–∏ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –Ω–µ—É–¥–∞—á–∞—Ö
  if (consecutiveFailures > 0) {
    const multiplier = Math.min(1 + (consecutiveFailures * 0.5), 3); // –ú–∞–∫—Å–∏–º—É–º 3x
    baseInterval = Math.floor(baseInterval * multiplier);
  }
  
  // –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª 10 —Å–µ–∫—É–Ω–¥, –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π 10 –º–∏–Ω—É—Ç
  return Math.max(10000, Math.min(baseInterval, 600000));
}

// –§—É–Ω–∫—Ü–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è
async function syncAction(action: OfflineAction): Promise<void> {
  switch (action.type) {
    case "step-completion":
      await syncStepCompletion(action.data as StepCompletionData);
      break;
    case "profile-update":
      await syncProfileUpdate(action.data as ProfileUpdateData);
      break;
    case "comment":
      await syncComment(action.data as CommentData);
      break;
    case "rating":
      await syncRating(action.data as RatingData);
      break;
    case "step-status-update":
      await syncStepStatusUpdate(action.data as StepStatusUpdateData);
      break;
    default:
      throw new Error(`Unknown action type: ${action.type}`);
  }
}

// –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —à–∞–≥–∞
async function syncStepCompletion(data: StepCompletionData): Promise<void> {
  await fetch("/api/training/complete-step", {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify(data),
  });
}

// –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
async function syncProfileUpdate(data: ProfileUpdateData): Promise<void> {
  await fetch("/api/profile/update", {
    method: "PUT",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify(data),
  });
}

// –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
async function syncComment(data: CommentData): Promise<void> {
  await fetch("/api/comments/add", {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify(data),
  });
}

// –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Ä–µ–π—Ç–∏–Ω–≥–∞
async function syncRating(data: RatingData): Promise<void> {
  await fetch("/api/ratings/add", {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify(data),
  });
}

// –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å—Ç–∞—Ç—É—Å–∞ —à–∞–≥–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
async function syncStepStatusUpdate(data: StepStatusUpdateData): Promise<void> {
  try {
    // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —à–∞–≥–∞
    const { updateStepStatusServerAction } = await import(
      "@shared/lib/training/updateUserStepStatus"
    );

    // –í—ã–∑—ã–≤–∞–µ–º —Å–µ—Ä–≤–µ—Ä–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
    await updateStepStatusServerAction(
      data.courseId,
      data.day,
      data.stepIndex,
      data.status as TrainingStatus,
      data.stepTitle,
      data.stepOrder,
    );

    if (process.env.NODE_ENV === "development") {
      console.warn("‚úÖ Step status synced successfully:", data);
    }
  } catch (error) {
    console.error("‚ùå Failed to sync step status:", error);
    throw error;
  }
}

// –§—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ store
export function initializeOfflineStore() {
  if (typeof window === "undefined") return;

  if (process.env.NODE_ENV === "development") {
    console.warn("üîß Initializing offline store in development mode...");
    console.warn("üîß This will provide detailed logging for network status detection");
    console.warn("üîß Check browser console for detailed network status information");
  }

  // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—à–∞—Ç–µ–ª–∏ —Å–æ–±—ã—Ç–∏–π —Å–µ—Ç–∏
  window.addEventListener("online", () => {
    if (process.env.NODE_ENV === "development") {
      console.warn("üåê Browser went online");
    }
    useOfflineStore.getState().setOnlineStatus(true);
  });

  window.addEventListener("offline", () => {
    if (process.env.NODE_ENV === "development") {
      console.warn("üåê Browser went offline");
    }
    useOfflineStore.getState().setOnlineStatus(false);
  });

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å —Å–µ—Ç–∏ —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º –Ω–∞—Ç–∏–≤–Ω—ã—Ö API
  const checkNetworkStability = () => {
    try {
      if (process.env.NODE_ENV === "development") {
        console.warn("üì∂ Checking network stability...");
      }

      // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 1: Network Information API (—Å–∞–º—ã–π —Ç–æ—á–Ω—ã–π)
      const connection = (navigator as { connection?: { effectiveType: string } }).connection;

      if (connection) {
        const networkType = connection.effectiveType;

        if (process.env.NODE_ENV === "development") {
          console.warn(`üì∂ Network Information API available: ${networkType}`);
        }

        if (networkType === "4g" || networkType === "3g") {
          useOfflineStore.getState().setNetworkStability(true);
        } else if (networkType === "2g" || networkType === "slow-2g") {
          useOfflineStore.getState().setNetworkStability(false);
        }

        // –ï—Å–ª–∏ –µ—Å—Ç—å Network Information API, –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤–Ω–µ—à–Ω–∏–µ –ø–∏–Ω–≥–∏
        return;
      }

      if (process.env.NODE_ENV === "development") {
        console.warn("üì∂ Network Information API not available, using external checks");
      }

      // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 2: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∞–ª—å–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
      // (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ç–∏)
      if (!useOfflineStore.getState().isActuallyConnected) {
        useOfflineStore
          .getState()
          .checkExternalConnection()
          .then((isConnected) => {
            useOfflineStore.getState().setNetworkStability(isConnected);
          })
          .catch(() => {
            // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
          });
      }
    } catch (error) {
      console.warn("Error checking network stability:", error);
    }
  };

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
  try {
    if (
      (
        navigator as {
          connection?: { addEventListener: (event: string, handler: () => void) => void };
        }
      ).connection
    ) {
      (
        navigator as {
          connection?: { addEventListener: (event: string, handler: () => void) => void };
        }
      ).connection?.addEventListener("change", checkNetworkStability);
    }
  } catch (error) {
    console.warn("Error adding connection change listener:", error);
  }

  // –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º fetch –æ—à–∏–±–∫–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
  try {
    const originalFetch = window.fetch;
    window.fetch = async (...args) => {
      try {
        return await originalFetch(...args);
      } catch (error) {
        // –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ —Å–µ—Ç–∏, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∞–ª—å–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        if (
          error instanceof TypeError &&
          (error.message.includes("fetch") || error.message.includes("network"))
        ) {
          if (process.env.NODE_ENV === "development") {
            console.warn("üåê Fetch error detected, checking external connection...");
          }
          try {
            useOfflineStore.getState().checkExternalConnection();
          } catch {
            // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
          }
        }
        throw error;
      }
    };
  } catch (error) {
    console.warn("Error overriding fetch:", error);
  }

  // –ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
  try {
    let intervalId: NodeJS.Timeout | null = null;
    
    const scheduleNextCheck = () => {
      if (intervalId) {
        clearTimeout(intervalId);
      }
      
      const state = useOfflineStore.getState();
      const adaptiveInterval = getAdaptiveInterval(
        state.networkMetrics.consecutiveFailures,
        state.networkMetrics.quality
      );
      
      if (process.env.NODE_ENV === "development") {
        console.warn(`üîÑ Scheduling next check in ${Math.round(adaptiveInterval / 1000)}s (failures: ${state.networkMetrics.consecutiveFailures}, quality: ${state.networkMetrics.quality})`);
      }
      
      intervalId = setTimeout(() => {
        try {
          const currentState = useOfflineStore.getState();

          // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏:
          // 1. –ù–µ—Ç Network Information API
          // 2. –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ç—å—é
          // 3. –ù–µ—Ç —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
          if (
            !(navigator as { connection?: unknown }).connection ||
            currentState.networkMetrics.consecutiveFailures > 0 ||
            !currentState.isActuallyConnected
          ) {
            if (process.env.NODE_ENV === "development") {
              console.warn(`üîÑ Adaptive periodic check (failures: ${currentState.networkMetrics.consecutiveFailures}, quality: ${currentState.networkMetrics.quality})`);
            }

            currentState
              .checkExternalConnection()
              .then((isConnected) => {
                if (isConnected) {
                  if (process.env.NODE_ENV === "development") {
                    console.warn("‚úÖ Adaptive check successful");
                  }
                } else {
                  if (process.env.NODE_ENV === "development") {
                    console.warn(`‚ùå Adaptive check failed, failure count: ${currentState.networkMetrics.consecutiveFailures}`);
                  }
                }
                
                // –ü–ª–∞–Ω–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
                scheduleNextCheck();
              })
              .catch(() => {
                if (process.env.NODE_ENV === "development") {
                  console.warn(`‚ùå Adaptive check error, failure count: ${currentState.networkMetrics.consecutiveFailures}`);
                }
                
                // –ü–ª–∞–Ω–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
                scheduleNextCheck();
              });
          } else {
            // –ï—Å–ª–∏ –≤—Å–µ —Ö–æ—Ä–æ—à–æ, –ø–ª–∞–Ω–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â—É—é –ø—Ä–æ–≤–µ—Ä–∫—É —Å –±–∞–∑–æ–≤—ã–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º
            scheduleNextCheck();
          }
        } catch {
          // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
          scheduleNextCheck();
        }
      }, adaptiveInterval);
    };
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
    scheduleNextCheck();
  } catch (error) {
    console.warn("Error setting up adaptive connection check:", error);
  }

  // –í dev —Ä–µ–∂–∏–º–µ –¥–µ–ª–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  if (process.env.NODE_ENV === "development") {
    // –í dev —Ä–µ–∂–∏–º–µ –¥–∞–µ–º –±–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é —Å–µ—Ç–∏
    setTimeout(() => {
      try {
        const state = useOfflineStore.getState();
        if (state.isOnline && !state.isActuallyConnected) {
          console.warn("üîß Dev mode: Performing initial network check...");
          state
            .checkExternalConnection()
            .then((isConnected) => {
              console.warn("üîß Dev mode: Network check result:", isConnected);
              if (isConnected) {
                console.warn("üîß Dev mode: Network is actually working, updating status");
              } else {
                console.warn(
                  "üîß Dev mode: Network check failed, may be dev environment restrictions",
                );
              }
            })
            .catch((error) => {
              console.warn("üîß Dev mode: Initial network check failed:", error);
            });
        } else {
          console.warn(
            "üîß Dev mode: Initial network check skipped - online:",
            state.isOnline,
            "actually connected:",
            state.isActuallyConnected,
          );
        }
      } catch (error) {
        console.warn("üîß Dev mode: Error in initial network check:", error);
      }
    }, 2000); // 2 —Å–µ–∫—É–Ω–¥—ã –∑–∞–¥–µ—Ä–∂–∫–∏ –≤ dev —Ä–µ–∂–∏–º–µ
  }
}
