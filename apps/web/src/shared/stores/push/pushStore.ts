// Store –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è push-–ø–æ–¥–ø–∏—Å–∫–∞–º–∏

import { validateVapidPublicKey } from "@gafus/types";
import {
  deleteSubscriptionAction,
  updateSubscriptionAction,
} from "@shared/lib/actions/subscription";
import { create } from "zustand";
import { persist } from "zustand/middleware";

interface PushState {
  subscription: PushSubscription | null;
  hasServerSubscription: boolean | null;
  isLoading: boolean;
  error: string | null;
  disabledByUser: boolean;
  userId: string;

  // –î–µ–π—Å—Ç–≤–∏—è
  setupPushSubscription: (vapidPublicKey: string) => Promise<void>;
  checkServerSubscription: () => Promise<void>;
  removePushSubscription: () => Promise<void>;
  ensureActiveSubscription: () => Promise<void>;
  setDisabledByUser: (disabled: boolean) => void;
  setUserId: (userId: string) => void;
  setLoading: (loading: boolean) => void;
  setError: (error: string | null) => void;

  // –£—Ç–∏–ª–∏—Ç—ã
  isSupported: () => boolean;
}

const urlBase64ToUint8Array = (base64String: string) => {
  const padding = "=".repeat((4 - (base64String.length % 4)) % 4);
  const base64 = (base64String + padding).replace(/-/g, "+").replace(/_/g, "/");
  const rawData = window.atob(base64);
  return new Uint8Array([...rawData].map((char: string) => char.charCodeAt(0)));
};

const isPushSupported = () => {
  return "serviceWorker" in navigator && "PushManager" in window;
};

const isNotificationSupported = () => {
  return typeof Notification !== "undefined";
};

// –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –±—Ä–∞—É–∑–µ—Ä–∞
const isIOS = () => /iPad|iPhone|iPod/.test(navigator.userAgent);
const isSafari = () => /Safari/.test(navigator.userAgent) && !/Chrome/.test(navigator.userAgent);

// Safari-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å —Ç–∞–π–º–∞—É—Ç–∞–º–∏
const getSafariSettings = () => {
  const safari = isSafari();
  const ios = isIOS();
  return {
    isSafari: safari,
    isIOS: ios,
    // Safari-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ —Ç–∞–π–º–∞—É—Ç—ã –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∑–∞–≤–∏—Å–∞–Ω–∏–π
    swTimeoutMs: safari ? 2000 : 15000, // 2 —Å–µ–∫ –¥–ª—è Safari, 15 –¥–ª—è –¥—Ä—É–≥–∏—Ö
    pushTimeoutMs: safari ? 5000 : 10000, // 5 —Å–µ–∫ –¥–ª—è push –æ–ø–µ—Ä–∞—Ü–∏–π –≤ Safari
    useTimeout: safari, // –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–∞–π–º–∞—É—Ç—ã –¥–ª—è Safari
  };
};

// –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ Service Worker —Å —Ç–∞–π–º–∞—É—Ç–æ–º –¥–ª—è Safari
const getServiceWorkerSafely = async (timeoutMs: number) => {
  try {
    const swPromise = navigator.serviceWorker.ready;
    const timeoutPromise = new Promise<ServiceWorkerRegistration>((_, reject) => 
      setTimeout(() => reject(new Error('Service Worker timeout')), timeoutMs)
    );
    
    return await Promise.race([swPromise, timeoutPromise]);
  } catch (timeoutError) {
    console.log(`‚è∞ Service Worker timeout (${timeoutMs}ms), –Ω–æ SW —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —Ñ–æ–Ω–µ`);
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º undefined –µ—Å–ª–∏ —Ç–∞–π–º–∞—É—Ç, –Ω–æ SW –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å
    return undefined;
  }
};

export const usePushStore = create<PushState>()(
  persist(
    (set, get) => ({
      // –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      subscription: null,
      hasServerSubscription: null,
      isLoading: false,
      error: null,
      disabledByUser: false,
      userId: "",

      // –î–µ–π—Å—Ç–≤–∏—è
      setupPushSubscription: async (vapidPublicKey: string) => {
        if (!isPushSupported()) {
          set({ error: "Push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è –≤ —ç—Ç–æ–º –±—Ä–∞—É–∑–µ—Ä–µ" });
          return;
        }

        if (!vapidPublicKey) {
          set({ error: "VAPID public key not available" });
          return;
        }

        if (!validateVapidPublicKey(vapidPublicKey)) {
          set({ error: "Invalid VAPID public key format" });
          return;
        }

        set({ isLoading: true, error: null });

        const settings = getSafariSettings();
        const isStandalone = (navigator as Navigator & { standalone?: boolean }).standalone;

        try {
          console.log("üöÄ setupPushSubscription: –ù–∞—á–∏–Ω–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏");
          console.log(`üåê Browser: ${settings.isIOS ? 'iOS' : 'Other'} ${settings.isSafari ? 'Safari' : 'Other'}`);
          
          // –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ Service Worker —Å —Ç–∞–π–º–∞—É—Ç–æ–º –¥–ª—è Safari
          const registration = await getServiceWorkerSafely(settings.swTimeoutMs);
          
          if (!registration) {
            // Safari: SW –Ω–µ –≥–æ—Ç–æ–≤, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É
            console.log("ü¶Å Safari: Service Worker –Ω–µ –≥–æ—Ç–æ–≤, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É");
          }

          // –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ø–æ–¥–ø–∏—Å–∫—É
          let existingSubscription: PushSubscription | null = null;
          if (registration) {
            try {
              existingSubscription = await registration.pushManager.getSubscription();
            } catch (error) {
              console.warn("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ø–æ–¥–ø–∏—Å–∫—É:", error);
            }
          }

          // –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è —á–∏—Å—Ç–æ–≥–æ —Å—Ç–∞—Ä—Ç–∞
          if (existingSubscription) {
            console.log("üóëÔ∏è –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ø–æ–¥–ø–∏—Å–∫—É");
            try {
              await existingSubscription.unsubscribe();
            } catch (error) {
              console.warn("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –ø–æ–¥–ø–∏—Å–∫–∏:", error);
            }
          }

          // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É
          if (!registration) {
            // Safari: —á–µ—Å—Ç–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ push –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
            if (settings.isSafari) {
              console.log("ü¶Å Safari: SW –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã");
              
              // –î–ª—è Safari —á–µ—Å—Ç–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ push –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
              set({
                subscription: null,
                hasServerSubscription: false,
                isLoading: false,
                error: "Push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã –≤ Safari –Ω–∞ —ç—Ç–æ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥—Ä—É–≥–æ–π –±—Ä–∞—É–∑–µ—Ä.",
              });
              
              console.log("‚ùå Safari: Push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã");
              return;
            } else {
              throw new Error("Service Worker –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω");
            }
          }

          const applicationServerKey = urlBase64ToUint8Array(vapidPublicKey);
          
          // –°–æ–∑–¥–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É —Å —Ç–∞–π–º–∞—É—Ç–æ–º –¥–ª—è Safari
          let subscription: PushSubscription;
          if (settings.useTimeout) {
            // Safari: –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∑–∞–≤–∏—Å–∞–Ω–∏—è
            const pushPromise = registration.pushManager.subscribe({
              userVisibleOnly: true,
              applicationServerKey,
            });
            const pushTimeoutPromise = new Promise<never>((_, reject) => 
              setTimeout(() => reject(new Error('Push subscription timeout')), settings.pushTimeoutMs)
            );
            
            subscription = await Promise.race([pushPromise, pushTimeoutPromise]);
          } else {
            // –î—Ä—É–≥–∏–µ –±—Ä–∞—É–∑–µ—Ä—ã: –æ–±—ã—á–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞
            subscription = await registration.pushManager.subscribe({
              userVisibleOnly: true,
              applicationServerKey,
            });
          }

          const p256dh = subscription.getKey ? subscription.getKey("p256dh") : null;
          const auth = subscription.getKey ? subscription.getKey("auth") : null;

          if (!subscription.endpoint) {
            throw new Error("Subscription has no endpoint");
          }

          if (!p256dh || !auth) {
            throw new Error("Subscription keys are incomplete");
          }

          const p256dhString = btoa(String.fromCharCode(...new Uint8Array(p256dh)));
          const authString = btoa(String.fromCharCode(...new Uint8Array(auth)));

          const userId = get().userId || "";

          await updateSubscriptionAction({
            id: "",
            userId,
            endpoint: subscription.endpoint,
            p256dh: p256dhString,
            auth: authString,
            keys: {
              p256dh: p256dhString,
              auth: authString,
            },
          });

          set({
            subscription,
            hasServerSubscription: true,
            isLoading: false,
            error: null,
          });

          console.log("‚úÖ Push subscription setup completed successfully");
          console.log(`üîó Endpoint: ${subscription.endpoint.substring(0, 50)}...`);
          
        } catch (error) {
          console.error("‚ùå setupPushSubscription: Push subscription setup failed:", error);
          
          let errorMessage = "Unknown error occurred";
          
          if (error instanceof Error) {
            if (error.message.includes("Service Worker")) {
              errorMessage = "–û—à–∏–±–∫–∞ Service Worker. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É.";
            } else if (error.message.includes("timeout")) {
              errorMessage = "–¢–∞–π–º–∞—É—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.";
            } else if (error.message.includes("Subscribe")) {
              errorMessage = "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É.";
            } else {
              errorMessage = error.message;
            }
          }
          
          set({
            error: errorMessage,
            isLoading: false,
          });
        }
      },

      checkServerSubscription: async () => {
        console.log("üöÄ checkServerSubscription: –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –ª–æ–∫–∞–ª—å–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏");
        
        const settings = getSafariSettings();
        console.log(`üåê Browser: ${settings.isIOS ? 'iOS' : 'Other'} ${settings.isSafari ? 'Safari' : 'Other'}`);
        
        try {
          const userId = get().userId;
          if (!userId) {
            console.log("‚ùå checkServerSubscription: No userId, skipping");
            return;
          }

          console.log("üîß checkServerSubscription: Checking local subscription for userId:", userId);
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ, –∞ –Ω–µ –≤ –ë–î
          let hasLocalSubscription = false;
          
          if (isPushSupported()) {
            try {
              // –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ Service Worker —Å —Ç–∞–π–º–∞—É—Ç–æ–º –¥–ª—è Safari
              const registration = await getServiceWorkerSafely(settings.swTimeoutMs);
              if (registration) {
                const subscription = await registration.pushManager.getSubscription();
                hasLocalSubscription = !!subscription;
                console.log("üîç –õ–æ–∫–∞–ª—å–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞–π–¥–µ–Ω–∞:", hasLocalSubscription);
              } else {
                console.log("‚ö†Ô∏è Service Worker –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏");
                hasLocalSubscription = false;
              }
            } catch (error) {
              console.warn("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–æ–∫–∞–ª—å–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É:", error);
              hasLocalSubscription = false;
            }
          }
          
          // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ª–æ–∫–∞–ª—å–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
          console.log("üîß checkServerSubscription: –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ hasServerSubscription:", hasLocalSubscription);
          set({ hasServerSubscription: hasLocalSubscription });
          console.log("‚úÖ checkServerSubscription: –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ª–æ–∫–∞–ª—å–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏");
          
        } catch (error) {
          console.error("‚ùå checkServerSubscription: Unexpected error:", error);
          set({ hasServerSubscription: false });
        }
      },

      removePushSubscription: async () => {
        set({ isLoading: true, error: null });

        const settings = getSafariSettings();
        console.log(`üóëÔ∏è removePushSubscription: –£–¥–∞–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è ${settings.isSafari ? 'Safari' : 'browser'}`);

        try {
          const currentSubscription = get().subscription;
          let endpoint: string | undefined;

          // –ü–æ–ª—É—á–∞–µ–º endpoint –∏–∑ store –∏–ª–∏ service worker
          if (currentSubscription?.endpoint) {
            endpoint = currentSubscription.endpoint;
            console.log(`üîç –ù–∞–π–¥–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –≤ store: ${endpoint.substring(0, 50)}...`);
          } else if (isPushSupported()) {
            try {
              // –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ Service Worker —Å —Ç–∞–π–º–∞—É—Ç–æ–º –¥–ª—è Safari
              const registration = await getServiceWorkerSafely(settings.swTimeoutMs);
              if (registration) {
                const existing = await registration.pushManager.getSubscription();
                if (existing?.endpoint) {
                  endpoint = existing.endpoint;
                  console.log(`üîç –ù–∞–π–¥–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –≤ SW: ${endpoint.substring(0, 50)}...`);
                }
              }
            } catch (error) {
              console.warn("Failed to get existing subscription:", error);
            }
          }

          // –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ —É–¥–∞–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –∏–∑ –≤—Å–µ—Ö –º–µ—Å—Ç
          if (endpoint) {
            console.log(`üîç –£–¥–∞–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É —Å endpoint: ${endpoint.substring(0, 50)}...`);
            
            // 1. –£–¥–∞–ª—è–µ–º –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            try {
              console.log("üóëÔ∏è –£–¥–∞–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –∏–∑ –ë–î...");
              await deleteSubscriptionAction(endpoint);
              console.log("‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –ë–î");
            } catch (error) {
              console.warn("Failed to delete from database:", error);
            }
          } else {
            // Fallback: —É–¥–∞–ª—è–µ–º –≤—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏ –µ—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å endpoint
            try {
              console.warn("Endpoint not found, removing all subscriptions as fallback");
              await deleteSubscriptionAction();
              console.log("‚úÖ –í—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏ —É–¥–∞–ª–µ–Ω—ã –∏–∑ –ë–î");
            } catch (error) {
              console.warn("Failed to delete all subscriptions:", error);
            }
          }

          // 2. –£–¥–∞–ª—è–µ–º –∏–∑ store
          if (get().subscription) {
            try {
              console.log("üóëÔ∏è –£–¥–∞–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –∏–∑ store...");
              await get().subscription!.unsubscribe();
              console.log("‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ store");
            } catch (error) {
              console.warn("Failed to unsubscribe from store:", error);
            }
          }

          // 3. –£–¥–∞–ª—è–µ–º –∏–∑ service worker
          if (isPushSupported()) {
            try {
              const registration = await getServiceWorkerSafely(settings.swTimeoutMs);
              if (registration) {
                const existing = await registration.pushManager.getSubscription();
                if (existing) {
                  console.log("üóëÔ∏è –£–¥–∞–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –∏–∑ Service Worker...");
                  await existing.unsubscribe();
                  console.log("‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ Service Worker");
                }
              }
            } catch (error) {
              console.warn("Failed to unsubscribe from service worker:", error);
            }
          }

          // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
          set({
            subscription: null,
            hasServerSubscription: false,
            isLoading: false,
            disabledByUser: true,
          });

          console.log("‚úÖ removePushSubscription: –ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–µ–Ω–∞");
          
        } catch (error) {
          console.error("‚ùå removePushSubscription: –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏:", error);
          
          let errorMessage = "–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É";
          
          if (error instanceof Error) {
            if (error.message.includes("timeout")) {
              errorMessage = "–¢–∞–π–º–∞—É—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.";
            } else if (error.message.includes("network")) {
              errorMessage = "–û—à–∏–±–∫–∞ —Å–µ—Ç–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É.";
            } else {
              errorMessage = error.message;
            }
          }
          
          set({
            error: errorMessage,
            isLoading: false,
          });
        }
      },

      ensureActiveSubscription: async () => {
        try {
          if (!isPushSupported() || !isNotificationSupported()) return;

          const state = get();
          if (state.disabledByUser) return;

          // –õ–æ–≥–∏–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
          const { getPublicKeyAction } = await import("@shared/lib/actions/publicKey");
          const { publicKey } = await getPublicKeyAction();

          if (publicKey) {
            await get().setupPushSubscription(publicKey);
          }
        } catch (error) {
          console.error("Failed to ensure active subscription:", error);
        }
      },

      setDisabledByUser: (disabled) => {
        set({ disabledByUser: disabled });
        localStorage.setItem("notificationsDisabledByUser", disabled ? "1" : "0");
      },

      setUserId: (userId: string) => {
        set({ userId });
      },

      setLoading: (loading) => {
        set({ isLoading: loading });
      },

      setError: (error) => {
        set({ error });
      },

      // –£—Ç–∏–ª–∏—Ç—ã
      isSupported: () => {
        return isPushSupported();
      },
    }),
    {
      name: "push-storage",
      partialize: (state) => ({
        hasServerSubscription: state.hasServerSubscription,
        disabledByUser: state.disabledByUser,
        userId: state.userId,
      }),
    },
  ),
);
