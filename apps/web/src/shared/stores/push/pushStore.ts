// Store –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è push-–ø–æ–¥–ø–∏—Å–∫–∞–º–∏

import { validateVapidPublicKey } from "@gafus/types";
import {
  deleteSubscriptionAction,
  updateSubscriptionAction,
} from "@shared/lib/actions/subscription";
import { getUserSubscriptionStatus } from "@shared/lib/savePushSubscription/getUserSubscriptionStatus";
import { create } from "zustand";
import { persist } from "zustand/middleware";

interface PushState {
  subscription: PushSubscription | null;
  hasServerSubscription: boolean | null;
  isLoading: boolean;
  error: string | null;
  disabledByUser: boolean;
  userId: string;

  // –î–µ–π—Å—Ç–≤–∏—è
  setupPushSubscription: (vapidPublicKey: string) => Promise<void>;
  checkServerSubscription: () => Promise<void>;
  removePushSubscription: () => Promise<void>;
  ensureActiveSubscription: () => Promise<void>;
  setDisabledByUser: (disabled: boolean) => void;
  setUserId: (userId: string) => void;
  setLoading: (loading: boolean) => void;
  setError: (error: string | null) => void;

  // –£—Ç–∏–ª–∏—Ç—ã
  isSupported: () => boolean;
}

const urlBase64ToUint8Array = (base64String: string) => {
  const padding = "=".repeat((4 - (base64String.length % 4)) % 4);
  const base64 = (base64String + padding).replace(/-/g, "+").replace(/_/g, "/");
  const rawData = window.atob(base64);
  return new Uint8Array([...rawData].map((char: string) => char.charCodeAt(0)));
};

const isPushSupported = () => {
  return "serviceWorker" in navigator && "PushManager" in window;
};

const isNotificationSupported = () => {
  return typeof Notification !== "undefined";
};

// –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –±—Ä–∞—É–∑–µ—Ä–∞
const isIOS = () => /iPad|iPhone|iPod/.test(navigator.userAgent);
const isSafari = () => /Safari/.test(navigator.userAgent) && !/Chrome/.test(navigator.userAgent);

// Safari-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
const getSafariSettings = () => {
  const safari = isSafari();
  const ios = isIOS();
  return {
    isSafari: safari,
    isIOS: ios,
    timeoutMs: safari ? 25000 : 15000, // 25 —Å–µ–∫ –¥–ª—è Safari, 15 –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö
    maxRetries: safari ? 2 : 1, // 2 –ø–æ–ø—ã—Ç–∫–∏ –¥–ª—è Safari
    retryDelayMs: safari ? 2000 : 0, // 2 —Å–µ–∫ –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è Safari
  };
};

export const usePushStore = create<PushState>()(
  persist(
    (set, get) => ({
      // –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      subscription: null,
      hasServerSubscription: null,
      isLoading: false,
      error: null,
      disabledByUser: false,
      userId: "",

      // –î–µ–π—Å—Ç–≤–∏—è
      setupPushSubscription: async (vapidPublicKey: string) => {
        if (!isPushSupported()) {
          set({ error: "Push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è –≤ —ç—Ç–æ–º –±—Ä–∞—É–∑–µ—Ä–µ" });
          return;
        }

        if (!vapidPublicKey) {
          set({ error: "VAPID public key not available" });
          return;
        }

        if (!validateVapidPublicKey(vapidPublicKey)) {
          set({ error: "Invalid VAPID public key format" });
          return;
        }

        set({ isLoading: true, error: null });

        // Safari-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        const settings = getSafariSettings();
        const isStandalone = (navigator as Navigator & { standalone?: boolean }).standalone;

        try {
          console.log("üöÄ setupPushSubscription: –ù–∞—á–∏–Ω–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏");
          console.log(`üåê Browser: ${settings.isIOS ? 'iOS' : 'Other'} ${settings.isSafari ? 'Safari' : 'Other'}`);
          
          // –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è Safari
          if (settings.isIOS && settings.isSafari) {
            console.log("üçé iOS Safari detected");
            
            // Safari —Ç—Ä–µ–±—É–µ—Ç PWA —Ä–µ–∂–∏–º –¥–ª—è push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            if (!isStandalone) {
              const errorMessage = "–î–ª—è push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ Safari –¥–æ–±–∞–≤—å—Ç–µ —Å–∞–π—Ç –≤ –≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –∫–∞–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ";
              console.warn("‚ö†Ô∏è Safari: PWA —Ä–µ–∂–∏–º –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω");
              set({ 
                isLoading: false, 
                error: errorMessage 
              });
              return;
            }
            
            console.log("‚úÖ Safari: PWA —Ä–µ–∂–∏–º –∞–∫—Ç–∏–≤–µ–Ω, —Å–æ–∑–¥–∞–µ–º APNS –ø–æ–¥–ø–∏—Å–∫—É");
          }

          const registration = await navigator.serviceWorker.ready;
          const existingSubscription = await registration.pushManager.getSubscription();

          // –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è —á–∏—Å—Ç–æ–≥–æ —Å—Ç–∞—Ä—Ç–∞
          if (existingSubscription) {
            console.log("üóëÔ∏è –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ø–æ–¥–ø–∏—Å–∫—É");
            await existingSubscription.unsubscribe();
            // –î–∞–µ–º –≤—Ä–µ–º—è –±—Ä–∞—É–∑–µ—Ä—É –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å
            await new Promise(resolve => setTimeout(resolve, 1000));
          }

          const applicationServerKey = urlBase64ToUint8Array(vapidPublicKey);
          
          // –°–æ–∑–¥–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É —Å –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–º —Ç–∞–π–º–∞—É—Ç–æ–º
          const subscriptionPromise = (async () => {
            const subscription = await registration.pushManager.subscribe({
              userVisibleOnly: true,
              applicationServerKey,
            });

            const p256dh = subscription.getKey ? subscription.getKey("p256dh") : null;
            const auth = subscription.getKey ? subscription.getKey("auth") : null;

            if (!subscription.endpoint) {
              throw new Error("Subscription has no endpoint");
            }

            if (!p256dh || !auth) {
              throw new Error("Subscription keys are incomplete");
            }

            // –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ endpoint –¥–ª—è Safari
            if (settings.isIOS && settings.isSafari) {
              const isAPNSEndpoint = subscription.endpoint.includes('web.push.apple.com');
              console.log(`üîç Safari endpoint check: ${isAPNSEndpoint ? 'APNS' : 'FCM'}`);
              
              if (!isAPNSEndpoint) {
                console.warn("‚ö†Ô∏è Safari —Å–æ–∑–¥–∞–ª FCM endpoint –≤–º–µ—Å—Ç–æ APNS!");
                console.log("üîß –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–æ–∑–¥–∞–µ–º APNS –ø–æ–¥–ø–∏—Å–∫—É...");
                
                // –£–¥–∞–ª—è–µ–º FCM –ø–æ–¥–ø–∏—Å–∫—É
                await subscription.unsubscribe();
                await new Promise(resolve => setTimeout(resolve, 1000));
                
                // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–æ–∑–¥–∞–µ–º APNS –ø–æ–¥–ø–∏—Å–∫—É
                let apnsSubscription: PushSubscription | null = null;
                let attempts = 0;
                const maxAttempts = 3;
                
                while (attempts < maxAttempts && !apnsSubscription) {
                  attempts++;
                  console.log(`üîÑ –ü–æ–ø—ã—Ç–∫–∞ ${attempts}/${maxAttempts} —Å–æ–∑–¥–∞–Ω–∏—è APNS –ø–æ–¥–ø–∏—Å–∫–∏...`);
                  
                  try {
                    apnsSubscription = await registration.pushManager.subscribe({
                      userVisibleOnly: true,
                      applicationServerKey,
                    });
                    
                    if (apnsSubscription.endpoint.includes('web.push.apple.com')) {
                      console.log("‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ APNS –ø–æ–¥–ø–∏—Å–∫–∞ –¥–ª—è Safari!");
                      break;
                    } else {
                      console.warn(`‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ ${attempts}: —Å–æ–∑–¥–∞–Ω ${apnsSubscription.endpoint.includes('fcm.googleapis.com') ? 'FCM' : '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π'} endpoint`);
                      await apnsSubscription.unsubscribe();
                      await new Promise(resolve => setTimeout(resolve, 1000));
                      apnsSubscription = null;
                    }
                  } catch (error) {
                    console.warn(`‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ ${attempts} –Ω–µ —É–¥–∞–ª–∞—Å—å:`, error);
                    await new Promise(resolve => setTimeout(resolve, 1000));
                  }
                }
                
                if (apnsSubscription && apnsSubscription.endpoint.includes('web.push.apple.com')) {
                  // –ò—Å–ø–æ–ª—å–∑—É–µ–º —É—Å–ø–µ—à–Ω—É—é APNS –ø–æ–¥–ø–∏—Å–∫—É
                  const apnsP256dh = apnsSubscription.getKey ? apnsSubscription.getKey("p256dh") : null;
                  const apnsAuth = apnsSubscription.getKey ? apnsSubscription.getKey("auth") : null;
                  
                  if (apnsP256dh && apnsAuth) {
                    const p256dhString = btoa(String.fromCharCode(...new Uint8Array(apnsP256dh)));
                    const authString = btoa(String.fromCharCode(...new Uint8Array(apnsAuth)));
                    
                    const userId = get().userId || "";
                    
                    await updateSubscriptionAction({
                      id: "",
                      userId,
                      endpoint: apnsSubscription.endpoint,
                      p256dh: p256dhString,
                      auth: authString,
                      keys: {
                        p256dh: p256dhString,
                        auth: authString,
                      },
                    });

                    set({
                      subscription: apnsSubscription,
                      hasServerSubscription: true,
                      isLoading: false,
                      error: null,
                    });

                    console.log("‚úÖ Safari APNS push subscription setup completed successfully");
                    console.log(`üîó APNS Endpoint: ${apnsSubscription.endpoint.substring(0, 50)}...`);
                    return;
                  }
                }
                
                // –ï—Å–ª–∏ APNS –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback
                console.warn("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å APNS –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è Safari, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback");
                throw new Error("Failed to create APNS subscription for Safari");
              }
            }

            // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ–∑–¥–∞–Ω–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É (APNS –¥–ª—è Safari –∏–ª–∏ FCM –¥–ª—è –¥—Ä—É–≥–∏—Ö)
            const p256dhString = btoa(String.fromCharCode(...new Uint8Array(p256dh)));
            const authString = btoa(String.fromCharCode(...new Uint8Array(auth)));

            const userId = get().userId || "";

            await updateSubscriptionAction({
              id: "",
              userId,
              endpoint: subscription.endpoint,
              p256dh: p256dhString,
              auth: authString,
              keys: {
                p256dh: p256dhString,
                auth: authString,
              },
            });

            set({
              subscription,
              hasServerSubscription: true,
              isLoading: false,
              error: null,
            });

            console.log("‚úÖ Push subscription setup completed successfully");
            console.log(`üîó Endpoint: ${subscription.endpoint.substring(0, 50)}...`);
            
            if (settings.isIOS && settings.isSafari) {
              console.log("üçé Safari APNS –ø–æ–¥–ø–∏—Å–∫–∞ —Å–æ–∑–¥–∞–Ω–∞. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–∞!");
            }
          })();

          // –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π —Ç–∞–π–º–∞—É—Ç –¥–ª—è Safari
          const timeoutPromise = new Promise((_, reject) => {
            setTimeout(() => {
              reject(new Error(`Setup push subscription timeout in ${settings.isSafari ? 'Safari' : 'browser'}`));
            }, settings.timeoutMs);
          });

          await Promise.race([subscriptionPromise, timeoutPromise]);
          
        } catch (error) {
          console.error("‚ùå setupPushSubscription: Push subscription setup failed:", error);
          
          let errorMessage = "Unknown error occurred";
          
          if (error instanceof Error) {
            if (error.message.includes("timeout")) {
              errorMessage = settings.isSafari 
                ? "–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –≤ Safari. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
                : "–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.";
              console.warn(`‚ö†Ô∏è ${settings.isSafari ? 'Safari' : 'Browser'} timeout - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π`);
            } else if (error.message.includes("APNS")) {
              errorMessage = "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è Safari. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–∞.";
              console.warn("‚ö†Ô∏è Safari: APNS –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–µ —Å–æ–∑–¥–∞–Ω–∞");
            } else if (error.message.includes("Service Worker")) {
              errorMessage = "–û—à–∏–±–∫–∞ Service Worker. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É.";
            } else if (error.message.includes("Subscribe")) {
              errorMessage = "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É.";
            } else {
              errorMessage = error.message;
            }
          }
          
          // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è iOS Safari
          if (settings.isIOS && settings.isSafari) {
            if (errorMessage.includes("timeout")) {
              errorMessage = "–í iOS Safari —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –º–æ–≥—É—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –º–µ–¥–ª–µ–Ω–Ω–æ. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–∞.";
            } else if (errorMessage.includes("APNS")) {
              errorMessage = "–í iOS Safari —Ç—Ä–µ–±—É–µ—Ç—Å—è PWA —Ä–µ–∂–∏–º –¥–ª—è push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π. –î–æ–±–∞–≤—å—Ç–µ —Å–∞–π—Ç –≤ –≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω.";
            }
          }
          
          set({
            error: errorMessage,
            isLoading: false,
          });
        }
      },

      checkServerSubscription: async () => {
        console.log("üöÄ checkServerSubscription: –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Å–µ—Ä–≤–µ—Ä–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏");
        
        const settings = getSafariSettings();
        console.log(`üåê Browser: ${settings.isIOS ? 'iOS' : 'Other'} ${settings.isSafari ? 'Safari' : 'Other'}`);
        console.log(`‚è∞ checkServerSubscription: –¢–∞–π–º–∞—É—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: ${settings.timeoutMs}ms`);
        
        let timeoutId: NodeJS.Timeout | undefined;
        
        try {
          const userId = get().userId;
          if (!userId) {
            console.log("‚ùå checkServerSubscription: No userId, skipping");
            return;
          }

          console.log("üîß checkServerSubscription: Checking subscription for userId:", userId);
          
          // –ò—Å–ø–æ–ª—å–∑—É–µ–º AbortController –¥–ª—è –ª—É—á—à–µ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—è —Ç–∞–π–º–∞—É—Ç–æ–≤
          const controller = new AbortController();
          timeoutId = setTimeout(() => controller.abort(), settings.timeoutMs);
          
          try {
            // Progressive enhancement: —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –±—ã—Å—Ç—Ä—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
            const status = await getUserSubscriptionStatus();
            console.log("‚úÖ checkServerSubscription: Server subscription status checked:", status);
            
            // –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è Safari - –ø—Ä–æ–≤–µ—Ä—è–µ–º endpoint —Ç–∏–ø
            if (settings.isSafari && status.hasSubscription) {
              console.log("üîç Safari: –ü—Ä–æ–≤–µ—Ä—è–µ–º endpoint —Ç–∏–ø...");
              
              try {
                const registration = await navigator.serviceWorker.ready;
                const subscription = await registration.pushManager.getSubscription();
                
                if (subscription) {
                  const isAPNSEndpoint = subscription.endpoint.includes('web.push.apple.com');
                  console.log(`üîç Safari endpoint: ${isAPNSEndpoint ? 'APNS' : 'FCM'}`);
                  
                  if (!isAPNSEndpoint) {
                    console.warn("‚ö†Ô∏è Safari: –ù–∞–π–¥–µ–Ω–∞ FCM –ø–æ–¥–ø–∏—Å–∫–∞ –≤–º–µ—Å—Ç–æ APNS!");
                    console.log("üîß Safari: FCM –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º hasSubscription: false");
                    
                    // –î–ª—è Safari FCM endpoint = –Ω–µ—Ä–∞–±–æ—á–∞—è –ø–æ–¥–ø–∏—Å–∫–∞
                    set({ hasServerSubscription: false });
                    return;
                  } else {
                    console.log("‚úÖ Safari: APNS endpoint –Ω–∞–π–¥–µ–Ω, –ø–æ–¥–ø–∏—Å–∫–∞ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å");
                  }
                } else {
                  console.warn("‚ö†Ô∏è Safari: –ü–æ–¥–ø–∏—Å–∫–∞ –≤ –ë–î –µ—Å—Ç—å, –Ω–æ –≤ –±—Ä–∞—É–∑–µ—Ä–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞");
                  set({ hasServerSubscription: false });
                  return;
                }
              } catch (error) {
                console.warn("‚ö†Ô∏è Safari: –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ endpoint:", error);
                // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º —Å–µ—Ä–≤–µ—Ä–∞
              }
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            console.log("üîß checkServerSubscription: –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ hasServerSubscription:", status.hasSubscription);
            set({ hasServerSubscription: status.hasSubscription });
            console.log("‚úÖ checkServerSubscription: –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ");
            
          } catch (error) {
            // Graceful degradation –¥–ª—è Safari
            if (settings.isSafari) {
              console.warn("‚ö†Ô∏è Safari: –ü–µ—Ä–≤–∞—è –ø–æ–ø—ã—Ç–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å, –ø—Ä–æ–±—É–µ–º retry –ª–æ–≥–∏–∫—É");
              
              // Retry –ª–æ–≥–∏–∫–∞ –¥–ª—è Safari —Å exponential backoff
              let lastError: unknown = null;
              
              for (let attempt = 1; attempt <= settings.maxRetries; attempt++) {
                try {
                  console.log(`üîß checkServerSubscription: –ü–æ–ø—ã—Ç–∫–∞ ${attempt}/${settings.maxRetries}`);
                  
                  // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π AbortController –¥–ª—è –∫–∞–∂–¥–æ–π –ø–æ–ø—ã—Ç–∫–∏
                  const retryController = new AbortController();
                  const retryTimeoutId = setTimeout(() => retryController.abort(), settings.timeoutMs);
                  
                  try {
                    const status = await getUserSubscriptionStatus();
                    console.log("‚úÖ checkServerSubscription: Retry —É—Å–ø–µ—à–µ–Ω:", status);
                    
                    set({ hasServerSubscription: status.hasSubscription });
                    clearTimeout(retryTimeoutId);
                    return; // –£—Å–ø–µ—à–Ω–æ, –≤—ã—Ö–æ–¥–∏–º
                    
                  } catch (retryError) {
                    lastError = retryError;
                    clearTimeout(retryTimeoutId);
                    console.warn(`‚ö†Ô∏è checkServerSubscription: –ü–æ–ø—ã—Ç–∫–∞ ${attempt} –Ω–µ —É–¥–∞–ª–∞—Å—å:`, retryError);
                    
                    if (attempt < settings.maxRetries) {
                      // Exponential backoff –¥–ª—è Safari
                      const delayMs = settings.retryDelayMs * Math.pow(2, attempt - 1);
                      console.log(`‚è≥ checkServerSubscription: –ñ–¥–µ–º ${delayMs}ms –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π...`);
                      await new Promise(resolve => setTimeout(resolve, delayMs));
                    }
                  }
                } catch (retryError) {
                  lastError = retryError;
                  console.warn(`‚ö†Ô∏è checkServerSubscription: –û—à–∏–±–∫–∞ –≤ retry –ª–æ–≥–∏–∫–µ:`, retryError);
                }
              }
              
              // –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã –¥–ª—è Safari
              console.error("‚ùå checkServerSubscription: –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã –¥–ª—è Safari");
              console.warn("‚ö†Ô∏è Safari: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º hasServerSubscription: false –∏–∑-–∑–∞ –æ—à–∏–±–æ–∫");
              set({ hasServerSubscription: false });
              
            } else {
              // –î–ª—è –¥—Ä—É–≥–∏—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤ –ø—Ä–æ—Å—Ç–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º false
              console.error("‚ùå checkServerSubscription: Failed for non-Safari browser:", error);
              set({ hasServerSubscription: false });
            }
          }
          
        } catch (error) {
          console.error("‚ùå checkServerSubscription: Unexpected error:", error);
          set({ hasServerSubscription: false });
        } finally {
          if (timeoutId) clearTimeout(timeoutId);
        }
      },

      removePushSubscription: async () => {
        set({ isLoading: true, error: null });


        const settings = getSafariSettings();
        console.log(`üóëÔ∏è removePushSubscription: –£–¥–∞–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è ${settings.isSafari ? 'Safari' : 'browser'}`);

        try {
          const currentSubscription = get().subscription;
          let endpoint: string | undefined;

          if (currentSubscription?.endpoint) {
            endpoint = currentSubscription.endpoint;
            console.log(`üîç –ù–∞–π–¥–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –≤ store: ${endpoint.substring(0, 50)}...`);
          } else if (isPushSupported()) {
            // –ï—Å–ª–∏ –Ω–µ—Ç —Ç–µ–∫—É—â–µ–π –ø–æ–¥–ø–∏—Å–∫–∏ –≤ store, –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–∑ service worker
            try {
              const registration = await navigator.serviceWorker.ready;
              const existing = await registration.pushManager.getSubscription();
              if (existing?.endpoint) {
                endpoint = existing.endpoint;
                console.log(`üîç –ù–∞–π–¥–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –≤ SW: ${endpoint.substring(0, 50)}...`);
              }
            } catch (error) {
              console.warn("Failed to get existing subscription:", error);
            }
          }

          // Safari-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω–∞—è –ª–æ–≥–∏–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è
          if (settings.isSafari && endpoint) {
            const isAPNSEndpoint = endpoint.includes('web.push.apple.com');
            console.log(`üçé Safari: –£–¥–∞–ª—è–µ–º ${isAPNSEndpoint ? 'APNS' : 'FCM'} –ø–æ–¥–ø–∏—Å–∫—É`);
            
            if (!isAPNSEndpoint) {
              console.warn("‚ö†Ô∏è Safari: –£–¥–∞–ª—è–µ–º –Ω–µ—Ä–∞–±–æ—á—É—é FCM –ø–æ–¥–ø–∏—Å–∫—É");
            }
          }

          // –£–¥–∞–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (—Ç–æ–ª—å–∫–æ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞)
          if (endpoint) {
            console.log("üóëÔ∏è –£–¥–∞–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –∏–∑ –ë–î...");
            await deleteSubscriptionAction(endpoint);
            console.log("‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –ë–î");
          } else {
            // Fallback: —É–¥–∞–ª—è–µ–º –≤—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏ –µ—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å endpoint
            console.warn("Endpoint not found, removing all subscriptions as fallback");
            await deleteSubscriptionAction();
            console.log("‚úÖ –í—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏ —É–¥–∞–ª–µ–Ω—ã –∏–∑ –ë–î");
          }

          // –£–¥–∞–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –∏–∑ –±—Ä–∞—É–∑–µ—Ä–∞
          if (get().subscription) {
            try {
              console.log("üóëÔ∏è –£–¥–∞–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –∏–∑ store...");
              await get().subscription!.unsubscribe();
              console.log("‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ store");
            } catch (error) {
              console.warn("Failed to unsubscribe from push subscription:", error);
            }
          }

          if (isPushSupported()) {
            try {
              const registration = await navigator.serviceWorker.ready;
              const existing = await registration.pushManager.getSubscription();
              if (existing) {
                try {
                  console.log("üóëÔ∏è –£–¥–∞–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –∏–∑ Service Worker...");
                  await existing.unsubscribe();
                  console.log("‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ Service Worker");
                } catch (error) {
                  console.warn("Failed to unsubscribe from existing push subscription:", error);
                }
              }
            } catch (error) {
              console.warn("Failed to unsubscribe from existing push subscription:", error);
            }
          }

          set({
            subscription: null,
            hasServerSubscription: false,
            isLoading: false,
            disabledByUser: true,
          });

          console.log("‚úÖ removePushSubscription: –ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–µ–Ω–∞");
          
        } catch (error) {
          console.error("‚ùå removePushSubscription: –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏:", error);
          
          let errorMessage = "–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É";
          
          if (error instanceof Error) {
            if (error.message.includes("timeout")) {
              errorMessage = settings.isSafari 
                ? "–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –≤ Safari. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
                : "–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.";
            } else if (error.message.includes("network")) {
              errorMessage = "–û—à–∏–±–∫–∞ —Å–µ—Ç–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É.";
            } else {
              errorMessage = error.message;
            }
          }
          
          set({
            error: errorMessage,
            isLoading: false,
          });
        }
      },

      ensureActiveSubscription: async () => {
        try {
          if (!isPushSupported() || !isNotificationSupported()) return;

          const state = get();
          if (state.disabledByUser) return;

          // –õ–æ–≥–∏–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
          const { getPublicKeyAction } = await import("@shared/lib/actions/publicKey");
          const { publicKey } = await getPublicKeyAction();

          if (publicKey) {
            await get().setupPushSubscription(publicKey);
          }
        } catch (error) {
          console.error("Failed to ensure active subscription:", error);
        }
      },

      setDisabledByUser: (disabled) => {
        set({ disabledByUser: disabled });
        localStorage.setItem("notificationsDisabledByUser", disabled ? "1" : "0");
      },

      setUserId: (userId: string) => {
        set({ userId });
      },

      setLoading: (loading) => {
        set({ isLoading: loading });
      },

      setError: (error) => {
        set({ error });
      },

      // –£—Ç–∏–ª–∏—Ç—ã
      isSupported: () => {
        return isPushSupported();
      },
    }),
    {
      name: "push-storage",
      partialize: (state) => ({
        hasServerSubscription: state.hasServerSubscription,
        disabledByUser: state.disabledByUser,
        userId: state.userId,
      }),
    },
  ),
);
