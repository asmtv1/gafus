// Store –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è push-–ø–æ–¥–ø–∏—Å–∫–∞–º–∏

import { validateVapidPublicKey } from "@gafus/types";
import {
  deleteSubscriptionAction,
  updateSubscriptionAction,
} from "@shared/lib/actions/subscription";
import { getUserSubscriptionStatus } from "@shared/lib/savePushSubscription/getUserSubscriptionStatus";
import { create } from "zustand";
import { persist } from "zustand/middleware";

interface PushState {
  subscription: PushSubscription | null;
  hasServerSubscription: boolean | null;
  isLoading: boolean;
  error: string | null;
  disabledByUser: boolean;
  userId: string;

  // –î–µ–π—Å—Ç–≤–∏—è
  setupPushSubscription: (vapidPublicKey: string) => Promise<void>;
  checkServerSubscription: () => Promise<void>;
  removePushSubscription: () => Promise<void>;
  ensureActiveSubscription: () => Promise<void>;
  setDisabledByUser: (disabled: boolean) => void;
  setUserId: (userId: string) => void;
  setLoading: (loading: boolean) => void;
  setError: (error: string | null) => void;

  // –£—Ç–∏–ª–∏—Ç—ã
  isSupported: () => boolean;
}

const urlBase64ToUint8Array = (base64String: string) => {
  const padding = "=".repeat((4 - (base64String.length % 4)) % 4);
  const base64 = (base64String + padding).replace(/-/g, "+").replace(/_/g, "/");
  const rawData = window.atob(base64);
  return new Uint8Array([...rawData].map((char: string) => char.charCodeAt(0)));
};

const isPushSupported = () => {
  return "serviceWorker" in navigator && "PushManager" in window;
};

const isNotificationSupported = () => {
  return typeof Notification !== "undefined";
};

export const usePushStore = create<PushState>()(
  persist(
    (set, get) => ({
      // –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      subscription: null,
      hasServerSubscription: null,
      isLoading: false,
      error: null,
      disabledByUser: false,
      userId: "",

      // –î–µ–π—Å—Ç–≤–∏—è
      setupPushSubscription: async (vapidPublicKey: string) => {
        if (!isPushSupported()) {
          set({ error: "Push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è –≤ —ç—Ç–æ–º –±—Ä–∞—É–∑–µ—Ä–µ" });
          return;
        }

        if (!vapidPublicKey) {
          set({ error: "VAPID public key not available" });
          return;
        }

        if (!validateVapidPublicKey(vapidPublicKey)) {
          set({ error: "Invalid VAPID public key format" });
          return;
        }

        set({ isLoading: true, error: null });

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º Safari –Ω–∞ iOS –≤ –Ω–∞—á–∞–ª–µ —Ñ—É–Ω–∫—Ü–∏–∏
        const isIOS = /iPad|iPhone|iPod/.test(navigator.userAgent);
        const isSafari = /Safari/.test(navigator.userAgent) && !/Chrome/.test(navigator.userAgent);
        const isStandalone = (navigator as Navigator & { standalone?: boolean }).standalone;

        try {
          const registration = await navigator.serviceWorker.ready;
          const existingSubscription = await registration.pushManager.getSubscription();

          // –ù–ï —É–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ø–æ–¥–ø–∏—Å–∫—É - –ø–æ–∑–≤–æ–ª—è–µ–º –∏–º–µ—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–¥–ø–∏—Å–æ–∫
          // if (existingSubscription) {
          //   await existingSubscription.unsubscribe();
          // }

          const applicationServerKey = urlBase64ToUint8Array(vapidPublicKey);
          
          if (isIOS && isSafari) {
            console.log("üçé iOS Safari detected");
            
            // –î–ª—è Safari –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω–æ –±—ã—Ç—å –≤ PWA —Ä–µ–∂–∏–º–µ
            if (!isStandalone) {
              set({ 
                isLoading: false, 
                error: "–î–ª—è push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ Safari –¥–æ–±–∞–≤—å—Ç–µ —Å–∞–π—Ç –≤ –≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –∫–∞–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ" 
              });
              return;
            }
            
            console.log("‚úÖ PWA —Ä–µ–∂–∏–º –∞–∫—Ç–∏–≤–µ–Ω, —Å–æ–∑–¥–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è Safari");
          }

          const subscription = await registration.pushManager.subscribe({
            userVisibleOnly: true,
            applicationServerKey,
          });

          const p256dh = subscription.getKey ? subscription.getKey("p256dh") : null;
          const auth = subscription.getKey ? subscription.getKey("auth") : null;

          if (!subscription.endpoint) {
            throw new Error("Subscription has no endpoint");
          }

          if (!p256dh || !auth) {
            throw new Error("Subscription keys are incomplete");
          }

          // –ü—Ä–æ–≤–µ—Ä—è–µ–º endpoint –¥–ª—è Safari
          if (isIOS && isSafari) {
            const isAPNSEndpoint = subscription.endpoint.includes('web.push.apple.com');
            if (!isAPNSEndpoint) {
              console.warn("‚ö†Ô∏è Safari —Å–æ–∑–¥–∞–ª FCM endpoint –≤–º–µ—Å—Ç–æ APNS!");
              console.warn("üîß –ü–æ–ø—Ä–æ–±—É–µ–º –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–æ–∑–¥–∞—Ç—å APNS –ø–æ–¥–ø–∏—Å–∫—É...");
              
              // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–æ–∑–¥–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è Safari
              try {
                await subscription.unsubscribe();
                
                // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É —Å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–º APNS
                const safariSubscription = await registration.pushManager.subscribe({
                  userVisibleOnly: true,
                  applicationServerKey,
                });
                
                if (safariSubscription.endpoint.includes('web.push.apple.com')) {
                  console.log("‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ APNS –ø–æ–¥–ø–∏—Å–∫–∞ –¥–ª—è Safari!");
                  // –ò—Å–ø–æ–ª—å–∑—É–µ–º Safari –ø–æ–¥–ø–∏—Å–∫—É
                  const safariP256dh = safariSubscription.getKey ? safariSubscription.getKey("p256dh") : null;
                  const safariAuth = safariSubscription.getKey ? safariSubscription.getKey("auth") : null;
                  
                  if (safariP256dh && safariAuth) {
                    const p256dhString = btoa(String.fromCharCode(...new Uint8Array(safariP256dh)));
                    const authString = btoa(String.fromCharCode(...new Uint8Array(safariAuth)));
                    
                    const userId = get().userId || "";
                    
                    await updateSubscriptionAction({
                      id: "",
                      userId,
                      endpoint: safariSubscription.endpoint,
                      p256dh: p256dhString,
                      auth: authString,
                      keys: {
                        p256dh: p256dhString,
                        auth: authString,
                      },
                    });
                    
                    set({
                      subscription: safariSubscription,
                      hasServerSubscription: true,
                      isLoading: false,
                      error: null,
                    });
                    
                    console.log("‚úÖ Safari APNS –ø–æ–¥–ø–∏—Å–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!");
                    return;
                  }
                }
              } catch (safariError) {
                console.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å APNS –ø–æ–¥–ø–∏—Å–∫—É:", safariError);
              }
            } else {
              console.log("‚úÖ Safari —Å–æ–∑–¥–∞–ª –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π APNS endpoint");
            }
          }

          const p256dhString = btoa(String.fromCharCode(...new Uint8Array(p256dh)));
          const authString = btoa(String.fromCharCode(...new Uint8Array(auth)));

          // –ü–æ–ª—É—á–∞–µ–º userId –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–ª–∏ –∏–∑ –¥—Ä—É–≥–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
          const userId = get().userId || "";
          
          await updateSubscriptionAction({
            id: "",
            userId,
            endpoint: subscription.endpoint,
            p256dh: p256dhString,
            auth: authString,
            keys: {
              p256dh: p256dhString,
              auth: authString,
            },
          });

          set({
            subscription,
            hasServerSubscription: true,
            isLoading: false,
            error: null,
          });

          console.log("‚úÖ Push subscription setup completed successfully");
          console.log(`üîó Endpoint: ${subscription.endpoint.substring(0, 50)}...`);
          
          if (isIOS && isSafari) {
            console.log("üçé Safari –ø–æ–¥–ø–∏—Å–∫–∞ —Å–æ–∑–¥–∞–Ω–∞. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–∞!");
          }
        } catch (error) {
          console.error("‚ùå setupPushSubscription: Push subscription setup failed:", error);
          
          let errorMessage = "Unknown error occurred";
          
          if (error instanceof Error) {
            if (error.message.includes("timeout")) {
              errorMessage = "–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.";
            } else if (error.message.includes("Service Worker")) {
              errorMessage = "–û—à–∏–±–∫–∞ Service Worker. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É.";
            } else if (error.message.includes("Subscribe")) {
              errorMessage = "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É.";
            } else {
              errorMessage = error.message;
            }
          }
          
          // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è iOS Safari
          if (isIOS && isSafari) {
            if (errorMessage.includes("timeout")) {
              errorMessage = "–í iOS Safari —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –º–æ–≥—É—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –º–µ–¥–ª–µ–Ω–Ω–æ. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–∞.";
            } else if (errorMessage.includes("Service Worker")) {
              errorMessage = "–í iOS Safari —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.";
            }
          }
          
          console.log("üîß setupPushSubscription: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—à–∏–±–∫—É:", errorMessage);
          set({
            isLoading: false,
            error: errorMessage,
          });
        }
      },

      checkServerSubscription: async () => {
        console.log("üöÄ checkServerSubscription: –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Å–µ—Ä–≤–µ—Ä–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏");
        try {
          const userId = get().userId;
          if (!userId) {
            console.log("‚ùå checkServerSubscription: No userId, skipping");
            return;
          }

          console.log("üîß checkServerSubscription: Checking subscription for userId:", userId);
          
          // –î–æ–±–∞–≤–ª—è–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –∑–∞–≤–∏—Å–∞–Ω–∏—è
          console.log("üîß checkServerSubscription: –í—ã–∑—ã–≤–∞–µ–º getUserSubscriptionStatus —Å —Ç–∞–π–º–∞—É—Ç–æ–º...");
          const statusPromise = getUserSubscriptionStatus();
          const timeoutPromise = new Promise<{ hasSubscription: boolean }>((_, reject) => {
            setTimeout(() => reject(new Error("Subscription check timeout")), 10000);
          });
          
          console.log("üîß checkServerSubscription: –û–∂–∏–¥–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç...");
          const status = await Promise.race([statusPromise, timeoutPromise]);
          console.log("‚úÖ checkServerSubscription: Server subscription status checked:", status);
          
          // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
          console.log("üîß checkServerSubscription: –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ hasServerSubscription:", status.hasSubscription);
          set({ hasServerSubscription: status.hasSubscription });
          console.log("‚úÖ checkServerSubscription: –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ");
        } catch (error) {
          console.error("‚ùå checkServerSubscription: Failed to check server subscription:", error);
          // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º false, —á—Ç–æ–±—ã –Ω–µ –∑–∞–≤–∏—Å–∞—Ç—å
          console.log("üîß checkServerSubscription: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º hasServerSubscription: false –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏");
          set({ hasServerSubscription: false });
        }
      },

      removePushSubscription: async () => {
        set({ isLoading: true, error: null });

        try {
          const currentSubscription = get().subscription;
          let endpoint: string | undefined;

          if (currentSubscription?.endpoint) {
            endpoint = currentSubscription.endpoint;
          } else if (isPushSupported()) {
            // –ï—Å–ª–∏ –Ω–µ—Ç —Ç–µ–∫—É—â–µ–π –ø–æ–¥–ø–∏—Å–∫–∏ –≤ store, –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–∑ service worker
            try {
              const registration = await navigator.serviceWorker.ready;
              const existing = await registration.pushManager.getSubscription();
              if (existing?.endpoint) {
                endpoint = existing.endpoint;
              }
            } catch (error) {
              console.warn("Failed to get existing subscription:", error);
            }
          }

          // –£–¥–∞–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (—Ç–æ–ª—å–∫–æ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞)
          if (endpoint) {
            await deleteSubscriptionAction(endpoint);
          } else {
            // Fallback: —É–¥–∞–ª—è–µ–º –≤—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏ –µ—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å endpoint
            console.warn("Endpoint not found, removing all subscriptions as fallback");
            await deleteSubscriptionAction();
          }

          if (get().subscription) {
            try {
              await get().subscription!.unsubscribe();
            } catch (error) {
              console.warn("Failed to unsubscribe from push subscription:", error);
            }
          }

          if (isPushSupported()) {
            try {
              const registration = await navigator.serviceWorker.ready;
              const existing = await registration.pushManager.getSubscription();
              if (existing) {
                try {
                  await existing.unsubscribe();
                } catch (error) {
                  console.warn("Failed to unsubscribe from existing push subscription:", error);
                }
              }
            } catch (error) {
              console.warn("Failed to unsubscribe from existing push subscription:", error);
            }
          }

          set({
            subscription: null,
            hasServerSubscription: false,
            isLoading: false,
            disabledByUser: true,
          });
        } catch (error) {
          console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏:", error);
          set({
            error: "–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É",
            isLoading: false,
          });
        }
      },

      ensureActiveSubscription: async () => {
        try {
          if (!isPushSupported() || !isNotificationSupported()) return;

          const state = get();
          if (state.disabledByUser) return;

          // –õ–æ–≥–∏–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
          const { getPublicKeyAction } = await import("@shared/lib/actions/publicKey");
          const { publicKey } = await getPublicKeyAction();

          if (publicKey) {
            await get().setupPushSubscription(publicKey);
          }
        } catch (error) {
          console.error("Failed to ensure active subscription:", error);
        }
      },

      setDisabledByUser: (disabled) => {
        set({ disabledByUser: disabled });
        localStorage.setItem("notificationsDisabledByUser", disabled ? "1" : "0");
      },

      setUserId: (userId: string) => {
        set({ userId });
      },

      setLoading: (loading) => {
        set({ isLoading: loading });
      },

      setError: (error) => {
        set({ error });
      },

      // –£—Ç–∏–ª–∏—Ç—ã
      isSupported: () => {
        return isPushSupported();
      },
    }),
    {
      name: "push-storage",
      partialize: (state) => ({
        hasServerSubscription: state.hasServerSubscription,
        disabledByUser: state.disabledByUser,
        userId: state.userId,
      }),
    },
  ),
);
