// Store –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è push-–ø–æ–¥–ø–∏—Å–∫–∞–º–∏

import { validateVapidPublicKey } from "@gafus/types";
import {
  deleteSubscriptionAction,
  updateSubscriptionAction,
} from "@shared/lib/actions/subscription";
import serviceWorkerManager from "@shared/utils/serviceWorkerManager";
import { create } from "zustand";
import { persist } from "zustand/middleware";

interface PushState {
  subscription: PushSubscription | null;
  hasServerSubscription: boolean | null;
  isLoading: boolean;
  error: string | null;
  disabledByUser: boolean;
  userId: string;

  // –î–µ–π—Å—Ç–≤–∏—è
  setupPushSubscription: (vapidPublicKey: string) => Promise<void>;
  checkServerSubscription: () => Promise<void>;
  removePushSubscription: () => Promise<void>;
  ensureActiveSubscription: () => Promise<void>;
  setDisabledByUser: (disabled: boolean) => void;
  setUserId: (userId: string) => void;
  setLoading: (loading: boolean) => void;
  setError: (error: string | null) => void;

  // –£—Ç–∏–ª–∏—Ç—ã
  isSupported: () => boolean;
}

const urlBase64ToUint8Array = (base64String: string) => {
  const padding = "=".repeat((4 - (base64String.length % 4)) % 4);
  const base64 = (base64String + padding).replace(/-/g, "+").replace(/_/g, "/");
  const rawData = window.atob(base64);
  return new Uint8Array([...rawData].map((char: string) => char.charCodeAt(0)));
};

const isNotificationSupported = () => {
  return typeof Notification !== "undefined";
};

export const usePushStore = create<PushState>()(
  persist(
    (set, get) => ({
      // –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      subscription: null,
      hasServerSubscription: null,
      isLoading: false,
      error: null,
      disabledByUser: false,
      userId: "",

      // –î–µ–π—Å—Ç–≤–∏—è
      setupPushSubscription: async (vapidPublicKey: string) => {
        if (!serviceWorkerManager.isSupported()) {
          set({ error: "Push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è –≤ —ç—Ç–æ–º –±—Ä–∞—É–∑–µ—Ä–µ" });
          return;
        }

        if (!vapidPublicKey) {
          set({ error: "VAPID public key not available" });
          return;
        }

        if (!validateVapidPublicKey(vapidPublicKey)) {
          set({ error: "Invalid VAPID public key format" });
          return;
        }

        set({ isLoading: true, error: null });

        try {
          console.log("üöÄ setupPushSubscription: –ù–∞—á–∏–Ω–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏");
          
          // –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä SW
          console.log("üîß –ü–æ–ª—É—á–∞–µ–º Service Worker —á–µ—Ä–µ–∑ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä...");
          const registration = await serviceWorkerManager.register();
          
          console.log("‚úÖ Service Worker –≥–æ—Ç–æ–≤:", registration);

          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å pushManager
          if (!registration.pushManager) {
            throw new Error("Push Manager –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –≤ —ç—Ç–æ–º –±—Ä–∞—É–∑–µ—Ä–µ");
          }

          // –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ø–æ–¥–ø–∏—Å–∫—É
          let existingSubscription: PushSubscription | null = null;
          try {
            existingSubscription = await registration.pushManager.getSubscription();
          } catch (error) {
            console.warn("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ø–æ–¥–ø–∏—Å–∫—É:", error);
          }

          // –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –æ–Ω–∞ –≤ –ë–î
          if (existingSubscription) {
            console.log("üîç –ù–∞–π–¥–µ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –ª–æ–∫–∞–ª—å–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞, –ø—Ä–æ–≤–µ—Ä—è–µ–º –ë–î...");
            
            try {
              const { getUserSubscriptions } = await import("@shared/lib/savePushSubscription/getUserSubscriptionStatus");
              const { subscriptions } = await getUserSubscriptions();
              
              // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ª–æ–∫–∞–ª—å–Ω—ã–π endpoint –≤ –ë–î
              const isInDatabase = subscriptions.some(sub => sub.endpoint === existingSubscription!.endpoint);
              
              if (isInDatabase) {
                console.log("‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ —É–∂–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —Å –ë–î, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é");
                set({
                  subscription: existingSubscription,
                  hasServerSubscription: true,
                  isLoading: false,
                  error: null,
                });
                return;
              } else {
                console.log("‚ö†Ô∏è –ü–æ–¥–ø–∏—Å–∫–∞ –µ—Å—Ç—å –ª–æ–∫–∞–ª—å–Ω–æ, –Ω–æ –Ω–µ—Ç –≤ –ë–î, –æ–±–Ω–æ–≤–ª—è–µ–º –ë–î");
                // –û–±–Ω–æ–≤–ª—è–µ–º –ë–î —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –ø–æ–¥–ø–∏—Å–∫–æ–π
                const p256dh = existingSubscription.getKey ? existingSubscription.getKey("p256dh") : null;
                const auth = existingSubscription.getKey ? existingSubscription.getKey("auth") : null;

                if (!existingSubscription.endpoint) {
                  throw new Error("Existing subscription has no endpoint");
                }

                if (!p256dh || !auth) {
                  throw new Error("Existing subscription keys are incomplete");
                }

                const p256dhString = btoa(String.fromCharCode(...new Uint8Array(p256dh)));
                const authString = btoa(String.fromCharCode(...new Uint8Array(auth)));

                const userId = get().userId || "";

                await updateSubscriptionAction({
                  id: "",
                  userId,
                  endpoint: existingSubscription.endpoint,
                  p256dh: p256dhString,
                  auth: authString,
                  keys: {
                    p256dh: p256dhString,
                    auth: authString,
                  },
                });

                set({
                  subscription: existingSubscription,
                  hasServerSubscription: true,
                  isLoading: false,
                  error: null,
                });

                console.log("‚úÖ –°—É—â–µ—Å—Ç–≤—É—é—â–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —Å –ë–î");
                return;
              }
            } catch (error) {
              console.warn("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ë–î, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –ø–æ–¥–ø–∏—Å–∫–∏:", error);
            }
          }

          // –ï—Å–ª–∏ –ª–æ–∫–∞–ª—å–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–µ—Ç –∏–ª–∏ –æ–Ω–∞ –Ω–µ –≤ –ë–î, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é
          console.log("üîß –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é push –ø–æ–¥–ø–∏—Å–∫—É...");
          const applicationServerKey = urlBase64ToUint8Array(vapidPublicKey);
          
          const subscription = await registration.pushManager.subscribe({
            userVisibleOnly: true,
            applicationServerKey,
          });

          const p256dh = subscription.getKey ? subscription.getKey("p256dh") : null;
          const auth = subscription.getKey ? subscription.getKey("auth") : null;

          if (!subscription.endpoint) {
            throw new Error("Subscription has no endpoint");
          }

          if (!p256dh || !auth) {
            throw new Error("Subscription keys are incomplete");
          }

          const p256dhString = btoa(String.fromCharCode(...new Uint8Array(p256dh)));
          const authString = btoa(String.fromCharCode(...new Uint8Array(auth)));

          const userId = get().userId || "";

          await updateSubscriptionAction({
            id: "",
            userId,
            endpoint: subscription.endpoint,
            p256dh: p256dhString,
            auth: authString,
            keys: {
              p256dh: p256dhString,
              auth: authString,
            },
          });

          set({
            subscription,
            hasServerSubscription: true,
            isLoading: false,
            error: null,
          });

          console.log("‚úÖ Push subscription setup completed successfully");
          console.log(`üîó Endpoint: ${subscription.endpoint.substring(0, 50)}...`);
          
        } catch (error) {
          console.error("‚ùå setupPushSubscription: Push subscription setup failed:", error);
          
          let errorMessage = "Unknown error occurred";
          
          if (error instanceof Error) {
            if (error.message.includes("Service Worker")) {
              errorMessage = "–û—à–∏–±–∫–∞ Service Worker. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É.";
            } else if (error.message.includes("timeout")) {
              errorMessage = "–¢–∞–π–º–∞—É—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.";
            } else if (error.message.includes("Subscribe")) {
              errorMessage = "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É.";
            } else {
              errorMessage = error.message;
            }
          }
          
          set({
            error: errorMessage,
            isLoading: false,
          });
        }
      },

      checkServerSubscription: async () => {
        console.log("üöÄ checkServerSubscription: –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –ª–æ–∫–∞–ª—å–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ –∏ –ë–î");
        
        try {
          const userId = get().userId;
          if (!userId) {
            console.log("‚ùå checkServerSubscription: No userId, skipping");
            return;
          }

          console.log("üîß checkServerSubscription: Checking subscription sync for userId:", userId);
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É
          let localSubscription = null;
          let hasLocalSubscription = false;
          
          if (serviceWorkerManager.isSupported()) {
            try {
              const registration = await serviceWorkerManager.getRegistration();
              if (registration) {
                localSubscription = await registration.pushManager.getSubscription();
                hasLocalSubscription = !!localSubscription;
                console.log("üîç –õ–æ–∫–∞–ª—å–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞–π–¥–µ–Ω–∞:", hasLocalSubscription);
                if (localSubscription) {
                  console.log("üîó –õ–æ–∫–∞–ª—å–Ω—ã–π endpoint:", localSubscription.endpoint.substring(0, 50) + "...");
                }
              } else {
                console.log("‚ö†Ô∏è Service Worker –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏");
                hasLocalSubscription = false;
              }
            } catch (error) {
              console.warn("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–æ–∫–∞–ª—å–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É:", error);
              hasLocalSubscription = false;
            }
          }
          
          // –ï—Å–ª–∏ –ª–æ–∫–∞–ª—å–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–µ—Ç, —Ç–æ –∏ —Å–µ—Ä–≤–µ—Ä–Ω–æ–π –±—ã—Ç—å –Ω–µ –¥–æ–ª–∂–Ω–æ
          if (!hasLocalSubscription) {
            console.log("üîß checkServerSubscription: –õ–æ–∫–∞–ª—å–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–µ—Ç, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º hasServerSubscription: false");
            set({ hasServerSubscription: false });
            return;
          }
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ª–æ–∫–∞–ª—å–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –≤ –ë–î
          try {
            const { getUserSubscriptionStatus } = await import("@shared/lib/savePushSubscription/getUserSubscriptionStatus");
            const { hasSubscription } = await getUserSubscriptionStatus();
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ endpoint'–æ–≤
            let endpointMatches = false;
            if (localSubscription && hasSubscription) {
              // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
              const { getUserSubscriptions } = await import("@shared/lib/savePushSubscription/getUserSubscriptionStatus");
              const { subscriptions } = await getUserSubscriptions();
              
              // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ª–æ–∫–∞–ª—å–Ω—ã–π endpoint –≤ –ë–î
              endpointMatches = subscriptions.some(sub => sub.endpoint === localSubscription!.endpoint);
              console.log("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è endpoint'–æ–≤:", endpointMatches);
              console.log("üîó –õ–æ–∫–∞–ª—å–Ω—ã–π endpoint:", localSubscription.endpoint.substring(0, 50) + "...");
              console.log("üìä –ü–æ–¥–ø–∏—Å–æ–∫ –≤ –ë–î:", subscriptions.length);
            }
            
            // –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ, –µ—Å–ª–∏ –µ—Å—Ç—å –∏ –ª–æ–∫–∞–ª—å–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞, –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∞—è –∑–∞–ø–∏—Å—å –≤ –ë–î
            const isSynced = hasLocalSubscription && hasSubscription && endpointMatches;
            console.log("üîß checkServerSubscription: –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:", {
              hasLocalSubscription,
              hasSubscription,
              endpointMatches,
              isSynced
            });
            
            set({ hasServerSubscription: isSynced });
            console.log("‚úÖ checkServerSubscription: –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ:", isSynced);
            
          } catch (error) {
            console.error("‚ùå checkServerSubscription: –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ë–î:", error);
            // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ë–î, –ø–æ–ª–∞–≥–∞–µ–º—Å—è —Ç–æ–ª—å–∫–æ –Ω–∞ –ª–æ–∫–∞–ª—å–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É
            set({ hasServerSubscription: hasLocalSubscription });
          }
          
        } catch (error) {
          console.error("‚ùå checkServerSubscription: Unexpected error:", error);
          set({ hasServerSubscription: false });
        }
      },

      removePushSubscription: async () => {
        set({ isLoading: true, error: null });

        console.log(`üóëÔ∏è removePushSubscription: –£–¥–∞–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É`);

        try {
          const currentSubscription = get().subscription;
          let endpoint: string | undefined;

          // –ü–æ–ª—É—á–∞–µ–º endpoint –∏–∑ store –∏–ª–∏ service worker
          if (currentSubscription?.endpoint) {
            endpoint = currentSubscription.endpoint;
            console.log(`üîç –ù–∞–π–¥–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –≤ store: ${endpoint.substring(0, 50)}...`);
          } else if (serviceWorkerManager.isSupported()) {
            try {
              // –ü–æ–ª—É—á–∞–µ–º Service Worker —á–µ—Ä–µ–∑ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä
              const registration = await serviceWorkerManager.getRegistration();
              if (registration) {
                const existing = await registration.pushManager.getSubscription();
                if (existing?.endpoint) {
                  endpoint = existing.endpoint;
                  console.log(`üîç –ù–∞–π–¥–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –≤ SW: ${endpoint.substring(0, 50)}...`);
                }
              }
            } catch (error) {
              console.warn("Failed to get existing subscription:", error);
            }
          }

          // –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ —É–¥–∞–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –∏–∑ –≤—Å–µ—Ö –º–µ—Å—Ç
          if (endpoint) {
            console.log(`üîç –£–¥–∞–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É —Å endpoint: ${endpoint.substring(0, 50)}...`);
            
            // 1. –£–¥–∞–ª—è–µ–º –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            try {
              console.log("üóëÔ∏è –£–¥–∞–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –∏–∑ –ë–î...");
              await deleteSubscriptionAction(endpoint);
              console.log("‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –ë–î");
            } catch (error) {
              console.warn("Failed to delete from database:", error);
            }
          } else {
            // Fallback: —É–¥–∞–ª—è–µ–º –≤—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏ –µ—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å endpoint
            try {
              console.warn("Endpoint not found, removing all subscriptions as fallback");
              await deleteSubscriptionAction();
              console.log("‚úÖ –í—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏ —É–¥–∞–ª–µ–Ω—ã –∏–∑ –ë–î");
            } catch (error) {
              console.warn("Failed to delete all subscriptions:", error);
            }
          }

          // 2. –£–¥–∞–ª—è–µ–º –∏–∑ store
          if (get().subscription) {
            try {
              console.log("üóëÔ∏è –£–¥–∞–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –∏–∑ store...");
              await get().subscription!.unsubscribe();
              console.log("‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ store");
            } catch (error) {
              console.warn("Failed to unsubscribe from store:", error);
            }
          }

          // 3. –£–¥–∞–ª—è–µ–º –∏–∑ service worker
          if (serviceWorkerManager.isSupported()) {
            try {
              const registration = await serviceWorkerManager.getRegistration();
              if (registration) {
                const existing = await registration.pushManager.getSubscription();
                if (existing) {
                  console.log("üóëÔ∏è –£–¥–∞–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –∏–∑ Service Worker...");
                  await existing.unsubscribe();
                  console.log("‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ Service Worker");
                }
              }
            } catch (error) {
              console.warn("Failed to unsubscribe from service worker:", error);
            }
          }

          // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
          set({
            subscription: null,
            hasServerSubscription: false,
            isLoading: false,
            disabledByUser: true,
          });

          console.log("‚úÖ removePushSubscription: –ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–µ–Ω–∞");
          
        } catch (error) {
          console.error("‚ùå removePushSubscription: –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏:", error);
          
          let errorMessage = "–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É";
          
          if (error instanceof Error) {
            if (error.message.includes("timeout")) {
              errorMessage = "–¢–∞–π–º–∞—É—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.";
            } else if (error.message.includes("network")) {
              errorMessage = "–û—à–∏–±–∫–∞ —Å–µ—Ç–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É.";
            } else {
              errorMessage = error.message;
            }
          }
          
          set({
            error: errorMessage,
            isLoading: false,
          });
        }
      },

      ensureActiveSubscription: async () => {
        try {
          if (!serviceWorkerManager.isSupported() || !isNotificationSupported()) return;

          const state = get();
          if (state.disabledByUser) return;

          // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞
          if (state.hasServerSubscription === true) {
            console.log("üîç ensureActiveSubscription: –ü–æ–¥–ø–∏—Å–∫–∞ —É–∂–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º");
            return;
          }

          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ª–æ–∫–∞–ª—å–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞, –∫–æ—Ç–æ—Ä—É—é –º–æ–∂–Ω–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å
          if (serviceWorkerManager.isSupported()) {
            try {
              const registration = await serviceWorkerManager.getRegistration();
              if (registration) {
                const localSubscription = await registration.pushManager.getSubscription();
                if (localSubscription) {
                  console.log("üîç ensureActiveSubscription: –ù–∞–π–¥–µ–Ω–∞ –ª–æ–∫–∞–ª—å–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é");
                  
                  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —ç—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –≤ –ë–î
                  const { getUserSubscriptions } = await import("@shared/lib/savePushSubscription/getUserSubscriptionStatus");
                  const { subscriptions } = await getUserSubscriptions();
                  
                  const isInDatabase = subscriptions.some(sub => sub.endpoint === localSubscription.endpoint);
                  
                  if (isInDatabase) {
                    console.log("‚úÖ ensureActiveSubscription: –õ–æ–∫–∞–ª—å–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ —É–∂–µ –≤ –ë–î, –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ");
                    set({
                      subscription: localSubscription,
                      hasServerSubscription: true,
                    });
                    return;
                  } else {
                    console.log("‚ö†Ô∏è ensureActiveSubscription: –õ–æ–∫–∞–ª—å–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –≤ –ë–î, —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º");
                    // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ø–æ–¥–ø–∏—Å–∫—É
                    const p256dh = localSubscription.getKey ? localSubscription.getKey("p256dh") : null;
                    const auth = localSubscription.getKey ? localSubscription.getKey("auth") : null;

                    if (localSubscription.endpoint && p256dh && auth) {
                      const p256dhString = btoa(String.fromCharCode(...new Uint8Array(p256dh)));
                      const authString = btoa(String.fromCharCode(...new Uint8Array(auth)));

                      const userId = get().userId || "";

                      await updateSubscriptionAction({
                        id: "",
                        userId,
                        endpoint: localSubscription.endpoint,
                        p256dh: p256dhString,
                        auth: authString,
                        keys: {
                          p256dh: p256dhString,
                          auth: authString,
                        },
                      });

                      set({
                        subscription: localSubscription,
                        hasServerSubscription: true,
                      });

                      console.log("‚úÖ ensureActiveSubscription: –õ–æ–∫–∞–ª—å–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —Å –ë–î");
                      return;
                    }
                  }
                }
              }
            } catch (error) {
              console.warn("‚ö†Ô∏è ensureActiveSubscription: –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–æ–∫–∞–ª—å–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏:", error);
            }
          }

          // –ï—Å–ª–∏ –ª–æ–∫–∞–ª—å–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–µ—Ç –∏–ª–∏ –æ–Ω–∞ –Ω–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–∞, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é
          console.log("üîß ensureActiveSubscription: –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É");
          const { getPublicKeyAction } = await import("@shared/lib/actions/publicKey");
          const { publicKey } = await getPublicKeyAction();

          if (publicKey) {
            await get().setupPushSubscription(publicKey);
          }
        } catch (error) {
          console.error("Failed to ensure active subscription:", error);
        }
      },

      setDisabledByUser: (disabled) => {
        set({ disabledByUser: disabled });
        localStorage.setItem("notificationsDisabledByUser", disabled ? "1" : "0");
      },

      setUserId: (userId: string) => {
        set({ userId });
      },

      setLoading: (loading) => {
        set({ isLoading: loading });
      },

      setError: (error) => {
        set({ error });
      },

      // –£—Ç–∏–ª–∏—Ç—ã
      isSupported: () => {
        return serviceWorkerManager.isSupported();
      },
    }),
    {
      name: "push-storage",
      partialize: (state) => ({
        hasServerSubscription: state.hasServerSubscription,
        disabledByUser: state.disabledByUser,
        userId: state.userId,
      }),
    },
  ),
);
