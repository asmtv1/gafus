import { useEffect } from "react";
import { create } from "zustand";

import { TrainingStatus, type TimerStore } from "@gafus/types";
import { pauseNotificationClient, resumeNotificationClient, resetNotificationClient } from "@shared/lib/StepNotification/manageStepNotificationSimple";
import { pauseUserStepServerAction, resumeUserStepServerAction } from "@shared/lib/training/pauseResumeUserStep";
import { startUserStepServerAction } from "@shared/lib/training/startUserStepServerAction";
import { updateStepStatusServerAction } from "@shared/lib/training/updateUserStepStatus";

// ===== –£–¢–ò–õ–ò–¢–´ =====
const nowSec = () => Math.floor(Date.now() / 1000);
const makeEndKey = (courseId: string, day: number, idx: number) =>
  `training-${courseId}-${day}-${idx}-end`;

const loadFromLS = (key: string): string | null => localStorage.getItem(key);

// –ë—ã—Å—Ç—Ä—ã–π –ª–æ–∫–∞–ª—å–Ω—ã–π —Ç–∞–π–º–∞—É—Ç –¥–ª—è —Å–µ—Ä–≤–µ—Ä–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π (–º–æ–±–∞–π–ª—ã)
const SERVER_ACTION_TIMEOUT_MS = 1000;

async function withTimeout<T>(promise: Promise<T>, ms: number): Promise<T> {
  return new Promise<T>((resolve, reject) => {
    const timer = setTimeout(() => reject(new Error("timeout")), ms);
    promise
      .then((val) => {
        clearTimeout(timer);
        resolve(val);
      })
      .catch((err) => {
        clearTimeout(timer);
        reject(err);
      });
  });
}

// ===== STORE =====
export const useTimerStore = create<TimerStore>()((set, get) => {
  // –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è —Ç–∞–π–º–µ—Ä–æ–≤
  const timers = new Map<string, NodeJS.Timeout>();

  // –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã–º —à–∞–≥–æ–º
  let activeStep: string | null = null; // stepKey –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —à–∞–≥–∞
  let activeTimer: NodeJS.Timeout | null = null; // –∞–∫—Ç–∏–≤–Ω—ã–π —Ç–∞–π–º–µ—Ä

  return {
    timers,

    // ===== –£–ü–†–ê–í–õ–ï–ù–ò–ï –ê–ö–¢–ò–í–ù–´–ú –®–ê–ì–û–ú =====

    // –ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π —à–∞–≥
    getActiveStep: () => activeStep,

    // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –º–æ–∂–µ—Ç –ª–∏ —à–∞–≥ –±—ã—Ç—å –∑–∞–ø—É—â–µ–Ω
    canStartStep: (courseId: string, day: number, stepIndex: number) => {
      const stepKey = `${courseId}-${day}-${stepIndex}`;
      return activeStep === null || activeStep === stepKey;
    },

    // ===== –£–ü–†–ê–í–õ–ï–ù–ò–ï –¢–ê–ô–ú–ï–†–ê–ú–ò =====

    startTimer: (courseId, day, stepIndex, onTimeUpdate, onFinish, isRestore = false) => {
      if (typeof window === "undefined") return false;

      const stepKey = `${courseId}-${day}-${stepIndex}`;

      // –ü—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–∞–π–º–µ—Ä–∞ –Ω–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º canStartStep
      if (!isRestore) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ—Ç –ª–∏ —à–∞–≥ –±—ã—Ç—å –∑–∞–ø—É—â–µ–Ω
        if (!get().canStartStep(courseId, day, stepIndex)) {
          return false; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º false –¥–ª—è –ø–æ–∫–∞–∑–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        }

        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∞–∫—Ç–∏–≤–Ω—ã–π —Ç–∞–π–º–µ—Ä, –µ—Å–ª–∏ –µ—Å—Ç—å
        if (activeTimer) {
          clearInterval(activeTimer);
          activeTimer = null;
          activeStep = null;
        }
      }

      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ç–∞–π–º–µ—Ä
      const timer = setInterval(() => {
        const END_KEY = makeEndKey(courseId, day, stepIndex);
        const endTsStr = loadFromLS(END_KEY);

        if (!endTsStr) {
          get().stopTimer(courseId, day, stepIndex);
          return;
        }

        const endTs = Number(endTsStr);
        const diff = Math.max(endTs - nowSec(), 0);

        // –í—ã–∑—ã–≤–∞–µ–º callback –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏
        onTimeUpdate(diff);

        if (diff === 0) {
          get().stopTimer(courseId, day, stepIndex);
          // –í—ã–∑—ã–≤–∞–µ–º callback –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
          onFinish();
        }
      }, 1000);

      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–∞–∫ –∞–∫—Ç–∏–≤–Ω—ã–π
      activeTimer = timer;
      activeStep = stepKey;
      timers.set(stepKey, timer);

      return true; // –£—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω
    },

    stopTimer: (courseId, day, stepIndex) => {
      if (typeof window === "undefined") return;

      const stepKey = `${courseId}-${day}-${stepIndex}`;
      const timer = timers.get(stepKey);

      if (timer) {
        clearInterval(timer);
        timers.delete(stepKey);

        // –ï—Å–ª–∏ —ç—Ç–æ –±—ã–ª –∞–∫—Ç–∏–≤–Ω—ã–π —Ç–∞–π–º–µ—Ä, –æ—á–∏—â–∞–µ–º
        if (activeStep === stepKey) {
          activeStep = null;
          activeTimer = null;
        }
      }
    },

    stopAllTimers: () => {
      if (typeof window === "undefined") return;

      // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ —Ç–∞–π–º–µ—Ä—ã
      timers.forEach((timer) => clearInterval(timer));
      timers.clear();

      // –û—á–∏—â–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —à–∞–≥
      if (activeTimer) {
        clearInterval(activeTimer);
        activeTimer = null;
      }
      activeStep = null;
    },

    cleanupTimers: () => {
      if (typeof window === "undefined") return;

      timers.forEach((timer) => clearInterval(timer));
      timers.clear();

      if (activeTimer) {
        clearInterval(activeTimer);
        activeTimer = null;
      }
      activeStep = null;
    },

    // ===== –°–ï–†–í–ï–†–ù–´–ï –î–ï–ô–°–¢–í–ò–Ø –° –†–ï–¢–†–ê–Ø–ú–ò =====
    startStepWithServer: async (courseId, day, stepIndex, durationSec) => {
      // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ —Ñ–æ–Ω–µ —Å –±—ã—Å—Ç—Ä—ã–º —Ç–∞–π–º–∞—É—Ç–æ–º; UI –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ–º
      (async () => {
        try {
          await withTimeout(
            startUserStepServerAction(
              courseId,
              day,
              stepIndex,
              TrainingStatus.IN_PROGRESS,
              durationSec,
            ),
            SERVER_ACTION_TIMEOUT_MS
          );
        } catch (error) {
          console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —à–∞–≥–∞:", error);
          try {
            const { useOfflineStore } = await import("@shared/stores/offlineStore");
            const offlineStore = useOfflineStore.getState();
            offlineStore.addToSyncQueue({
              type: "step-status-update",
              data: {
                courseId,
                day,
                stepIndex,
                status: "IN_PROGRESS",
              },
              maxRetries: 3,
            });
            console.warn("üìù –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å –æ—Ñ–ª–∞–π–Ω —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏");
          } catch (offlineError) {
            console.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –≤ –æ—á–µ—Ä–µ–¥—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:", offlineError);
          }
        }
      })();
    },

    finishStepWithServer: async (courseId, day, stepIndex, stepTitle, stepOrder) => {
      // –í—ã–ø–æ–ª–Ω—è–µ–º —Å–µ—Ä–≤–µ—Ä–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ —Ñ–æ–Ω–µ, UI –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ–º
      (async () => {
        try {
          await withTimeout(
            updateStepStatusServerAction(
              courseId,
              day,
              stepIndex,
              TrainingStatus.COMPLETED,
              stepTitle,
              stepOrder,
            ),
            SERVER_ACTION_TIMEOUT_MS
          );
        } catch (error) {
          console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —à–∞–≥–∞:", error);
          try {
            const { useOfflineStore } = await import("@shared/stores/offlineStore");
            const offlineStore = useOfflineStore.getState();
            offlineStore.addToSyncQueue({
              type: "step-status-update",
              data: {
                courseId,
                day,
                stepIndex,
                status: "COMPLETED",
                stepTitle,
                stepOrder,
              },
              maxRetries: 3,
            });
            console.warn("üìù –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å –æ—Ñ–ª–∞–π–Ω —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏");
          } catch (offlineError) {
            console.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –≤ –æ—á–µ—Ä–µ–¥—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:", offlineError);
          }
        }
      })();
    },

    resetStepWithServer: async (courseId, day, stepIndex) => {
      // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å —à–∞–≥–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
      try {
        const { useStepStore } = await import("@shared/stores/stepStore");
        const stepStore = useStepStore.getState();
        const stepKey = stepStore.getStepKey(courseId, day, stepIndex);
        const currentState = stepStore.stepStates[stepKey];
        let resetStatus: TrainingStatus = TrainingStatus.NOT_STARTED;
        if (currentState?.status === "IN_PROGRESS" || currentState?.status === "COMPLETED") {
          resetStatus = TrainingStatus.IN_PROGRESS;
        } else if (currentState?.status === "PAUSED") {
          resetStatus = TrainingStatus.IN_PROGRESS;
        }

        // –ù–µ –±–ª–æ–∫–∏—Ä—É–µ–º UI: —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏ —Å—Ç–∞—Ç—É—Å –≤ —Ñ–æ–Ω–µ
        (async () => {
          try {
            await withTimeout(
              resetNotificationClient({ courseId, day, stepIndex }),
              SERVER_ACTION_TIMEOUT_MS
            );
          } catch (notificationError) {
            console.warn("Failed to reset notification:", notificationError);
          }
          try {
            await withTimeout(
              updateStepStatusServerAction(courseId, day, stepIndex, resetStatus),
              SERVER_ACTION_TIMEOUT_MS
            );
          } catch (error) {
            console.error("‚ùå –û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ —à–∞–≥–∞:", error);
            try {
              const { useOfflineStore } = await import("@shared/stores/offlineStore");
              const offlineStore = useOfflineStore.getState();
              const stepStateNow = useStepStore.getState().stepStates[stepKey];
              let syncStatus: "NOT_STARTED" | "IN_PROGRESS" | "COMPLETED" | "PAUSED" = "NOT_STARTED";
              if (stepStateNow?.status === "IN_PROGRESS" || stepStateNow?.status === "COMPLETED") {
                syncStatus = "IN_PROGRESS";
              } else if (stepStateNow?.status === "PAUSED") {
                syncStatus = "IN_PROGRESS";
              }
              offlineStore.addToSyncQueue({
                type: "step-status-update",
                data: { courseId, day, stepIndex, status: syncStatus },
                maxRetries: 3,
              });
              console.warn("üìù –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å –æ—Ñ–ª–∞–π–Ω —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏");
            } catch (offlineError) {
              console.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –≤ –æ—á–µ—Ä–µ–¥—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:", offlineError);
            }
          }
        })();
      } catch (e) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ª–æ–∫–∞–ª—å–Ω–æ–º —Ä–∞—Å—á—ë—Ç–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–±—Ä–æ—Å–∞:", e);
      }
    },

    // –°–µ—Ä–≤–µ—Ä: —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–∞—É–∑—É —à–∞–≥–∞ –∏ –ø–æ—Å—Ç–∞–≤–∏—Ç—å –Ω–∞ –ø–∞—É–∑—É Push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (StepNotification)
    pauseNotification: async (courseId, day, stepIndex) => {
      try {
        const { useStepStore } = await import("@shared/stores/stepStore");
        const stepStore = useStepStore.getState();
        const stepKey = `${courseId}-${day}-${stepIndex}`;
        const stepState = stepStore.stepStates[stepKey];
        const timeLeft = stepState?.timeLeft || 0;
        // 1) –ü–∏—à–µ–º –ø–∞—É–∑—É —à–∞–≥–∞ –≤ UserStep
        // 2) –°—Ç–∞–≤–∏–º –Ω–∞ –ø–∞—É–∑—É StepNotification
        await Promise.allSettled([
          pauseUserStepServerAction(courseId, day, stepIndex, timeLeft),
          pauseNotificationClient({ courseId, day, stepIndex }),
        ]);
      } catch (error) {
        console.error("Failed to pause step on server:", error);
        throw error;
      }
    },

    // –°–µ—Ä–≤–µ—Ä: —Å–Ω—è—Ç—å –ø–∞—É–∑—É —à–∞–≥–∞ –∏ –≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å Push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (StepNotification)
    resumeNotification: async (courseId, day, stepIndex, durationSec) => {
      try {
        await Promise.allSettled([
          resumeUserStepServerAction(courseId, day, stepIndex),
          resumeNotificationClient({ courseId, day, stepIndex, durationSec }),
        ]);
      } catch (error) {
        console.error("Failed to resume step on server:", error);
        throw error;
      }
    },

    // ===== –û–§–õ–ê–ô–ù –§–£–ù–ö–¶–ò–ò =====

    // –ü–∞—É–∑–∞ —à–∞–≥–∞ –≤ –æ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º–µ
    pauseStepOffline: (courseId, day, stepIndex) => {
      if (typeof window === "undefined") return;

      // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä
      get().stopTimer(courseId, day, stepIndex);
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–∞—É–∑—ã –≤ localStorage
      const PAUSE_KEY = `training-${courseId}-${day}-${stepIndex}-paused`;
      const pauseData = {
        pausedAt: Date.now(),
        timeLeft: 0, // –ë—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–æ –∏–∑ stepStore
      };
      localStorage.setItem(PAUSE_KEY, JSON.stringify(pauseData));
    },

    // –í–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —à–∞–≥–∞ –≤ –æ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º–µ
    resumeStepOffline: (courseId, day, stepIndex) => {
      if (typeof window === "undefined") return;

      // –£–¥–∞–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–∞—É–∑—ã –∏–∑ localStorage
      const PAUSE_KEY = `training-${courseId}-${day}-${stepIndex}-paused`;
      localStorage.removeItem(PAUSE_KEY);
    },

    // –ü–∞—É–∑–∞ —à–∞–≥–∞ —Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π –Ω–∞ —Å–µ—Ä–≤–µ—Ä (optimistic + –±—ã—Å—Ç—Ä—ã–π —Ç–∞–π–º–∞—É—Ç)
    pauseStepWithServer: async (courseId, day, stepIndex) => {
      try {
        const { useStepStore } = await import("@shared/stores/stepStore");
        const stepStore = useStepStore.getState();
        const stepKey = `${courseId}-${day}-${stepIndex}`;
        const stepState = stepStore.stepStates[stepKey];
        const timeLeft = stepState?.timeLeft || 0;

        // –ú–≥–Ω–æ–≤–µ–Ω–Ω–æ –º–µ–Ω—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        get().pauseStepOffline(courseId, day, stepIndex);

        // –°–µ—Ä–≤–µ—Ä ‚Äî –≤ —Ñ–æ–Ω–µ —Å –±—ã—Å—Ç—Ä—ã–º —Ç–∞–π–º–∞—É—Ç–æ–º
        (async () => {
          try {
            await withTimeout(get().pauseNotification(courseId, day, stepIndex), SERVER_ACTION_TIMEOUT_MS);
          } catch {
            try {
              const { useOfflineStore } = await import("@shared/stores/offlineStore");
              const offlineStore = useOfflineStore.getState();
              offlineStore.addToSyncQueue({
                type: "step-pause",
                data: {
                  courseId,
                  day,
                  stepIndex,
                  pausedAt: Date.now(),
                  timeLeft,
                },
                maxRetries: 3,
              });
            } catch (offlineError) {
              console.error("Failed to add pause to offline queue:", offlineError);
            }
          }
        })();
      } catch (e) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ª–æ–∫–∞–ª—å–Ω–æ–π –ø–∞—É–∑–µ:", e);
        get().pauseStepOffline(courseId, day, stepIndex);
      }
    },

    // –í–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —à–∞–≥–∞ —Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π –Ω–∞ —Å–µ—Ä–≤–µ—Ä (optimistic + –±—ã—Å—Ç—Ä—ã–π —Ç–∞–π–º–∞—É—Ç)
    resumeStepWithServer: async (courseId, day, stepIndex, durationSec) => {
      try {
        const { useStepStore } = await import("@shared/stores/stepStore");
        const stepStore = useStepStore.getState();
        const stepKey = `${courseId}-${day}-${stepIndex}`;
        const stepState = stepStore.stepStates[stepKey];
        const timeLeft = stepState?.timeLeft || durationSec;

        // –ú–≥–Ω–æ–≤–µ–Ω–Ω–æ –º–µ–Ω—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        get().resumeStepOffline(courseId, day, stepIndex);

        // –°–µ—Ä–≤–µ—Ä ‚Äî –≤ —Ñ–æ–Ω–µ —Å –±—ã—Å—Ç—Ä—ã–º —Ç–∞–π–º–∞—É—Ç–æ–º
        (async () => {
          try {
            await withTimeout(get().resumeNotification(courseId, day, stepIndex, durationSec), SERVER_ACTION_TIMEOUT_MS);
          } catch {
            try {
              const { useOfflineStore } = await import("@shared/stores/offlineStore");
              const offlineStore = useOfflineStore.getState();
              offlineStore.addToSyncQueue({
                type: "step-resume",
                data: {
                  courseId,
                  day,
                  stepIndex,
                  resumedAt: Date.now(),
                  timeLeft,
                },
                maxRetries: 3,
              });
            } catch (offlineError) {
              console.error("Failed to add resume to offline queue:", offlineError);
            }
          }
        })();
      } catch (e) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ª–æ–∫–∞–ª—å–Ω–æ–º –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏:", e);
        get().resumeStepOffline(courseId, day, stepIndex);
      }
    },
  };
});

// –•—É–∫ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–∏ —Ç–∞–π–º–µ—Ä–æ–≤ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
export const useCleanupTimers = () => {
  const { cleanupTimers } = useTimerStore();

  useEffect(() => {
    return () => {
      cleanupTimers();
    };
  }, [cleanupTimers]);
};
