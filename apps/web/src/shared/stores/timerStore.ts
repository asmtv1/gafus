import { useEffect } from "react";
import { create } from "zustand";

import { TrainingStatus, type TimerStore } from "@gafus/types";
import { startUserStepServerAction } from "@shared/lib/training/startUserStepServerAction";
import { updateStepStatusServerAction } from "@shared/lib/training/updateUserStepStatus";

// ===== –£–¢–ò–õ–ò–¢–´ =====
const nowSec = () => Math.floor(Date.now() / 1000);
const makeEndKey = (courseId: string, day: number, idx: number) =>
  `training-${courseId}-${day}-${idx}-end`;

const loadFromLS = (key: string): string | null => localStorage.getItem(key);

// ===== STORE =====
export const useTimerStore = create<TimerStore>()((set, get) => {
  // –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è —Ç–∞–π–º–µ—Ä–æ–≤
  const timers = new Map<string, NodeJS.Timeout>();

  // –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã–º —à–∞–≥–æ–º
  let activeStep: string | null = null; // stepKey –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —à–∞–≥–∞
  let activeTimer: NodeJS.Timeout | null = null; // –∞–∫—Ç–∏–≤–Ω—ã–π —Ç–∞–π–º–µ—Ä

  return {
    timers,

    // ===== –£–ü–†–ê–í–õ–ï–ù–ò–ï –ê–ö–¢–ò–í–ù–´–ú –®–ê–ì–û–ú =====

    // –ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π —à–∞–≥
    getActiveStep: () => activeStep,

    // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –º–æ–∂–µ—Ç –ª–∏ —à–∞–≥ –±—ã—Ç—å –∑–∞–ø—É—â–µ–Ω
    canStartStep: (courseId: string, day: number, stepIndex: number) => {
      const stepKey = `${courseId}-${day}-${stepIndex}`;
      return activeStep === null || activeStep === stepKey;
    },

    // ===== –£–ü–†–ê–í–õ–ï–ù–ò–ï –¢–ê–ô–ú–ï–†–ê–ú–ò =====

    startTimer: (courseId, day, stepIndex, onTimeUpdate, onFinish, isRestore = false) => {
      if (typeof window === "undefined") return false;

      const stepKey = `${courseId}-${day}-${stepIndex}`;

      // –ü—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–∞–π–º–µ—Ä–∞ –Ω–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º canStartStep
      if (!isRestore) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ—Ç –ª–∏ —à–∞–≥ –±—ã—Ç—å –∑–∞–ø—É—â–µ–Ω
        if (!get().canStartStep(courseId, day, stepIndex)) {
          if (process.env.NODE_ENV === "development") {
            console.log(`üö´ Cannot start timer: another step is already active (${activeStep})`);
          }
          return false; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º false –¥–ª—è –ø–æ–∫–∞–∑–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        }

        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∞–∫—Ç–∏–≤–Ω—ã–π —Ç–∞–π–º–µ—Ä, –µ—Å–ª–∏ –µ—Å—Ç—å
        if (activeTimer) {
          clearInterval(activeTimer);
          activeTimer = null;
          activeStep = null;
        }
      }

      if (process.env.NODE_ENV === "development") {
        console.log(`üöÄ Starting timer for step: ${stepKey}`);
      }

      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ç–∞–π–º–µ—Ä
      const timer = setInterval(() => {
        const END_KEY = makeEndKey(courseId, day, stepIndex);
        const endTsStr = loadFromLS(END_KEY);

        if (!endTsStr) {
          get().stopTimer(courseId, day, stepIndex);
          return;
        }

        const endTs = Number(endTsStr);
        const diff = Math.max(endTs - nowSec(), 0);

        // –í—ã–∑—ã–≤–∞–µ–º callback –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏
        onTimeUpdate(diff);

        if (diff === 0) {
          get().stopTimer(courseId, day, stepIndex);
          // –í—ã–∑—ã–≤–∞–µ–º callback –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
          onFinish();
        }
      }, 1000);

      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–∞–∫ –∞–∫—Ç–∏–≤–Ω—ã–π
      activeTimer = timer;
      activeStep = stepKey;
      timers.set(stepKey, timer);

      if (process.env.NODE_ENV === "development") {
        console.log(`‚úÖ Timer started for step: ${stepKey}, active step: ${activeStep}`);
      }

      return true; // –£—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω
    },

    stopTimer: (courseId, day, stepIndex) => {
      if (typeof window === "undefined") return;

      const stepKey = `${courseId}-${day}-${stepIndex}`;
      const timer = timers.get(stepKey);

      if (process.env.NODE_ENV === "development") {
        console.log(`‚èπÔ∏è stopTimer called for: ${stepKey}, timer exists: ${!!timer}`);
      }

      if (timer) {
        clearInterval(timer);
        timers.delete(stepKey);

        // –ï—Å–ª–∏ —ç—Ç–æ –±—ã–ª –∞–∫—Ç–∏–≤–Ω—ã–π —Ç–∞–π–º–µ—Ä, –æ—á–∏—â–∞–µ–º
        if (activeStep === stepKey) {
          activeStep = null;
          activeTimer = null;
        }

        if (process.env.NODE_ENV === "development") {
          console.log(`‚úÖ Timer stopped for: ${stepKey}, active step: ${activeStep}`);
        }
      }
    },

    stopAllTimers: () => {
      if (typeof window === "undefined") return;

      if (process.env.NODE_ENV === "development") {
        console.log(`üõë stopAllTimers called, stopping all timers`);
      }

      // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ —Ç–∞–π–º–µ—Ä—ã
      timers.forEach((timer) => clearInterval(timer));
      timers.clear();

      // –û—á–∏—â–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —à–∞–≥
      if (activeTimer) {
        clearInterval(activeTimer);
        activeTimer = null;
      }
      activeStep = null;

      if (process.env.NODE_ENV === "development") {
        console.log(`‚úÖ All timers stopped, active step: ${activeStep}`);
      }
    },

    cleanupTimers: () => {
      if (typeof window === "undefined") return;

      timers.forEach((timer) => clearInterval(timer));
      timers.clear();

      if (activeTimer) {
        clearInterval(activeTimer);
        activeTimer = null;
      }
      activeStep = null;
    },

    // ===== –°–ï–†–í–ï–†–ù–´–ï –î–ï–ô–°–¢–í–ò–Ø =====
    startStepWithServer: async (courseId, day, stepIndex, durationSec) => {
      try {
        await startUserStepServerAction(
          courseId,
          day,
          stepIndex,
          TrainingStatus.IN_PROGRESS,
          durationSec,
        );
      } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —à–∞–≥–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ:", error);

        // –ï—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –¥–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        try {
          const { useOfflineStore } = await import("@shared/stores/offlineStore");
          const offlineStore = useOfflineStore.getState();

          offlineStore.addToSyncQueue({
            type: "step-status-update",
            data: {
              courseId,
              day,
              stepIndex,
              status: "IN_PROGRESS",
            },
            maxRetries: 3,
          });

          if (process.env.NODE_ENV === "development") {
            console.log("üì± Step start added to offline sync queue");
          }
        } catch (offlineError) {
          console.error("Failed to add to offline queue:", offlineError);
        }

        throw error;
      }
    },

    finishStepWithServer: async (courseId, day, stepIndex, stepTitle, stepOrder) => {
      try {
        await updateStepStatusServerAction(
          courseId,
          day,
          stepIndex,
          TrainingStatus.COMPLETED,
          stepTitle,
          stepOrder,
        );
      } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —à–∞–≥–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ:", error);

        // –ï—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –¥–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        try {
          const { useOfflineStore } = await import("@shared/stores/offlineStore");
          const offlineStore = useOfflineStore.getState();

          offlineStore.addToSyncQueue({
            type: "step-status-update",
            data: {
              courseId,
              day,
              stepIndex,
              status: "COMPLETED",
              stepTitle,
              stepOrder,
            },
            maxRetries: 3,
          });

          if (process.env.NODE_ENV === "development") {
            console.log("üì± Step completion added to offline sync queue");
          }
        } catch (offlineError) {
          console.error("Failed to add to offline queue:", offlineError);
        }

        throw error;
      }
    },

    resetStepWithServer: async (courseId, day, stepIndex, durationSec) => {
      try {
        await updateStepStatusServerAction(courseId, day, stepIndex, TrainingStatus.NOT_STARTED);
      } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ —à–∞–≥–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ:", error);

        // –ï—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –¥–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        try {
          const { useOfflineStore } = await import("@shared/stores/offlineStore");
          const offlineStore = useOfflineStore.getState();

          offlineStore.addToSyncQueue({
            type: "step-status-update",
            data: {
              courseId,
              day,
              stepIndex,
              status: "NOT_STARTED",
            },
            maxRetries: 3,
          });

          if (process.env.NODE_ENV === "development") {
            console.log("üì± Step reset added to offline sync queue");
          }
        } catch (offlineError) {
          console.error("Failed to add to offline queue:", offlineError);
        }

        throw error;
      }
    },
  };
});

// –•—É–∫ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–∏ —Ç–∞–π–º–µ—Ä–æ–≤ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
export const useCleanupTimers = () => {
  const { cleanupTimers } = useTimerStore();

  useEffect(() => {
    return () => {
      cleanupTimers();
    };
  }, [cleanupTimers]);
};
