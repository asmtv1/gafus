"use client";
import { useState, useRef, useEffect } from "react";
import { TrainingStatus } from "@gafus/types";
import type { CourseTabType } from "../CourseTabs/CourseTabs";
import styles from "./CourseFilters.module.css";

export type TrainingLevelType = "ALL" | "BEGINNER" | "INTERMEDIATE" | "ADVANCED" | "EXPERT";
export type ProgressFilterType = "ALL" | TrainingStatus;
export type SortingType = "newest" | "rating" | "name" | "progress";
export type RatingFilterType = "ALL" | "4+" | "3+" | "ANY";

interface CourseFiltersProps {
  // –¢–∞–±—ã
  activeTab: CourseTabType;
  onTabChange: (tab: CourseTabType) => void;
  
  // –§–∏–ª—å—Ç—Ä—ã
  activeLevel: TrainingLevelType;
  onLevelChange: (level: TrainingLevelType) => void;
  
  activeProgress: ProgressFilterType;
  onProgressChange: (progress: ProgressFilterType) => void;
  
  activeRating: RatingFilterType;
  onRatingChange: (rating: RatingFilterType) => void;
  
  activeSorting: SortingType;
  onSortingChange: (sorting: SortingType) => void;
  
  // –°–±—Ä–æ—Å —Ñ–∏–ª—å—Ç—Ä–æ–≤
  onResetFilters?: () => void;
}

const tabOptions = [
  { id: "free" as CourseTabType, label: "–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ" },
  { id: "paid" as CourseTabType, label: "–ü–ª–∞—Ç–Ω—ã–µ" },
  { id: "private" as CourseTabType, label: "–ü—Ä–∏–≤–∞—Ç–Ω—ã–µ" },
];

const levelOptions = [
  { id: "ALL" as TrainingLevelType, label: "–í—Å–µ —É—Ä–æ–≤–Ω–∏" },
  { id: "BEGINNER" as TrainingLevelType, label: "–ù–∞—á–∞–ª—å–Ω—ã–π" },
  { id: "INTERMEDIATE" as TrainingLevelType, label: "–°—Ä–µ–¥–Ω–∏–π" },
  { id: "ADVANCED" as TrainingLevelType, label: "–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π" },
  { id: "EXPERT" as TrainingLevelType, label: "–≠–∫—Å–ø–µ—Ä—Ç–Ω—ã–π" },
];

const progressOptions = [
  { id: "ALL" as ProgressFilterType, label: "–í—Å–µ –∫—É—Ä—Å—ã", icon: "üìö" },
  { id: TrainingStatus.NOT_STARTED, label: "–ù–µ –Ω–∞—á–∞—Ç—ã–µ", icon: "‚≠ê" },
  { id: TrainingStatus.IN_PROGRESS, label: "–í –ø—Ä–æ—Ü–µ—Å—Å–µ", icon: "üî•" },
  { id: TrainingStatus.COMPLETED, label: "–ó–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ", icon: "‚úÖ" },
];

const ratingOptions = [
  { id: "ALL" as RatingFilterType, label: "–í—Å–µ –∫—É—Ä—Å—ã" },
  { id: "4+" as RatingFilterType, label: "4+ –∑–≤–µ–∑–¥—ã" },
  { id: "3+" as RatingFilterType, label: "3+ –∑–≤–µ–∑–¥—ã" },
  { id: "ANY" as RatingFilterType, label: "–° —Ä–µ–π—Ç–∏–Ω–≥–æ–º" },
];

const sortingOptions = [
  { id: "newest" as SortingType, label: "–ù–æ–≤—ã–µ ‚Üí –°—Ç–∞—Ä—ã–µ", icon: "üïí" },
  { id: "rating" as SortingType, label: "–ü–æ —Ä–µ–π—Ç–∏–Ω–≥—É", icon: "‚≠ê" },
  { id: "name" as SortingType, label: "–ü–æ –Ω–∞–∑–≤–∞–Ω–∏—é (–ê ‚Üí –Ø)", icon: "üî§" },
  { id: "progress" as SortingType, label: "–ü–æ –ø—Ä–æ–≥—Ä–µ—Å—Å—É", icon: "üìä" },
];

interface DropdownProps {
  isOpen: boolean;
  onToggle: () => void;
  onClose: () => void;
  children: React.ReactNode;
}

interface FilterOption {
  id: string;
  label: string;
  icon?: string;
}

function Dropdown({ isOpen, onToggle, onClose, children }: DropdownProps) {
  const dropdownRef = useRef<HTMLDivElement>(null);

  useEffect(() => {
    const handleClickOutside = (event: MouseEvent) => {
      if (dropdownRef.current && !dropdownRef.current.contains(event.target as Node)) {
        onClose();
      }
    };

    if (isOpen) {
      document.addEventListener("mousedown", handleClickOutside);
    }

    return () => {
      document.removeEventListener("mousedown", handleClickOutside);
    };
  }, [isOpen, onClose]);

  return (
    <div className={styles.dropdown} ref={dropdownRef}>
      {children}
    </div>
  );
}

export default function CourseFilters({
  activeTab,
  onTabChange,
  activeLevel,
  onLevelChange,
  activeProgress,
  onProgressChange,
  activeRating,
  onRatingChange,
  activeSorting,
  onSortingChange,
  onResetFilters,
}: CourseFiltersProps) {
  const [openDropdowns, setOpenDropdowns] = useState<Record<string, boolean>>({});
  const [showFilters, setShowFilters] = useState(false);

  const toggleDropdown = (key: string) => {
    setOpenDropdowns(prev => ({
      ...prev,
      [key]: !prev[key]
    }));
  };

  const closeDropdown = (key: string) => {
    setOpenDropdowns(prev => ({
      ...prev,
      [key]: false
    }));
  };

  const getActiveOption = (options: FilterOption[], activeId: string) => {
    return options.find(opt => opt.id === activeId);
  };

  // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã (–Ω–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
  const activeFiltersCount = [
    activeTab !== "free",
    activeLevel !== "ALL", 
    activeProgress !== "ALL",
    activeRating !== "ALL",
    activeSorting !== "newest"
  ].filter(Boolean).length;

  // –°–±—Ä–æ—Å –≤—Å–µ—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  const handleResetFilters = () => {
    onTabChange("free");
    onLevelChange("ALL");
    onProgressChange("ALL");
    onRatingChange("ALL");
    onSortingChange("newest");
    
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –≤—ã–ø–∞–¥–∞—é—â–∏–µ —Å–ø–∏—Å–∫–∏
    setOpenDropdowns({});
    
    // –í—ã–∑—ã–≤–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–ª–ª–±–µ–∫ –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω
    onResetFilters?.();
  };

  return (
    <div className={styles.filtersContainer}>
      {/* –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–∞–º–∏ */}
      <div className={styles.toggleButtonContainer}>
        <button
          className={styles.toggleButton}
          onClick={() => setShowFilters(!showFilters)}
        >
          <span className={styles.toggleText}>
            {showFilters ? "–°–∫—Ä—ã—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã" : "–î–æ–±–∞–≤–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã"}
            {activeFiltersCount > 0 && !showFilters && (
              <span className={styles.activeFiltersBadge}>
                {activeFiltersCount}
              </span>
            )}
          </span>
          <svg 
            className={`${styles.toggleArrow} ${showFilters ? styles.open : ""}`}
            width="16" 
            height="16" 
            viewBox="0 0 16 16" 
            fill="none"
          >
            <path 
              d="M4 6l4 4 4-4" 
              stroke="currentColor" 
              strokeWidth="2" 
              strokeLinecap="round" 
              strokeLinejoin="round"
            />
          </svg>
        </button>

        {/* –ö–Ω–æ–ø–∫–∞ —Å–±—Ä–æ—Å–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤ */}
        {activeFiltersCount > 0 && (
          <button
            className={styles.toggleButton}
            onClick={handleResetFilters}
            title="–°–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ —Ñ–∏–ª—å—Ç—Ä—ã"
          >
            <span className={styles.toggleText}>
              –°–±—Ä–æ—Å–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã
            </span>
            <svg 
              className={styles.resetIcon}
              width="16" 
              height="16" 
              viewBox="0 0 16 16" 
              fill="none"
            >
              <path 
                d="M1 4v6h6M15 12V6H9M3 7l4-4 4 4" 
                stroke="currentColor" 
                strokeWidth="2" 
                strokeLinecap="round" 
                strokeLinejoin="round"
              />
            </svg>
          </button>
        )}
      </div>

      {/* –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã */}
      {showFilters && (
        <div className={styles.mainFilters}>
        {/* –¢–∏–ø –∫—É—Ä—Å–∞ */}
        <Dropdown
          isOpen={openDropdowns.tab}
          onToggle={() => toggleDropdown('tab')}
          onClose={() => closeDropdown('tab')}
        >
          <button
            className={styles.filterButton}
            onClick={() => toggleDropdown('tab')}
          >
            <span className={styles.label}>–¢–∏–ø:</span>
            <span className={styles.value}>{getActiveOption(tabOptions, activeTab)?.label}</span>
            <svg className={`${styles.arrow} ${openDropdowns.tab ? styles.open : ""}`} width="12" height="12" viewBox="0 0 12 12">
              <path d="M2 4l4 4 4-4" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
            </svg>
          </button>
          
          {openDropdowns.tab && (
            <div className={styles.dropdownMenu}>
              {tabOptions.map((option) => (
                <button
                  key={option.id}
                  className={`${styles.option} ${activeTab === option.id ? styles.active : ""}`}
                  onClick={() => {
                    onTabChange(option.id);
                    closeDropdown('tab');
                  }}
                >
                  {option.label}
                  {activeTab === option.id && (
                    <svg className={styles.checkmark} width="16" height="16" viewBox="0 0 16 16">
                      <path d="M3 8l3 3 7-7" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
                    </svg>
                  )}
                </button>
              ))}
            </div>
          )}
        </Dropdown>

        {/* –£—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ */}
        <Dropdown
          isOpen={openDropdowns.level}
          onToggle={() => toggleDropdown('level')}
          onClose={() => closeDropdown('level')}
        >
          <button
            className={styles.filterButton}
            onClick={() => toggleDropdown('level')}
          >
            <span className={styles.label}>–£—Ä–æ–≤–µ–Ω—å:</span>
            <span className={styles.value}>{getActiveOption(levelOptions, activeLevel)?.label}</span>
            <svg className={`${styles.arrow} ${openDropdowns.level ? styles.open : ""}`} width="12" height="12" viewBox="0 0 12 12">
              <path d="M2 4l4 4 4-4" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
            </svg>
          </button>
          
          {openDropdowns.level && (
            <div className={styles.dropdownMenu}>
              {levelOptions.map((option) => (
                <button
                  key={option.id}
                  className={`${styles.option} ${activeLevel === option.id ? styles.active : ""}`}
                  onClick={() => {
                    onLevelChange(option.id);
                    closeDropdown('level');
                  }}
                >
                  {option.label}
                  {activeLevel === option.id && (
                    <svg className={styles.checkmark} width="16" height="16" viewBox="0 0 16 16">
                      <path d="M3 8l3 3 7-7" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
                    </svg>
                  )}
                </button>
              ))}
            </div>
          )}
        </Dropdown>

        {/* –ü—Ä–æ–≥—Ä–µ—Å—Å */}
        <Dropdown
          isOpen={openDropdowns.progress}
          onToggle={() => toggleDropdown('progress')}
          onClose={() => closeDropdown('progress')}
        >
          <button
            className={styles.filterButton}
            onClick={() => toggleDropdown('progress')}
          >
            <span className={styles.label}>–ü—Ä–æ–≥—Ä–µ—Å—Å:</span>
            <span className={styles.value}>
              <span className={styles.icon}>{getActiveOption(progressOptions, activeProgress)?.icon}</span>
              {getActiveOption(progressOptions, activeProgress)?.label}
            </span>
            <svg className={`${styles.arrow} ${openDropdowns.progress ? styles.open : ""}`} width="12" height="12" viewBox="0 0 12 12">
              <path d="M2 4l4 4 4-4" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
            </svg>
          </button>
          
          {openDropdowns.progress && (
            <div className={styles.dropdownMenu}>
              {progressOptions.map((option) => (
                <button
                  key={option.id}
                  className={`${styles.option} ${activeProgress === option.id ? styles.active : ""}`}
                  onClick={() => {
                    onProgressChange(option.id);
                    closeDropdown('progress');
                  }}
                >
                  <span className={styles.icon}>{option.icon}</span>
                  {option.label}
                  {activeProgress === option.id && (
                    <svg className={styles.checkmark} width="16" height="16" viewBox="0 0 16 16">
                      <path d="M3 8l3 3 7-7" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
                    </svg>
                  )}
                </button>
              ))}
            </div>
          )}
        </Dropdown>

        {/* –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã */}
        <div className={styles.additionalFilters}>
        {/* –†–µ–π—Ç–∏–Ω–≥ */}
        <Dropdown
          isOpen={openDropdowns.rating}
          onToggle={() => toggleDropdown('rating')}
          onClose={() => closeDropdown('rating')}
        >
          <button
            className={styles.filterButton}
            onClick={() => toggleDropdown('rating')}
          >
            <span className={styles.label}>–†–µ–π—Ç–∏–Ω–≥:</span>
            <span className={styles.value}>{getActiveOption(ratingOptions, activeRating)?.label}</span>
            <svg className={`${styles.arrow} ${openDropdowns.rating ? styles.open : ""}`} width="12" height="12" viewBox="0 0 12 12">
              <path d="M2 4l4 4 4-4" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
            </svg>
          </button>
          
          {openDropdowns.rating && (
            <div className={styles.dropdownMenu}>
              {ratingOptions.map((option) => (
                <button
                  key={option.id}
                  className={`${styles.option} ${activeRating === option.id ? styles.active : ""}`}
                  onClick={() => {
                    onRatingChange(option.id);
                    closeDropdown('rating');
                  }}
                >
                  {option.label}
                  {activeRating === option.id && (
                    <svg className={styles.checkmark} width="16" height="16" viewBox="0 0 16 16">
                      <path d="M3 8l3 3 7-7" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
                    </svg>
                  )}
                </button>
              ))}
            </div>
          )}
        </Dropdown>

        {/* –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ */}
        <Dropdown
          isOpen={openDropdowns.sorting}
          onToggle={() => toggleDropdown('sorting')}
          onClose={() => closeDropdown('sorting')}
        >
          <button
            className={styles.filterButton}
            onClick={() => toggleDropdown('sorting')}
          >
            <span className={styles.label}>–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞:</span>
            <span className={styles.value}>
              <span className={styles.icon}>{getActiveOption(sortingOptions, activeSorting)?.icon}</span>
              {getActiveOption(sortingOptions, activeSorting)?.label}
            </span>
            <svg className={`${styles.arrow} ${openDropdowns.sorting ? styles.open : ""}`} width="12" height="12" viewBox="0 0 12 12">
              <path d="M2 4l4 4 4-4" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
            </svg>
          </button>
          
          {openDropdowns.sorting && (
            <div className={styles.dropdownMenu}>
              {sortingOptions.map((option) => (
                <button
                  key={option.id}
                  className={`${styles.option} ${activeSorting === option.id ? styles.active : ""}`}
                  onClick={() => {
                    onSortingChange(option.id);
                    closeDropdown('sorting');
                  }}
                >
                  <span className={styles.icon}>{option.icon}</span>
                  {option.label}
                  {activeSorting === option.id && (
                    <svg className={styles.checkmark} width="16" height="16" viewBox="0 0 16 16">
                      <path d="M3 8l3 3 7-7" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
                    </svg>
                  )}
                </button>
              ))}
            </div>
          )}
        </Dropdown>
        </div>
        </div>
      )}
    </div>
  );
}
