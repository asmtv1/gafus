"use client";
import { useEffect, useState } from "react";
import { TrainingStatus } from "@gafus/types";
import type { CourseTabType } from "../CourseTabs/CourseTabs";
import styles from "./FiltersDrawer.module.css";

export type TrainingLevelType = "ALL" | "BEGINNER" | "INTERMEDIATE" | "ADVANCED" | "EXPERT";
export type ProgressFilterType = "ALL" | TrainingStatus;
export type RatingFilterType = "ALL" | "4+" | "3+" | "ANY";

interface FiltersDrawerProps {
  isOpen: boolean;
  onClose: () => void;
  
  // –¢–∞–±—ã
  activeTab: CourseTabType;
  onTabChange: (tab: CourseTabType) => void;
  
  // –§–∏–ª—å—Ç—Ä—ã
  activeLevel: TrainingLevelType;
  onLevelChange: (level: TrainingLevelType) => void;
  
  activeProgress: ProgressFilterType;
  onProgressChange: (progress: ProgressFilterType) => void;
  
  activeRating: RatingFilterType;
  onRatingChange: (rating: RatingFilterType) => void;
  
  // –°–±—Ä–æ—Å –∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ
  onApply: () => void;
  onReset: () => void;
  
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ —Ñ–∏–ª—å—Ç—Ä–∞–º
  getResultsCount?: (filters: {
    tab: CourseTabType;
    level: TrainingLevelType;
    progress: ProgressFilterType;
    rating: RatingFilterType;
  }) => number;
}

const tabOptions = [
  { id: "free" as CourseTabType, label: "–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ" },
  { id: "paid" as CourseTabType, label: "–ü–ª–∞—Ç–Ω—ã–µ" },
  { id: "private" as CourseTabType, label: "–ü—Ä–∏–≤–∞—Ç–Ω—ã–µ" },
];

const levelOptions = [
  { id: "ALL" as TrainingLevelType, label: "–í—Å–µ —É—Ä–æ–≤–Ω–∏" },
  { id: "BEGINNER" as TrainingLevelType, label: "–ù–∞—á–∞–ª—å–Ω—ã–π" },
  { id: "INTERMEDIATE" as TrainingLevelType, label: "–°—Ä–µ–¥–Ω–∏–π" },
  { id: "ADVANCED" as TrainingLevelType, label: "–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π" },
  { id: "EXPERT" as TrainingLevelType, label: "–≠–∫—Å–ø–µ—Ä—Ç–Ω—ã–π" },
];

const progressOptions = [
  { id: "ALL" as ProgressFilterType, label: "–í—Å–µ –∫—É—Ä—Å—ã", icon: "üìö" },
  { id: TrainingStatus.NOT_STARTED, label: "–ù–µ –Ω–∞—á–∞—Ç—ã–µ", icon: "‚≠ê" },
  { id: TrainingStatus.IN_PROGRESS, label: "–í –ø—Ä–æ—Ü–µ—Å—Å–µ", icon: "üî•" },
  { id: TrainingStatus.COMPLETED, label: "–ó–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ", icon: "‚úÖ" },
];

const ratingOptions = [
  { id: "ALL" as RatingFilterType, label: "–í—Å–µ –∫—É—Ä—Å—ã" },
  { id: "4+" as RatingFilterType, label: "4+ –∑–≤–µ–∑–¥—ã" },
  { id: "3+" as RatingFilterType, label: "3+ –∑–≤–µ–∑–¥—ã" },
  { id: "ANY" as RatingFilterType, label: "–° —Ä–µ–π—Ç–∏–Ω–≥–æ–º" },
];

export default function FiltersDrawer({
  isOpen,
  onClose,
  activeTab,
  onTabChange,
  activeLevel,
  onLevelChange,
  activeProgress,
  onProgressChange,
  activeRating,
  onRatingChange,
  onApply,
  onReset,
  getResultsCount,
}: FiltersDrawerProps) {
  // –õ–æ–∫–∞–ª—å–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞
  const [localTab, setLocalTab] = useState(activeTab);
  const [localLevel, setLocalLevel] = useState(activeLevel);
  const [localProgress, setLocalProgress] = useState(activeProgress);
  const [localRating, setLocalRating] = useState(activeRating);

  // –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
  const previewCount = getResultsCount ? getResultsCount({
    tab: localTab,
    level: localLevel,
    progress: localProgress,
    rating: localRating,
  }) : undefined;

  // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å –ø—Ä–æ–ø—Å–∞–º–∏
  useEffect(() => {
    if (isOpen) {
      setLocalTab(activeTab);
      setLocalLevel(activeLevel);
      setLocalProgress(activeProgress);
      setLocalRating(activeRating);
    }
  }, [isOpen, activeTab, activeLevel, activeProgress, activeRating]);

  // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ Escape
  useEffect(() => {
    const handleEscape = (e: KeyboardEvent) => {
      if (e.key === "Escape" && isOpen) {
        onClose();
      }
    };

    document.addEventListener("keydown", handleEscape);
    return () => document.removeEventListener("keydown", handleEscape);
  }, [isOpen, onClose]);

  // –ë–ª–æ–∫–∏—Ä—É–µ–º —Å–∫—Ä–æ–ª–ª body –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–æ–º drawer
  useEffect(() => {
    if (isOpen) {
      document.body.style.overflow = "hidden";
    } else {
      document.body.style.overflow = "";
    }

    return () => {
      document.body.style.overflow = "";
    };
  }, [isOpen]);

  const handleApply = () => {
    onTabChange(localTab);
    onLevelChange(localLevel);
    onProgressChange(localProgress);
    onRatingChange(localRating);
    onApply();
    onClose();
  };

  const handleReset = () => {
    setLocalTab("free");
    setLocalLevel("ALL");
    setLocalProgress("ALL");
    setLocalRating("ALL");
    onReset();
  };

  if (!isOpen) return null;

  const activeFiltersCount = [
    localTab !== "free",
    localLevel !== "ALL", 
    localProgress !== "ALL",
    localRating !== "ALL"
  ].filter(Boolean).length;

  return (
    <>
      {/* –û–≤–µ—Ä–ª–µ–π */}
      <div className={styles.overlay} onClick={onClose} />

      {/* Drawer */}
      <div className={styles.drawer}>
        {/* –®–∞–ø–∫–∞ */}
        <div className={styles.header}>
          <h3 className={styles.title}>–§–∏–ª—å—Ç—Ä—ã</h3>
          <button className={styles.closeButton} onClick={onClose} aria-label="–ó–∞–∫—Ä—ã—Ç—å">
            <svg width="24" height="24" viewBox="0 0 24 24" fill="none">
              <path 
                d="M18 6L6 18M6 6l12 12" 
                stroke="currentColor" 
                strokeWidth="2" 
                strokeLinecap="round" 
                strokeLinejoin="round"
              />
            </svg>
          </button>
        </div>

        {/* –ö–æ–Ω—Ç–µ–Ω—Ç */}
        <div className={styles.content}>
          {/* –¢–∏–ø –∫—É—Ä—Å–∞ */}
          <div className={styles.filterSection}>
            <h4 className={styles.sectionTitle}>–¢–∏–ø –∫—É—Ä—Å–∞</h4>
            <div className={styles.optionsGrid}>
              {tabOptions.map((option) => (
                <button
                  key={option.id}
                  className={`${styles.optionButton} ${localTab === option.id ? styles.active : ""}`}
                  onClick={() => setLocalTab(option.id)}
                >
                  {option.label}
                </button>
              ))}
            </div>
          </div>

          {/* –£—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ */}
          <div className={styles.filterSection}>
            <h4 className={styles.sectionTitle}>–£—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏</h4>
            <div className={styles.optionsGrid}>
              {levelOptions.map((option) => (
                <button
                  key={option.id}
                  className={`${styles.optionButton} ${localLevel === option.id ? styles.active : ""}`}
                  onClick={() => setLocalLevel(option.id)}
                >
                  {option.label}
                </button>
              ))}
            </div>
          </div>

          {/* –ü—Ä–æ–≥—Ä–µ—Å—Å */}
          <div className={styles.filterSection}>
            <h4 className={styles.sectionTitle}>–ü—Ä–æ–≥—Ä–µ—Å—Å –æ–±—É—á–µ–Ω–∏—è</h4>
            <div className={styles.optionsGrid}>
              {progressOptions.map((option) => (
                <button
                  key={option.id}
                  className={`${styles.optionButton} ${localProgress === option.id ? styles.active : ""}`}
                  onClick={() => setLocalProgress(option.id)}
                >
                  <span className={styles.emoji}>{option.icon}</span>
                  {option.label}
                </button>
              ))}
            </div>
          </div>

          {/* –†–µ–π—Ç–∏–Ω–≥ */}
          <div className={styles.filterSection}>
            <h4 className={styles.sectionTitle}>–†–µ–π—Ç–∏–Ω–≥</h4>
            <div className={styles.optionsGrid}>
              {ratingOptions.map((option) => (
                <button
                  key={option.id}
                  className={`${styles.optionButton} ${localRating === option.id ? styles.active : ""}`}
                  onClick={() => setLocalRating(option.id)}
                >
                  {option.label}
                </button>
              ))}
            </div>
          </div>
        </div>

        {/* –§—É—Ç–µ—Ä —Å –∫–Ω–æ–ø–∫–∞–º–∏ */}
        <div className={styles.footer}>
          {activeFiltersCount > 0 && (
            <button className={styles.resetButton} onClick={handleReset}>
              <svg width="16" height="16" viewBox="0 0 16 16" fill="none">
                <path 
                  d="M2 8h12M8 4l-4 4 4 4" 
                  stroke="currentColor" 
                  strokeWidth="2" 
                  strokeLinecap="round" 
                  strokeLinejoin="round"
                />
              </svg>
              –°–±—Ä–æ—Å–∏—Ç—å
            </button>
          )}
          <button className={styles.applyButton} onClick={handleApply}>
            –ü–æ–∫–∞–∑–∞—Ç—å
            {previewCount !== undefined && (
              <span className={styles.resultsCount}>
                {previewCount}
              </span>
            )}
          </button>
        </div>
      </div>
    </>
  );
}

