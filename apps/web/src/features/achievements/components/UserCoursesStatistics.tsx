"use client";

import { useCourseStore, useCourseStoreActions } from "@shared/stores/courseStore";
import { useStepStore } from "@shared/stores/stepStore";
import { useCourseProgressSync } from "@shared/hooks/useCourseProgressSync";
import { TrainingStatus, type CourseWithProgressData } from "@gafus/types";
import { type UserDetailedProgress } from "@shared/lib/user/getUserProgress";
import Link from "next/link";
import { format } from "date-fns";
import { ru } from "date-fns/locale";
import { useMemo, useEffect } from "react";

import styles from "./UserCoursesStatistics.module.css";

/**
 * –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –∫—É—Ä—Å–∞–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
export default function UserCoursesStatistics() {
  const { allCourses, loading, errors } = useCourseStore();
  const { fetchAllCourses } = useCourseStoreActions();
  const { syncedCourses, isAssigned, getCachedData } = useCourseProgressSync();
  
  // –ü–æ–ª—É—á–∞–µ–º –∫—É—Ä—Å—ã —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º –∏–∑ —Å—Ç–æ—Ä–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)
  const courses = useMemo(() => {
    const coursesData = syncedCourses || allCourses?.data;
    if (!coursesData) return [];
    return coursesData.filter(course => course.userStatus !== "NOT_STARTED");
  }, [syncedCourses, allCourses?.data]);
  
  // –ü–æ–ª—É—á–∞–µ–º ID –∫—É—Ä—Å–æ–≤ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ (–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, –Ω–æ –æ—Å—Ç–∞–≤–ª—è–µ–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
  const _courseIds = useMemo(() => {
    return courses.map(course => course.id);
  }, [courses]);
  
  // –£–±–∏—Ä–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Å —Å–µ—Ä–≤–µ—Ä–∞ - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –¥–∞–Ω–Ω—ã–µ –∏–∑ stores
  
  
  // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ stepStore –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —à–∞–≥–æ–≤
  const stepStates = useStepStore((state) => state.stepStates);
  const getStepKey = useStepStore((state) => state.getStepKey);
  
  // –ü–æ–ª—É—á–∞–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–Ω–µ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –∏–∑ trainingStore
  const cachedTrainingData = useMemo(() => {
    const data: Record<string, {
      trainingDays: {
        day: number;
        title: string;
        type: string;
        courseId: string;
        userStatus: string;
      }[];
      courseDescription: string | null;
      courseId: string | null;
      courseVideoUrl: string | null;
    }> = {};
    courses.forEach(course => {
      const cached = getCachedData(course.type);
      if (cached.data && !cached.isExpired) {
        data[course.id] = cached.data;
      }
    });
    return data;
  }, [courses, getCachedData]);
  
  // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º —Ä–µ–Ω–¥–µ—Ä–µ, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç –≤ –∫—ç—à–µ
  useEffect(() => {
    if (!allCourses?.data && !loading.all) {
      fetchAllCourses("with-progress");
    }
  }, [allCourses?.data, loading.all, fetchAllCourses]);
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –æ—à–∏–±–æ–∫
  const isLoading = loading.all;
  const error = errors.all;

  if (isLoading) {
    return (
      <div className={styles.loading}>
        <div className={styles.loadingSpinner}></div>
        <p>–ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫—É—Ä—Å–æ–≤...</p>
      </div>
    );
  }

  if (error) {
    return (
      <div className={styles.error}>
        <div className={styles.errorIcon}>‚ö†Ô∏è</div>
        <h3>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏</h3>
        <p>–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫—É—Ä—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É.</p>
      </div>
    );
  }

  if (!courses || courses.length === 0) {
    return (
      <div className={styles.noCourses}>
        <div className={styles.noCoursesIcon}>üìö</div>
        <h3>–ü–æ–∫–∞ –Ω–µ—Ç –Ω–∞—á–∞—Ç—ã—Ö –∫—É—Ä—Å–æ–≤</h3>
        <p>–ù–∞—á–Ω–∏—Ç–µ –∏–∑—É—á–µ–Ω–∏–µ –ª—é–±–æ–≥–æ –∫—É—Ä—Å–∞, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –∑–¥–µ—Å—å –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤–∞—à–µ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞.</p>
        <Link href="/courses" className={styles.browseCoursesButton}>
          –í—ã–±—Ä–∞—Ç—å –∫—É—Ä—Å
        </Link>
      </div>
    );
  }

  return (
    <div className={styles.coursesList}>
      {courses.map((course) => {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ trainingStore
        const userProgress = null; // –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ —Å —Å–µ—Ä–≤–µ—Ä–∞
        
        // –ü–æ–ª—É—á–∞–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–Ω–µ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
        const cachedData = cachedTrainingData[course.id];
        
        return (
          <CourseStatisticsCard 
            key={course.id} 
            course={course as CourseWithProgressData} 
            userProgress={userProgress}
            cachedTrainingData={cachedData}
            isAssigned={isAssigned(course.id)}
            stepStates={stepStates}
            getStepKey={getStepKey}
          />
        );
      })}
    </div>
  );
}

function CourseStatisticsCard({ 
  course,
  userProgress,
  cachedTrainingData,
  isAssigned,
  stepStates,
  getStepKey
}: { 
  course: CourseWithProgressData;
  userProgress?: UserDetailedProgress | null;
  cachedTrainingData?: {
    trainingDays: {
      day: number;
      title: string;
      type: string;
      courseId: string;
      userStatus: string;
    }[];
    courseDescription: string | null;
    courseId: string | null;
    courseVideoUrl: string | null;
  };
  isAssigned?: boolean;
  stepStates: Record<string, { status: string; isFinished: boolean; timeLeft: number; isPaused: boolean }>;
  getStepKey: (courseId: string, day: number, stepIndex: number) => string;
}) {
  // –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –∏ —à–∞–≥–æ–≤
  const totalDays = course.dayLinks?.length || 0;
  const totalSteps = course.dayLinks?.reduce((sum, dayLink) => sum + (dayLink.day?.stepLinks?.length || 0), 0) || 0;
  
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ trainingStore
  const completedDaysFromUserProgress = 0; // –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ —Å —Å–µ—Ä–≤–µ—Ä–∞
  const completedStepsFromUserProgress = 0; // –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ —Å —Å–µ—Ä–≤–µ—Ä–∞
  
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ stepStore –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –ø–æ–¥—Å—á–µ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —à–∞–≥–æ–≤
  const cachedProgress = useMemo(() => {
    if (!cachedTrainingData?.trainingDays) return { 
      completedDays: 0, 
      completedSteps: 0 
    };
    
    const completedDaysFromCache = cachedTrainingData.trainingDays.filter(
      (day) => day.userStatus === TrainingStatus.COMPLETED
    ).length;
    
    // –ï—Å–ª–∏ –∫—É—Ä—Å –∑–∞–≤–µ—Ä—à–µ–Ω, –Ω–æ –≤ –∫—ç—à–µ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –¥–Ω—è—Ö, 
    // —Å—á–∏—Ç–∞–µ–º –≤—Å–µ –¥–Ω–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–º–∏
    let finalCompletedDays = completedDaysFromCache;
    if (course.userStatus === TrainingStatus.COMPLETED && completedDaysFromCache === 0 && totalDays > 0) {
      finalCompletedDays = totalDays;
    }
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å–ª–∏ –∫—É—Ä—Å –∑–∞–≤–µ—Ä—à–µ–Ω, –Ω–æ –∫—ç—à –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—å—à–µ –¥–Ω–µ–π,
    // —á–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
    if (course.userStatus === TrainingStatus.COMPLETED && completedDaysFromCache < totalDays && totalDays > 0) {
      finalCompletedDays = totalDays;
    }
    
    // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —à–∞–≥–∏ –∏–∑ stepStore
    let completedStepsFromStepStore = 0;
    if (course.dayLinks) {
      course.dayLinks.forEach((dayLink, dayIndex) => {
        if (dayLink.day?.stepLinks) {
          dayLink.day.stepLinks.forEach((stepLink, stepIndex) => {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º dayIndex + 1 –≤–º–µ—Å—Ç–æ parseInt(dayLink.day!.id)
            const stepKey = getStepKey(course.id, dayIndex + 1, stepIndex);
            const stepState = stepStates[stepKey];
            if (stepState && stepState.status === TrainingStatus.COMPLETED) {
              completedStepsFromStepStore++;
            }
          });
        }
      });
    }
    
    
    return {
      completedDays: finalCompletedDays,
      completedSteps: completedStepsFromStepStore
    };
  }, [cachedTrainingData, course.id, course.dayLinks, stepStates, getStepKey]);
  
  const finalCompletedDays = cachedProgress.completedDays;
  const finalCompletedSteps = cachedProgress.completedSteps;
  
  
  const progressPercentage = totalDays > 0 ? Math.round((finalCompletedDays / totalDays) * 100) : 0;
  const isCompleted = course.userStatus === TrainingStatus.COMPLETED;
  const isInProgress = course.userStatus === TrainingStatus.IN_PROGRESS || isAssigned;

  return (
    <div className={`${styles.courseCard} ${isCompleted ? styles.completed : ''} ${isInProgress ? styles.inProgress : ''}`}>
      <div className={styles.courseHeader}>
        <div className={styles.courseInfo}>
          <h3 className={styles.courseTitle}>{course.name}</h3>
          <p className={styles.courseDescription}>{course.description}</p>
        </div>
        <div className={styles.courseMeta}>
          <span className={styles.author}>–ê–≤—Ç–æ—Ä: {course.authorUsername}</span>
          <span className={styles.status}>
            {isCompleted && "‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω"}
            {isInProgress && "üîÑ –í –ø—Ä–æ—Ü–µ—Å—Å–µ"}
            {!isCompleted && !isInProgress && course.userStatus === TrainingStatus.NOT_STARTED && "‚è∏Ô∏è –ù–µ –Ω–∞—á–∞—Ç"}
          </span>
        </div>
      </div>

      <div className={styles.progressSection}>
        <div className={styles.progressBar}>
          <div 
            className={styles.progressFill} 
            style={{ width: `${progressPercentage}%` }}
          ></div>
        </div>
        <span className={styles.progressText}>{progressPercentage}%</span>
      </div>

      <div className={styles.daysTracker}>
        <div className={styles.trackerHeader}>
          <div className={styles.calendarIcon}>üìÖ</div>
          <h4 className={styles.trackerTitle}>–¢—Ä–µ–∫–µ—Ä –∑–∞–Ω—è—Ç–∏–π</h4>
        </div>
        <div className={styles.daysGrid}>
          {Array.from({ length: totalDays }, (_, index) => {
            const dayNumber = index + 1;
            const dayProgress = userProgress?.days?.find((day) => day.dayOrder === dayNumber);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–∫–∂–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            const cachedDay = cachedTrainingData?.trainingDays?.find(
              (day) => day.day === dayNumber
            );
            
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç—É –∂–µ –ª–æ–≥–∏–∫—É, —á—Ç–æ –∏ –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –¥–Ω–µ–π
            let isCompleted = dayProgress?.status === TrainingStatus.COMPLETED || 
              cachedDay?.userStatus === TrainingStatus.COMPLETED;
            
            // –ï—Å–ª–∏ –∫—É—Ä—Å –∑–∞–≤–µ—Ä—à–µ–Ω, –Ω–æ –∫—ç—à –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π –¥–µ–Ω—å, —Å—á–∏—Ç–∞–µ–º –¥–µ–Ω—å –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–º
            if (course.userStatus === TrainingStatus.COMPLETED && !isCompleted) {
              isCompleted = true;
            }
            
            const isInProgress = dayProgress?.status === TrainingStatus.IN_PROGRESS ||
              cachedDay?.userStatus === TrainingStatus.IN_PROGRESS;
            
            return (
              <div 
                key={dayNumber}
                className={`${styles.dayCircle} ${
                  isCompleted ? styles.completed : 
                  isInProgress ? styles.inProgress : 
                  styles.pending
                }`}
              >
                {isCompleted ? (
                  <span className={styles.checkmark}>‚úì</span>
                ) : (
                  <span className={styles.dayNumber}>{dayNumber}</span>
                )}
              </div>
            );
          })}
        </div>
      </div>

      <div className={styles.courseStats}>
        <div className={styles.statItem}>
          <span className={styles.statLabel}>–ü—Ä–æ–≥—Ä–µ—Å—Å:</span>
          <span className={styles.statValue}>
            {finalCompletedDays} –∏–∑ {totalDays} –¥–Ω–µ–π
          </span>
        </div>
        <div className={styles.statItem}>
          <span className={styles.statLabel}>–®–∞–≥–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ:</span>
          <span className={styles.statValue}>
            {finalCompletedSteps} –∏–∑ {totalSteps}
          </span>
        </div>
        <div className={styles.statItem}>
          <span className={styles.statLabel}>–ù–∞—á–∞—Ç:</span>
          <span className={styles.statValue}>
            {course.startedAt ? format(new Date(course.startedAt), "dd MMMM yyyy", { locale: ru }) : "–ù–µ —É–∫–∞–∑–∞–Ω–æ"}
          </span>
        </div>
        {isCompleted && course.completedAt && (
          <div className={styles.statItem}>
            <span className={styles.statLabel}>–ó–∞–≤–µ—Ä—à–µ–Ω:</span>
            <span className={styles.statValue}>
              {format(new Date(course.completedAt), "dd MMMM yyyy", { locale: ru })}
            </span>
          </div>
        )}
      </div>

      <div className={styles.courseActions}>
        {isInProgress && (
          <Link 
            href={`/trainings/${course.type}`}
            className={styles.continueButton}
          >
            –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–±—É—á–µ–Ω–∏–µ
          </Link>
        )}
        
        {!isCompleted && (
          <Link 
            href={`/trainings/${course.type}`}
            className={styles.viewButton}
          >
            –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫—É—Ä—Å
          </Link>
        )}
      </div>
    </div>
  );
}
