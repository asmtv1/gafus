"use client";

import { useUserStartedCourses } from "@shared/hooks/useUserCourses";
import { TrainingStatus, type CourseWithProgressData } from "@gafus/types";
import Link from "next/link";
import { format } from "date-fns";
import { ru } from "date-fns/locale";

import styles from "./UserCoursesStatistics.module.css";

/**
 * –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –∫—É—Ä—Å–∞–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
export default function UserCoursesStatistics() {
  const { data: courses, error, isLoading } = useUserStartedCourses();

  if (isLoading) {
    return (
      <div className={styles.loading}>
        <div className={styles.loadingSpinner}></div>
        <p>–ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫—É—Ä—Å–æ–≤...</p>
      </div>
    );
  }

  if (error) {
    return (
      <div className={styles.error}>
        <div className={styles.errorIcon}>‚ö†Ô∏è</div>
        <h3>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏</h3>
        <p>–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫—É—Ä—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É.</p>
      </div>
    );
  }

  if (!courses || courses.length === 0) {
    return (
      <div className={styles.noCourses}>
        <div className={styles.noCoursesIcon}>üìö</div>
        <h3>–ü–æ–∫–∞ –Ω–µ—Ç –Ω–∞—á–∞—Ç—ã—Ö –∫—É—Ä—Å–æ–≤</h3>
        <p>–ù–∞—á–Ω–∏—Ç–µ –∏–∑—É—á–µ–Ω–∏–µ –ª—é–±–æ–≥–æ –∫—É—Ä—Å–∞, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –∑–¥–µ—Å—å –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤–∞—à–µ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞.</p>
        <Link href="/courses" className={styles.browseCoursesButton}>
          –í—ã–±—Ä–∞—Ç—å –∫—É—Ä—Å
        </Link>
      </div>
    );
  }

  return (
    <div className={styles.coursesList}>
      {courses.map((course) => (
        <CourseStatisticsCard key={course.id} course={course} />
      ))}
    </div>
  );
}

function CourseStatisticsCard({ course }: { course: CourseWithProgressData }) {
  // –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –∏ —à–∞–≥–æ–≤
  const totalDays = course.dayLinks.length;
  const totalSteps = course.dayLinks.reduce((sum, dayLink) => sum + dayLink.day.stepLinks.length, 0);
  
  // –î–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è, —Å—á–∏—Ç–∞–µ–º —á—Ç–æ –µ—Å–ª–∏ –∫—É—Ä—Å –∑–∞–≤–µ—Ä—à–µ–Ω, —Ç–æ –≤—Å–µ –¥–Ω–∏ –ø—Ä–æ–π–¥–µ–Ω—ã
  const completedDays = course.userStatus === TrainingStatus.COMPLETED ? totalDays : 0;
  const completedSteps = course.userStatus === TrainingStatus.COMPLETED ? totalSteps : 0;
  
  const progressPercentage = totalDays > 0 ? Math.round((completedDays / totalDays) * 100) : 0;
  const isCompleted = course.userStatus === TrainingStatus.COMPLETED;
  const isInProgress = course.userStatus === TrainingStatus.IN_PROGRESS;

  return (
    <div className={`${styles.courseCard} ${isCompleted ? styles.completed : ''} ${isInProgress ? styles.inProgress : ''}`}>
      <div className={styles.courseHeader}>
        <div className={styles.courseInfo}>
          <h3 className={styles.courseTitle}>{course.name}</h3>
          <p className={styles.courseDescription}>{course.description}</p>
        </div>
        <div className={styles.courseMeta}>
          <span className={styles.author}>–ê–≤—Ç–æ—Ä: {course.authorUsername}</span>
          <span className={styles.status}>
            {isCompleted && "‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω"}
            {isInProgress && "üîÑ –í –ø—Ä–æ—Ü–µ—Å—Å–µ"}
            {course.userStatus === TrainingStatus.NOT_STARTED && "‚è∏Ô∏è –ù–µ –Ω–∞—á–∞—Ç"}
          </span>
        </div>
      </div>

      <div className={styles.progressSection}>
        <div className={styles.progressBar}>
          <div 
            className={styles.progressFill} 
            style={{ width: `${progressPercentage}%` }}
          ></div>
        </div>
        <span className={styles.progressText}>{progressPercentage}%</span>
      </div>

      <div className={styles.daysTracker}>
        <div className={styles.trackerHeader}>
          <div className={styles.calendarIcon}>üìÖ</div>
          <h4 className={styles.trackerTitle}>–¢—Ä–µ–∫–µ—Ä –∑–∞–Ω—è—Ç–∏–π</h4>
        </div>
        <div className={styles.daysGrid}>
          {Array.from({ length: totalDays }, (_, index) => {
            const dayNumber = index + 1;
            const isCompleted = dayNumber <= completedDays;
            return (
              <div 
                key={dayNumber}
                className={`${styles.dayCircle} ${isCompleted ? styles.completed : styles.pending}`}
              >
                {isCompleted ? (
                  <span className={styles.checkmark}>‚úì</span>
                ) : (
                  <span className={styles.dayNumber}>{dayNumber}</span>
                )}
              </div>
            );
          })}
        </div>
      </div>

      <div className={styles.courseStats}>
        <div className={styles.statItem}>
          <span className={styles.statLabel}>–ü—Ä–æ–≥—Ä–µ—Å—Å:</span>
          <span className={styles.statValue}>
            {completedDays} –∏–∑ {totalDays} –¥–Ω–µ–π
          </span>
        </div>
        <div className={styles.statItem}>
          <span className={styles.statLabel}>–®–∞–≥–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ:</span>
          <span className={styles.statValue}>
            {completedSteps} –∏–∑ {totalSteps}
          </span>
        </div>
        <div className={styles.statItem}>
          <span className={styles.statLabel}>–ù–∞—á–∞—Ç:</span>
          <span className={styles.statValue}>
            {course.startedAt ? format(new Date(course.startedAt), "dd MMMM yyyy", { locale: ru }) : "–ù–µ —É–∫–∞–∑–∞–Ω–æ"}
          </span>
        </div>
        {isCompleted && course.completedAt && (
          <div className={styles.statItem}>
            <span className={styles.statLabel}>–ó–∞–≤–µ—Ä—à–µ–Ω:</span>
            <span className={styles.statValue}>
              {format(new Date(course.completedAt), "dd MMMM yyyy", { locale: ru })}
            </span>
          </div>
        )}
      </div>

      <div className={styles.courseActions}>
        {isInProgress && (
          <Link 
            href={`/trainings/${course.type}`}
            className={styles.continueButton}
          >
            –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–±—É—á–µ–Ω–∏–µ
          </Link>
        )}
        
        {!isCompleted && (
          <Link 
            href={`/trainings/${course.type}`}
            className={styles.viewButton}
          >
            –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫—É—Ä—Å
          </Link>
        )}
      </div>
    </div>
  );
}
