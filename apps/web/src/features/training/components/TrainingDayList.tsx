"use client";

import { memo, useCallback } from "react";
import Link from "next/link";

import { useCachedTrainingDays } from "@shared/hooks/useCachedTrainingDays";
import { useStepStore } from "@shared/stores/stepStore";
import { calculateDayStatus } from "@shared/utils/trainingCalculations";
import styles from "./TrainingDayList.module.css";
import { useOfflineStore } from "@shared/stores/offlineStore";

interface TrainingDayListProps {
  courseType: string;
  initialData?: {
    trainingDays: {
      trainingDayId: string;
      day: number;
      title: string;
      type: string;
      courseId: string;
      userStatus: string;
      estimatedDuration?: number;
      equipment?: string;
    }[];
    courseDescription: string | null;
    courseId: string | null;
    courseVideoUrl: string | null;
  } | null;
  initialError?: string | null;
}

const TrainingDayList = memo(function TrainingDayList({ 
  courseType, 
  initialData, 
  initialError 
}: TrainingDayListProps) {
  const { data, loading, error, refetch } = useCachedTrainingDays(courseType, {
    initialData,
    initialError
  });

  // –õ–æ–∫–∞–ª—å–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã —à–∞–≥–æ–≤ (–æ—Ñ–ª–∞–π–Ω-–∏—Å—Ç–∏–Ω–∞)
  const { stepStates } = useStepStore();

  // –î–æ–±–∞–≤–ª—è–µ–º –≤ getItemClass –¥–∏–Ω–∞–º–∏–∫—É –¥–ª—è —Ü–≤–µ—Ç–æ–≤
  const getItemClass = useCallback((status: string, dayNumber: number) => {
    let baseClass = `${styles.item} ${styles[`day${dayNumber % 2 === 1 ? 'Odd' : 'Even'}`]}`;
    if (status === "IN_PROGRESS") baseClass += ` ${styles.inprogress}`;
    if (status === "COMPLETED") baseClass += ` ${styles.completed}`;
    return baseClass;
  }, []);

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å –¥–ª—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ "–í—ã –∑–¥–µ—Å—å"
  const getCurrentDayNumber = useCallback((days: {
    day: number;
    courseId: string;
    userStatus: string;
  }[]) => {
    // 1. –ò—â–µ–º –ø–µ—Ä–≤—ã–π –¥–µ–Ω—å IN_PROGRESS
    const inProgressDay = days.find((day) => {
      const localStatus = calculateDayStatus(day.courseId, day.day, stepStates);
      const finalStatus = rank(localStatus) > rank(day.userStatus) ? localStatus : day.userStatus;
      return finalStatus === "IN_PROGRESS";
    });
    
    if (inProgressDay) return inProgressDay.day;

    // 2. –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π COMPLETED –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π
    let lastCompletedDay = 0;
    days.forEach((day) => {
      const localStatus = calculateDayStatus(day.courseId, day.day, stepStates);
      const finalStatus = rank(localStatus) > rank(day.userStatus) ? localStatus : day.userStatus;
      if (finalStatus === "COMPLETED") {
        lastCompletedDay = Math.max(lastCompletedDay, day.day);
      }
    });

    if (lastCompletedDay > 0 && lastCompletedDay < days.length) {
      return lastCompletedDay + 1;
    }

    // 3. –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é - –ø–µ—Ä–≤—ã–π –¥–µ–Ω—å
    return days[0]?.day || 1;
  }, [stepStates]);

  const typeLabels: Record<string, string> = {
    base: "–ë–∞–∑–æ–≤—ã–π –¥–µ–Ω—å",
    regular: "–¢—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã–π –¥–µ–Ω—å",
    introduction: "–í–≤–æ–¥–Ω—ã–π –¥–µ–Ω—å",
    test: "–ü—Ä–æ–≤–µ—Ä–æ—á–Ω—ã–π –∏–ª–∏ —ç–∫–∑–∞–º–µ–Ω–∞—Ü–∏–æ–Ω–Ω—ã–π –¥–µ–Ω—å",
    rest: "–î–µ–Ω—å –æ—Ç–¥—ã—Ö–∞",
  };

  const rank = (s?: string) => {
    if (s === "COMPLETED") return 2;
    if (s === "IN_PROGRESS" || s === "PAUSED") return 1;
    return 0; // NOT_STARTED –∏–ª–∏ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ
  };

  // –ò—Å–ø–æ–ª—å–∑—É–µ–º initialData –µ—Å–ª–∏ –µ—Å—Ç—å, –∏–Ω–∞—á–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ö—É–∫–∞
  const displayData = initialData || data;
  const displayError = initialError || error;
  const displayLoading = !initialData && loading;

  if (displayLoading) {
    return (
      <div className="flex justify-center items-center py-8">
        <div className="text-gray-600">–ó–∞–≥—Ä—É–∑–∫–∞ –¥–Ω–µ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫...</div>
      </div>
    );
  }

  if (displayError) {
    return (
      <div className="flex flex-col items-center py-8 space-y-4">
        <div className="text-red-600">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {displayError}</div>
        <button
          onClick={refetch}
          className="px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600"
        >
          –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
        </button>
      </div>
    );
  }

  if (!displayData || displayData.trainingDays.length === 0) {
    return (
      <div className="text-gray-600 py-8 text-center">
        –î–Ω–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
      </div>
    );
  }

  const currentDayNumber = getCurrentDayNumber(displayData.trainingDays);

  return (
    <ul className={styles.list}>
      {displayData.trainingDays.map((day) => {
        const isCurrent = day.day === currentDayNumber;
        
        return (
          <li
            key={`${day.courseId}-${day.day}`}
            className={(() => {
              // –í—ã—á–∏—Å–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å –¥–Ω—è –∏–∑ stepStore
              const localStatus = calculateDayStatus(day.courseId, day.day, stepStates);
              // –ù–µ –ø–æ–Ω–∏–∂–∞–µ–º —Å—Ç–∞—Ç—É—Å: –±–µ—Ä–µ–º –º–∞–∫—Å–∏–º—É–º –º–µ–∂–¥—É —Å–µ—Ä–≤–µ—Ä–Ω—ã–º –∏ –ª–æ–∫–∞–ª—å–Ω—ã–º
              const finalStatus = rank(localStatus) > rank(day.userStatus)
                ? localStatus
                : day.userStatus;
              return getItemClass(finalStatus, day.day);
            })()}
          >
            {isCurrent && (
              <div className={styles.currentIndicator}>
                <span>üìç</span>
                <span>–í—ã –∑–¥–µ—Å—å</span>
              </div>
            )}
            <Link
              href={`/trainings/${courseType}/${day.day}`}
              className={styles.link}
              prefetch={false}
              onClick={(e) => {
                // –ü—Ä–∏ –æ—Ñ–ª–∞–π–Ω-–Ω–∞–≤–∏–≥–∞—Ü–∏–∏ —Ñ–æ—Ä—Å–∏—Ä—É–µ–º –ø–æ–ª–Ω—É—é –Ω–∞–≤–∏–≥–∞—Ü–∏—é, —á—Ç–æ–±—ã SW –æ—Ç–¥–∞–ª HTML –∑–∞–≥–ª—É—à–∫—É
                const isOnline = useOfflineStore.getState().isOnline;
                if (!isOnline) {
                  e.preventDefault();
                  window.location.assign(`/trainings/${courseType}/${day.day}`);
                }
              }}
            >
              <div className={styles.timeBadge}>
                <div>{day.estimatedDuration}</div>
                <span>–º–∏–Ω</span>
              </div>
              <div className={styles.card}>
                <h2 className={styles.dayTitle}>{day.title}</h2>
                <p className={styles.subtitle}>({typeLabels[day.type] || day.type})</p>
                <p>–ß—Ç–æ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è:</p>
                <p className={styles.equipment}>{day.equipment || "–≤–∫—É—Å–Ω—è—à–∫–∏ –∏ —Ç–µ—Ä–ø–µ–Ω–∏–µ"}</p>
              </div>
            </Link>
            
          </li>
        );
      })}
    </ul>
  );
});

export default TrainingDayList;
