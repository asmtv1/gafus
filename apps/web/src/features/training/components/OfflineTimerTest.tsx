"use client";

import { useState, useEffect } from "react";
import { useStepStore } from "@shared/stores/stepStore";
import { useTimerStore } from "@shared/stores/timerStore";
import { useOfflineStore } from "@shared/stores/offlineStore";

interface OfflineTimerTestProps {
  courseId: string;
  day: number;
  stepIndex: number;
  durationSec: number;
}

export function OfflineTimerTest({
  courseId,
  day,
  stepIndex,
  durationSec,
}: OfflineTimerTestProps) {
  const [isOnline, setIsOnline] = useState(true);
  const [syncQueueLength, setSyncQueueLength] = useState(0);

  const { stepStates, initializeStep, pauseStep, resumeStep } = useStepStore();
  const {
    startTimer,
    stopTimer,
    pauseStepWithServer,
    resumeStepWithServer,
    canStartStep,
  } = useTimerStore();
  const { isOnline: offlineIsOnline, syncQueue } = useOfflineStore();

  const stepKey = `${courseId}-${day}-${stepIndex}`;
  const stepState = stepStates[stepKey];

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —à–∞–≥
  useEffect(() => {
    initializeStep(courseId, day, stepIndex, durationSec);
  }, [courseId, day, stepIndex, durationSec, initializeStep]);

  // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ç–∏
  useEffect(() => {
    setIsOnline(offlineIsOnline);
  }, [offlineIsOnline]);

  // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –æ—á–µ—Ä–µ–¥–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
  useEffect(() => {
    setSyncQueueLength(syncQueue.length);
  }, [syncQueue]);

  const handleStart = async () => {
    if (!canStartStep(courseId, day, stepIndex)) {
      alert("–û–¥–∏–Ω —à–∞–≥ —É–∂–µ –∞–∫—Ç–∏–≤–µ–Ω!");
      return;
    }

    try {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–µ—Ä–≤–µ—Ä–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –∑–∞–ø—É—Å–∫–∞ —Å –æ—Ñ–ª–∞–π–Ω –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π
      const { startStepWithServer } = useTimerStore.getState();
      await startStepWithServer(courseId, day, stepIndex, durationSec);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      const { startStep } = useStepStore.getState();
      await startStep(courseId, day, stepIndex, durationSec);
      
      // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä
      const timerStarted = startTimer(
        courseId,
        day,
        stepIndex,
        (timeLeft: number) => {
          // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –≤ stepStore
          const { updateTimeLeft } = useStepStore.getState();
          updateTimeLeft(courseId, day, stepIndex, timeLeft);
        },
        () => {
          // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç–∞–π–º–µ—Ä–∞
          const { finishStep } = useStepStore.getState();
          finishStep(courseId, day, stepIndex);
          console.log("–¢–∞–π–º–µ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω!");
        }
      );

      if (timerStarted) {
        console.log("–¢–∞–π–º–µ—Ä –∑–∞–ø—É—â–µ–Ω!");
      }
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ:", error);
      // –í—Å–µ —Ä–∞–≤–Ω–æ –≤—ã–ø–æ–ª–Ω—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫
      const { startStep } = useStepStore.getState();
      await startStep(courseId, day, stepIndex, durationSec);
      
      const timerStarted = startTimer(
        courseId,
        day,
        stepIndex,
        (timeLeft: number) => {
          const { updateTimeLeft } = useStepStore.getState();
          updateTimeLeft(courseId, day, stepIndex, timeLeft);
        },
        () => {
          const { finishStep } = useStepStore.getState();
          finishStep(courseId, day, stepIndex);
          console.log("–¢–∞–π–º–µ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω!");
        }
      );

      if (timerStarted) {
        console.log("–¢–∞–π–º–µ—Ä –∑–∞–ø—É—â–µ–Ω –ª–æ–∫–∞–ª—å–Ω–æ!");
      }
    }
  };

  const handlePause = async () => {
    try {
      await pauseStepWithServer(courseId, day, stepIndex);
      pauseStep(courseId, day, stepIndex);
      stopTimer(courseId, day, stepIndex);
      console.log("–¢–∞–π–º–µ—Ä –ø–æ—Å—Ç–∞–≤–ª–µ–Ω –Ω–∞ –ø–∞—É–∑—É!");
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—É–∑–µ:", error);
    }
  };

  const handleResume = async () => {
    try {
      await resumeStepWithServer(courseId, day, stepIndex, durationSec);
      resumeStep(courseId, day, stepIndex);
      
      // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä —Å–Ω–æ–≤–∞
      const timerStarted = startTimer(
        courseId,
        day,
        stepIndex,
        (timeLeft: number) => {
          const { updateTimeLeft } = useStepStore.getState();
          updateTimeLeft(courseId, day, stepIndex, timeLeft);
        },
        () => {
          const { finishStep } = useStepStore.getState();
          finishStep(courseId, day, stepIndex);
          console.log("–¢–∞–π–º–µ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω!");
        },
        true // isRestore
      );

      if (timerStarted) {
        console.log("–¢–∞–π–º–µ—Ä –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω!");
      }
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏:", error);
    }
  };

  const handleReset = async () => {
    try {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–µ—Ä–≤–µ—Ä–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é —Å–±—Ä–æ—Å–∞ —Å –æ—Ñ–ª–∞–π–Ω –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π
      const { resetStepWithServer } = useTimerStore.getState();
      await resetStepWithServer(courseId, day, stepIndex);
      
      // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä
      stopTimer(courseId, day, stepIndex);
      
      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      const { resetStep } = useStepStore.getState();
      resetStep(courseId, day, stepIndex, durationSec);
      
      console.log("–¢–∞–π–º–µ—Ä —Å–±—Ä–æ—à–µ–Ω!");
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ:", error);
      // –í—Å–µ —Ä–∞–≤–Ω–æ –≤—ã–ø–æ–ª–Ω—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π —Å–±—Ä–æ—Å
      stopTimer(courseId, day, stepIndex);
      const { resetStep } = useStepStore.getState();
      resetStep(courseId, day, stepIndex, durationSec);
      console.log("–¢–∞–π–º–µ—Ä —Å–±—Ä–æ—à–µ–Ω –ª–æ–∫–∞–ª—å–Ω–æ!");
    }
  };

  const formatTime = (seconds: number) => {
    const mins = Math.floor(seconds / 60);
    const secs = seconds % 60;
    return `${mins.toString().padStart(2, "0")}:${secs.toString().padStart(2, "0")}`;
  };

  return (
    <div style={{ padding: "20px", border: "1px solid #ccc", margin: "10px" }}>
      <h3>–¢–µ—Å—Ç –æ—Ñ–ª–∞–π–Ω —Ç–∞–π–º–µ—Ä–∞</h3>
      
      <div style={{ marginBottom: "10px" }}>
        <strong>–°—Ç–∞—Ç—É—Å —Å–µ—Ç–∏:</strong> {isOnline ? "üü¢ –û–Ω–ª–∞–π–Ω" : "üî¥ –û—Ñ–ª–∞–π–Ω"}
      </div>
      
      <div style={{ marginBottom: "10px" }}>
        <strong>–û—á–µ—Ä–µ–¥—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:</strong> {syncQueueLength} –¥–µ–π—Å—Ç–≤–∏–π
      </div>

      <div style={{ marginBottom: "10px" }}>
        <strong>–°—Ç–∞—Ç—É—Å —à–∞–≥–∞:</strong> {stepState?.status || "–ù–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω"}
      </div>

      <div style={{ marginBottom: "10px" }}>
        <strong>–û—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è:</strong> {stepState?.timeLeft ? formatTime(stepState.timeLeft) : "00:00"}
      </div>

      <div style={{ display: "flex", gap: "10px", marginBottom: "10px" }}>
        <button onClick={handleStart} disabled={stepState?.status === "IN_PROGRESS"}>
          –ù–∞—á–∞—Ç—å
        </button>
        
        <button 
          onClick={handlePause} 
          disabled={stepState?.status !== "IN_PROGRESS"}
        >
          –ü–∞—É–∑–∞
        </button>
        
        <button 
          onClick={handleResume} 
          disabled={stepState?.status !== "PAUSED"}
        >
          –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å
        </button>
        
        <button onClick={handleReset}>
          –°–±—Ä–æ—Å
        </button>
      </div>

      <div style={{ fontSize: "12px", color: "#666" }}>
        <p>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:</p>
        <ol>
          <li>–ù–∞–∂–º–∏—Ç–µ "–ù–∞—á–∞—Ç—å" –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–∞–π–º–µ—Ä–∞</li>
          <li>–û—Ç–∫–ª—é—á–∏—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç (DevTools ‚Üí Network ‚Üí Offline)</li>
          <li>–ù–∞–∂–º–∏—Ç–µ "–ü–∞—É–∑–∞" - –¥–µ–π—Å—Ç–≤–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å—Å—è –ª–æ–∫–∞–ª—å–Ω–æ</li>
          <li>–ù–∞–∂–º–∏—Ç–µ "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å" - –¥–µ–π—Å—Ç–≤–∏–µ –¥–æ–ª–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å—Å—è –≤ –æ—á–µ—Ä–µ–¥—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏</li>
          <li>–í–∫–ª—é—á–∏—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç - –¥–µ–π—Å—Ç–≤–∏—è –¥–æ–ª–∂–Ω—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å—Å—è</li>
        </ol>
      </div>
    </div>
  );
}
