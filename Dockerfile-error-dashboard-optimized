# syntax=docker/dockerfile:1

# Используем базовый образ
FROM node:20-alpine AS base
WORKDIR /app

# Установка pnpm
RUN corepack enable && corepack prepare pnpm@9.1.0 --activate

# Копируем только файлы зависимостей
COPY package.json pnpm-lock.yaml pnpm-workspace.yaml ./
COPY packages/*/package.json ./packages/*/
COPY apps/error-dashboard/package.json ./apps/error-dashboard/

# Устанавливаем зависимости
RUN pnpm install --no-frozen-lockfile

# Копируем исходный код всех пакетов
COPY packages ./packages
COPY apps/error-dashboard ./apps/error-dashboard

# Генерируем Prisma client
RUN cd packages/prisma && pnpm db:generate

# Создаем .prisma папку в node_modules
RUN mkdir -p /app/node_modules/.prisma
RUN find /app/node_modules/.pnpm -name ".prisma" -type d -exec cp -r {}/client /app/node_modules/.prisma/ \;
RUN find /app/node_modules/.pnpm -name ".prisma" -type d -exec cp -r {}/schema.prisma /app/node_modules/.prisma/ \;

# Билдим все пакеты
RUN pnpm build --filter @gafus/error-dashboard

# ─────────────────────────────────────────────
# Stage 1: runner — минимальный production
# ─────────────────────────────────────────────
FROM node:20-alpine AS runner
WORKDIR /app

# Создаем пользователя для безопасности
RUN addgroup --system --gid 1001 nodejs
RUN adduser --system --uid 1001 nextjs

# Установка pnpm
RUN corepack enable && corepack prepare pnpm@9.1.0 --activate

# Копируем только production зависимости
COPY package.json pnpm-lock.yaml pnpm-workspace.yaml ./
COPY packages/*/package.json ./packages/*/
COPY apps/error-dashboard/package.json ./apps/error-dashboard/

# Устанавливаем только production зависимости
RUN pnpm install --frozen-lockfile --prod --ignore-scripts

# Копируем только нужные собранные пакеты
COPY --from=base /app/packages/types ./packages/types
COPY --from=base /app/packages/prisma ./packages/prisma
COPY --from=base /app/packages/auth ./packages/auth
COPY --from=base /app/packages/csrf ./packages/csrf
COPY --from=base /app/packages/error-handling ./packages/error-handling
COPY --from=base /app/packages/react-query ./packages/react-query
COPY --from=base /app/packages/ui-components ./packages/ui-components

# Копируем собранное приложение (без public папки, так как её нет)
COPY --from=base /app/apps/error-dashboard/.next/standalone ./
COPY --from=base /app/apps/error-dashboard/.next/static ./.next/static

# Копируем Prisma schema и client
COPY --from=base /app/packages/prisma/schema.prisma ./packages/prisma/schema.prisma
COPY --from=base /app/node_modules/.prisma ./node_modules/.prisma

# Устанавливаем права доступа
RUN chown -R nextjs:nodejs /app
USER nextjs

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
  CMD wget --no-verbose --tries=1 --spider http://localhost:3003/api/ping || exit 1

# Запускаем приложение
CMD ["node", "apps/error-dashboard/server.js"]
