name: Manual Deploy

on:
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment to deploy to"
        required: true
        default: "production"
        type: choice
        options:
          - staging
          - production
      app:
        description: "Application to deploy"
        required: true
        default: "all"
        type: choice
        options:
          - web
          - trainer-panel
          - error-dashboard
          - worker
          - bull-board
          - telegram-bot
          - all

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: asmtv1/gafus

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to ${{ github.event.inputs.environment }}
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          password: ${{ secrets.SERVER_PASSWORD }}
          port: ${{ secrets.SERVER_PORT }}
          script: |
            set -e
            echo "🚀 Manual deployment to ${{ github.event.inputs.environment }} started..."

            cd /root/gafus
            git pull origin main

            # Create uploads directories if they don't exist
            mkdir -p uploads/avatars uploads/pets uploads/courses uploads/shared
            chmod -R 755 uploads/

            # Create public uploads directories
            mkdir -p apps/web/public/uploads/avatars
            mkdir -p apps/web/public/uploads/pets
            mkdir -p apps/web/public/uploads/courses
            mkdir -p apps/web/public/uploads/shared
            mkdir -p apps/trainer-panel/public/uploads/shared

            # Set proper permissions
            chmod -R 755 apps/web/public/uploads/
            chmod -R 755 apps/trainer-panel/public/uploads/

            if [ "${{ github.event.inputs.environment }}" = "production" ]; then
              echo "🏭 Deploying to production..."
              
                          # Pull latest images from registry
            docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-web:latest
            docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-trainer-panel:latest
            docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-error-dashboard:latest
            docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-worker:latest
            docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-bull-board:latest
            docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-telegram-bot:latest
            docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-prisma:latest

              # Tag images for local use
              docker tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-web:latest gafus-web:latest
              docker tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-trainer-panel:latest trainer-panel:latest
              docker tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-error-dashboard:latest error-dashboard:latest
              docker tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-worker:latest gafus-worker:latest
              docker tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-bull-board:latest gafus-bull-board:latest
              docker tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-telegram-bot:latest gafus-telegram-bot:latest
              
              # Stop existing containers
              docker-compose -f docker-compose.prod.yml down || true
              
              # Start all services
              docker-compose -f docker-compose.prod.yml up -d

              # Wait for services to be ready
              sleep 15

              # Run Prisma migrations
              echo "🗄️ Running Prisma migrations..."
              docker-compose -f docker-compose.prod.yml exec -T postgres psql -U gafus -d gafus -c "SELECT 1;" > /dev/null 2>&1 || sleep 5
              
              # Run migrations using the web container
              docker-compose -f docker-compose.prod.yml exec -T web pnpm --filter @gafus/prisma run prisma:migrate:deploy || echo "Migrations failed, continuing..."
              
            else
              echo "🧪 Deploying to staging..."
              # Add staging deployment logic here
            fi

            echo "✅ Manual deployment completed!"

            # Show running services
            docker-compose -f docker-compose.prod.yml ps
