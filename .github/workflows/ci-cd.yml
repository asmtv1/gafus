name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: asmtv1/gafus

jobs:
  # Security and code quality checks
  security:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "pnpm"
          cache-dependency-path: "**/pnpm-lock.yaml"

      - name: Install dependencies
        run: pnpm install

      - name: Run security audit
        run: pnpm audit --audit-level moderate

      - name: Run ESLint
        run: |
          cd apps/web
          pnpm lint

      - name: Check for secrets
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: HEAD~1

  # Build and test web app
  build-web:
    runs-on: ubuntu-latest
    needs: security
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "pnpm"
          cache-dependency-path: "**/pnpm-lock.yaml"

      - name: Install dependencies
        run: pnpm install

      - name: Build web app
        run: |
          cd apps/web
          pnpm build

      - name: Test web app
        run: |
          cd apps/web
          pnpm test || echo "No tests found"

      - name: Run type check
        run: |
          cd apps/web
          pnpm typecheck

  # Build trainer-panel app
  build-trainer-panel:
    runs-on: ubuntu-latest
    needs: security
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "pnpm"
          cache-dependency-path: "**/pnpm-lock.yaml"

      - name: Install dependencies
        run: pnpm install

      - name: Build trainer-panel app
        run: |
          cd apps/trainer-panel
          pnpm build

      - name: Test trainer-panel app
        run: |
          cd apps/trainer-panel
          pnpm test || echo "No tests found"

      - name: Run type check
        run: |
          cd apps/trainer-panel
          pnpm typecheck

  # Build error-dashboard app
  build-error-dashboard:
    runs-on: ubuntu-latest
    needs: security
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "pnpm"
          cache-dependency-path: "**/pnpm-lock.yaml"

      - name: Install dependencies
        run: pnpm install

      - name: Build error-dashboard app
        run: |
          cd apps/error-dashboard
          pnpm build

      - name: Test error-dashboard app
        run: |
          cd apps/error-dashboard
          pnpm test || echo "No tests found"

      - name: Run type check
        run: |
          cd apps/error-dashboard
          pnpm typecheck

  # Build Docker image
  build-image:
    needs: [security, build-web, build-trainer-panel, build-error-dashboard]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-web
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./apps/web
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

  # Deploy to staging (develop branch)
  deploy-staging:
    needs: [security, build-web, build-trainer-panel, build-error-dashboard]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    runs-on: ubuntu-latest
    environment: staging
    steps:
      - name: Deploy to staging
        run: echo "Deploy to staging environment"

  # Deploy to production (main branch)
  deploy-production:
    needs: [security, build-web, build-trainer-panel, build-error-dashboard, build-image]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to production server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          password: ${{ secrets.SERVER_PASSWORD }}
          port: ${{ secrets.SERVER_PORT }}
          script: |
            set -e
            echo "üöÄ Starting production deployment..."

            # Navigate to project directory
            cd /root/gafus

            # Pull latest changes
            git pull origin main

            # Create uploads directories if they don't exist
            mkdir -p uploads/avatars uploads/pets uploads/courses
            chmod -R 755 uploads/

            # Stop existing containers
            docker-compose -f docker-compose.prod.yml down || true

            # Pull latest images
            docker-compose -f docker-compose.prod.yml pull

            # Start services
            docker-compose -f docker-compose.prod.yml up -d

            # Wait for services to be ready
            sleep 10

            # Check service health
            if docker-compose -f docker-compose.prod.yml ps | grep -q "Up"; then
              echo "‚úÖ Deployment completed successfully!"
              
              # Clean up unused images
              docker image prune -f
            else
              echo "‚ùå Deployment failed - services not running"
              exit 1
            fi

  # Post-deployment checks
  health-check:
    needs: deploy-production
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    steps:
      - name: Health check
        run: |
          echo "üè• Running post-deployment health checks..."
          # Add your health check logic here
          # Example: curl -f https://gafus.ru/health
