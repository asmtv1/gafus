name: Deploy Only

on:
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment to deploy to"
        required: true
        default: "production"
        type: choice
        options:
          - production
          - staging

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          password: ${{ secrets.SERVER_PASSWORD }}
          port: ${{ secrets.SERVER_PORT }}
          command_timeout: 60m
          script: |
            set -e
            echo "üöÄ Starting deployment to ${{ github.event.inputs.environment }}..."

            # Install basic tools first
            echo "üîß Installing basic tools..."
            apt-get update
            apt-get install -y curl wget

            # Install Docker if not present
            if ! command -v docker &> /dev/null; then
              echo "üê≥ Installing Docker..."
              # Use apt for Ubuntu 20.04 (focal)
              apt-get install -y apt-transport-https ca-certificates gnupg lsb-release
              curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
              echo "deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu focal stable" | tee /etc/apt/sources.list.d/docker.list > /dev/null
              apt-get update
              apt-get install -y docker-ce docker-ce-cli containerd.io
              systemctl start docker
              systemctl enable docker
            fi

            # Install Docker Compose if not present
            if ! command -v docker-compose &> /dev/null; then
              echo "üê≥ Installing Docker Compose..."
              curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
              chmod +x /usr/local/bin/docker-compose
            fi

            # Login to GitHub Container Registry
            echo "üîê Logging in to GitHub Container Registry..."
            echo "${{ secrets.GHCR_TOKEN }}" | docker login ghcr.io -u asmtv1 --password-stdin

            # Navigate to project directory
            cd /root/gafus || {
              echo "Directory /root/gafus not found, creating it..."
              mkdir -p /root/gafus
              cd /root/gafus
            }

            # Initialize git repository if it doesn't exist
            if [ ! -d .git ]; then
              echo "Git repository not found, initializing..."
              git init
              git remote add origin https://${{ secrets.GH_PAT }}@github.com/asmtv1/gafus.git
            fi

            # Ensure we have the correct remote
            git remote set-url origin https://${{ secrets.GH_PAT }}@github.com/asmtv1/gafus.git

            # Pull latest changes
            git pull origin main

            # Create uploads directories if they don't exist
            mkdir -p packages/public-assets/public/uploads/avatars
            mkdir -p packages/public-assets/public/uploads/pets
            mkdir -p packages/public-assets/public/uploads/courses
            mkdir -p packages/public-assets/public/uploads/shared
            chmod -R 755 packages/public-assets/public/uploads/

            # –°–æ–∑–¥–∞–µ–º –±—ç–∫–∞–ø –ë–î –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫ –ø–µ—Ä–µ–¥ –æ—Å—Ç–∞–Ω–æ–≤–∫–æ–π
            ./ci-cd/scripts/backup-to-yandex.sh || echo "‚ö†Ô∏è –ë—ç–∫–∞–ø –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫ –Ω–µ —É–¥–∞–ª—Å—è, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –¥–µ–ø–ª–æ–π"
            
            # Stop existing containers and clean up (—Å–æ—Ö—Ä–∞–Ω—è–µ–º volumes –¥–ª—è –ë–î)
            docker-compose -f ci-cd/docker/docker-compose.prod.yml down --remove-orphans || true
            docker container prune -f
            docker image prune -f

            # Pull latest images from registry in parallel (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –æ–±—Ä–∞–∑—ã)
            echo "üì• Pulling latest Docker images in parallel..."
            pids=""
            docker pull ghcr.io/asmtv1/gafus-web:latest & pids="$pids $!"
            docker pull ghcr.io/asmtv1/gafus-trainer-panel:latest & pids="$pids $!"
            docker pull ghcr.io/asmtv1/gafus-error-dashboard:latest & pids="$pids $!"
            docker pull ghcr.io/asmtv1/gafus-worker:latest & pids="$pids $!"
            docker pull ghcr.io/asmtv1/gafus-bull-board:latest & pids="$pids $!"
            docker pull ghcr.io/asmtv1/gafus-telegram-bot:latest & pids="$pids $!"
            docker pull ghcr.io/asmtv1/gafus-prisma:latest & pids="$pids $!"
            pull_failed=0
            for pid in $pids; do
              if ! wait $pid; then
                pull_failed=1
              fi
            done
            if [ "$pull_failed" -ne 0 ]; then
              echo "‚ùå One or more docker pulls failed"
              exit 1
            fi

            # Tag images for local use
            docker tag ghcr.io/asmtv1/gafus-web:latest gafus-web:latest
            docker tag ghcr.io/asmtv1/gafus-trainer-panel:latest trainer-panel:latest
            docker tag ghcr.io/asmtv1/gafus-error-dashboard:latest error-dashboard:latest
            docker tag ghcr.io/asmtv1/gafus-worker:latest gafus-worker:latest
            docker tag ghcr.io/asmtv1/gafus-bull-board:latest gafus-bull-board:latest
            docker tag ghcr.io/asmtv1/gafus-telegram-bot:latest gafus-telegram-bot:latest
            docker tag ghcr.io/asmtv1/gafus-prisma:latest gafus-prisma:latest

            # Start services
            echo "üöÄ Starting services..."
            docker-compose -f ci-cd/docker/docker-compose.prod.yml up -d --force-recreate

            # Wait for services to be ready
            sleep 15

            # Run Prisma migrations
            echo "üóÑÔ∏è Running Prisma migrations..."
            docker-compose -f ci-cd/docker/docker-compose.prod.yml exec -T postgres psql -U gafus -d gafus -c "SELECT 1;" > /dev/null 2>&1 || sleep 5

            # Run migrations using the dedicated Prisma container
            docker-compose -f ci-cd/docker/docker-compose.prod.yml exec -T prisma pnpm run prisma:migrate:deploy || echo "Migrations failed, continuing..."

            # Check service health
            if docker-compose -f ci-cd/docker/docker-compose.prod.yml ps | grep -q "Up"; then
              echo "‚úÖ Deployment completed successfully!"
              
                          # Clean up unused images and containers
            docker image prune -f
            docker container prune -f
            docker system prune -f
            else
              echo "‚ùå Deployment failed - services not running"
              exit 1
            fi
