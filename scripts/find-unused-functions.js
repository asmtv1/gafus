#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –≤ –ø—Ä–æ–µ–∫—Ç–µ
 * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç TypeScript/JavaScript —Ñ–∞–π–ª—ã –∏ –Ω–∞—Ö–æ–¥–∏—Ç —Ñ—É–Ω–∫—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –≤—ã–∑—ã–≤–∞—é—Ç—Å—è
 */

const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');

// –¶–≤–µ—Ç–∞ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
const colors = {
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  magenta: '\x1b[35m',
  cyan: '\x1b[36m',
  reset: '\x1b[0m',
  bold: '\x1b[1m'
};

// –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
const IGNORE_PATTERNS = [
  'node_modules',
  '.next',
  'dist',
  'build',
  '.git',
  'coverage',
  '.turbo',
  '*.d.ts',
  '*.map',
  '*.js.map'
];

// –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π (–∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∏–∑–≤–Ω–µ)
const EXPORT_PATTERNS = [
  /^export\s+(default\s+)?(async\s+)?function/,
  /^export\s+(default\s+)?(async\s+)?const\s+\w+\s*=\s*(async\s+)?\(/,
  /^export\s+(default\s+)?(async\s+)?const\s+\w+\s*=\s*(async\s+)?function/,
  /^export\s+{\s*\w+/,
  /^export\s+\*\s+from/,
  /module\.exports\s*=/,
  /exports\.\w+\s*=/
];

// –§—É–Ω–∫—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å (—Å–∏—Å—Ç–µ–º–Ω—ã–µ –∏–ª–∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ)
const IGNORE_FUNCTIONS = [
  'main',
  'default',
  'index',
  'handler',
  'middleware',
  'getServerSideProps',
  'getStaticProps',
  'getStaticPaths',
  'getInitialProps',
  'componentDidMount',
  'componentDidUpdate',
  'componentWillUnmount',
  'useEffect',
  'useState',
  'useCallback',
  'useMemo',
  'useRef',
  'useContext',
  'useReducer',
  'useLayoutEffect',
  'useImperativeHandle',
  'useDebugValue',
  'useDeferredValue',
  'useTransition',
  'useId',
  'useSyncExternalStore',
  'useInsertionEffect'
];

class UnusedFunctionsFinder {
  constructor() {
    this.functions = new Map(); // functionName -> { file, line, isExported, isUsed }
    this.functionCalls = new Set();
    this.files = [];
    this.results = [];
  }

  // –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ —Å–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã –ø—Ä–æ–µ–∫—Ç–∞
  collectFiles(dir = process.cwd()) {
    try {
      const items = fs.readdirSync(dir);
      
      for (const item of items) {
        const fullPath = path.join(dir, item);
        const stat = fs.statSync(fullPath);
        
        if (stat.isDirectory()) {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –ª–∏ –º—ã —ç—Ç—É –ø–∞–ø–∫—É
          const shouldIgnore = IGNORE_PATTERNS.some(pattern => {
            if (pattern.includes('*')) {
              return item.includes(pattern.replace('*', ''));
            }
            return item === pattern;
          });
          
          if (!shouldIgnore) {
            this.collectFiles(fullPath);
          }
        } else if (stat.isFile()) {
          const ext = path.extname(item);
          if (['.ts', '.tsx', '.js', '.jsx'].includes(ext)) {
            this.files.push(fullPath);
          }
        }
      }
    } catch (error) {
      console.warn(`${colors.yellow}–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –ø–∞–ø–∫—É ${dir}: ${error.message}${colors.reset}`);
    }
  }

  // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ —Ñ–∞–π–ª–∞
  extractFunctions(filePath) {
    try {
      const content = fs.readFileSync(filePath, 'utf8');
      const lines = content.split('\n');
      
      lines.forEach((line, index) => {
        const trimmedLine = line.trim();
        
        // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∏ –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
        if (trimmedLine.startsWith('//') || trimmedLine.startsWith('/*') || trimmedLine.startsWith('*') || !trimmedLine) {
          return;
        }
        
        // –ò—â–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π
        const functionPatterns = [
          // function name() {}
          /^(export\s+)?(async\s+)?function\s+([a-zA-Z_$][a-zA-Z0-9_$]*)\s*\(/,
          // const name = function() {}
          /^(export\s+)?(async\s+)?const\s+([a-zA-Z_$][a-zA-Z0-9_$]*)\s*=\s*(async\s+)?function\s*\(/,
          // const name = () => {}
          /^(export\s+)?(async\s+)?const\s+([a-zA-Z_$][a-zA-Z0-9_$]*)\s*=\s*(async\s+)?\(/,
          // const name = async () => {}
          /^(export\s+)?const\s+([a-zA-Z_$][a-zA-Z0-9_$]*)\s*=\s*async\s*\(/,
          // class methods
          /^\s*([a-zA-Z_$][a-zA-Z0-9_$]*)\s*\([^)]*\)\s*[:{]/,
          // React components
          /^(export\s+)?(default\s+)?(async\s+)?function\s+([A-Z][a-zA-Z0-9_$]*)\s*\(/,
          /^(export\s+)?(default\s+)?const\s+([A-Z][a-zA-Z0-9_$]*)\s*=\s*(async\s+)?\(/
        ];
        
        for (const pattern of functionPatterns) {
          const match = trimmedLine.match(pattern);
          if (match) {
            const functionName = match[3] || match[4] || match[2];
            
            if (functionName && !IGNORE_FUNCTIONS.includes(functionName)) {
              const isExported = trimmedLine.includes('export') || EXPORT_PATTERNS.some(p => p.test(trimmedLine));
              
              this.functions.set(functionName, {
                file: filePath,
                line: index + 1,
                isExported,
                isUsed: false,
                declaration: trimmedLine
              });
            }
          }
        }
      });
    } catch (error) {
      console.warn(`${colors.yellow}–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª ${filePath}: ${error.message}${colors.reset}`);
    }
  }

  // –ò—â–µ–º –≤—ã–∑–æ–≤—ã —Ñ—É–Ω–∫—Ü–∏–π
  findFunctionCalls(filePath) {
    try {
      const content = fs.readFileSync(filePath, 'utf8');
      
      // –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –≤—ã–∑–æ–≤–æ–≤ —Ñ—É–Ω–∫—Ü–∏–π
      const callPatterns = [
        // functionName()
        /([a-zA-Z_$][a-zA-Z0-9_$]*)\s*\(/g,
        // obj.functionName()
        /\.([a-zA-Z_$][a-zA-Z0-9_$]*)\s*\(/g,
        // import { functionName }
        /import\s*\{\s*([^}]+)\s*\}\s*from/g,
        // import functionName
        /import\s+([a-zA-Z_$][a-zA-Z0-9_$]*)\s+from/g,
        // require('module')
        /require\s*\(\s*['"`]([^'"`]+)['"`]\s*\)/g
      ];
      
      callPatterns.forEach(pattern => {
        let match;
        while ((match = pattern.exec(content)) !== null) {
          const functionName = match[1];
          if (functionName && typeof functionName === 'string') {
            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã
            const names = functionName.split(',').map(name => name.trim().split(' as ')[0].trim());
            names.forEach(name => this.functionCalls.add(name));
          }
        }
      });
    } catch (error) {
      console.warn(`${colors.yellow}–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª ${filePath}: ${error.message}${colors.reset}`);
    }
  }

  // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π
  analyzeUsage() {
    for (const [functionName, func] of this.functions) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ª–∏ —Ñ—É–Ω–∫—Ü–∏—è
      const isCalled = this.functionCalls.has(functionName);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è –ª–∏ —Ñ—É–Ω–∫—Ü–∏—è (–º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∏–∑–≤–Ω–µ)
      if (func.isExported) {
        // –î–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –ø—Ä–æ–≤–µ—Ä—è–µ–º –±–æ–ª–µ–µ —Ç—â–∞—Ç–µ–ª—å–Ω–æ
        const isUsedExternally = this.checkExternalUsage(functionName);
        func.isUsed = isCalled || isUsedExternally;
      } else {
        func.isUsed = isCalled;
      }
      
      if (!func.isUsed) {
        this.results.push({
          name: functionName,
          file: func.file,
          line: func.line,
          declaration: func.declaration,
          isExported: func.isExported
        });
      }
    }
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–Ω–µ—à–Ω–µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
  checkExternalUsage(functionName) {
    // –ò—â–µ–º –∏–º–ø–æ—Ä—Ç—ã —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –≤ –¥—Ä—É–≥–∏—Ö —Ñ–∞–π–ª–∞—Ö
    for (const file of this.files) {
      try {
        const content = fs.readFileSync(file, 'utf8');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –∏–º–ø–æ—Ä—Ç–∞
        const importPatterns = [
          new RegExp(`import\\s*\\{[^}]*\\b${functionName}\\b[^}]*\\}`, 'g'),
          new RegExp(`import\\s+${functionName}\\b`, 'g'),
          new RegExp(`from\\s+['"][^'"]*['"]`, 'g')
        ];
        
        for (const pattern of importPatterns) {
          if (pattern.test(content)) {
            return true;
          }
        }
      } catch (error) {
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤
      }
    }
    return false;
  }

  // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
  formatResults() {
    if (this.results.length === 0) {
      console.log(`${colors.green}${colors.bold}‚úÖ –û—Ç–ª–∏—á–Ω–æ! –ù–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.${colors.reset}`);
      return;
    }

    console.log(`${colors.red}${colors.bold}üîç –ù–∞–π–¥–µ–Ω–æ ${this.results.length} –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π:${colors.reset}\n`);
    
    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ñ–∞–π–ª–∞–º
    const groupedResults = {};
    this.results.forEach(result => {
      const relativePath = path.relative(process.cwd(), result.file);
      if (!groupedResults[relativePath]) {
        groupedResults[relativePath] = [];
      }
      groupedResults[relativePath].push(result);
    });

    // –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    Object.entries(groupedResults).forEach(([file, functions]) => {
      console.log(`${colors.blue}${colors.bold}üìÅ ${file}${colors.reset}`);
      
      functions.forEach(func => {
        const exportStatus = func.isExported ? 
          `${colors.yellow}[–≠–ö–°–ü–û–†–¢]${colors.reset}` : 
          `${colors.magenta}[–õ–û–ö–ê–õ–¨]${colors.reset}`;
        
        console.log(`  ${colors.cyan}${func.name}${colors.reset} ${exportStatus} - —Å—Ç—Ä–æ–∫–∞ ${colors.yellow}${func.line}${colors.reset}`);
        console.log(`    ${colors.dim}${func.declaration}${colors.reset}\n`);
      });
    });

    // –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    const exported = this.results.filter(f => f.isExported).length;
    const local = this.results.filter(f => !f.isExported).length;
    
    console.log(`${colors.bold}üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:${colors.reset}`);
    console.log(`  ‚Ä¢ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏: ${colors.yellow}${exported}${colors.reset}`);
    console.log(`  ‚Ä¢ –õ–æ–∫–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏: ${colors.magenta}${local}${colors.reset}`);
    console.log(`  ‚Ä¢ –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: ${colors.blue}${Object.keys(groupedResults).length}${colors.reset}`);
  }

  // –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –∑–∞–ø—É—Å–∫–∞
  run() {
    console.log(`${colors.bold}${colors.cyan}üîç –ü–æ–∏—Å–∫ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –≤ –ø—Ä–æ–µ–∫—Ç–µ...${colors.reset}\n`);
    
    // –°–æ–±–∏—Ä–∞–µ–º —Ñ–∞–π–ª—ã —Ç–æ–ª—å–∫–æ –∏–∑ –ø–∞–ø–æ–∫ apps –∏ packages
    console.log(`${colors.yellow}üìÇ –°–±–æ—Ä —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞...${colors.reset}`);
    const appsDir = path.join(process.cwd(), 'apps');
    const packagesDir = path.join(process.cwd(), 'packages');
    
    if (fs.existsSync(appsDir)) {
      this.collectFiles(appsDir);
    }
    if (fs.existsSync(packagesDir)) {
      this.collectFiles(packagesDir);
    }
    
    console.log(`   –ù–∞–π–¥–µ–Ω–æ ${this.files.length} —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞\n`);

    // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ñ—É–Ω–∫—Ü–∏–∏
    console.log(`${colors.yellow}üîß –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π...${colors.reset}`);
    this.files.forEach(file => {
      this.extractFunctions(file);
    });
    console.log(`   –ù–∞–π–¥–µ–Ω–æ ${this.functions.size} —Ñ—É–Ω–∫—Ü–∏–π\n`);

    // –ò—â–µ–º –≤—ã–∑–æ–≤—ã —Ñ—É–Ω–∫—Ü–∏–π
    console.log(`${colors.yellow}üìû –ü–æ–∏—Å–∫ –≤—ã–∑–æ–≤–æ–≤ —Ñ—É–Ω–∫—Ü–∏–π...${colors.reset}`);
    this.files.forEach(file => {
      this.findFunctionCalls(file);
    });
    console.log(`   –ù–∞–π–¥–µ–Ω–æ ${this.functionCalls.size} –≤—ã–∑–æ–≤–æ–≤\n`);

    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
    console.log(`${colors.yellow}üßÆ –ê–Ω–∞–ª–∏–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è...${colors.reset}`);
    this.analyzeUsage();

    // –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    console.log(`${colors.yellow}üìã –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞...${colors.reset}\n`);
    this.formatResults();

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–¥ –≤—ã—Ö–æ–¥–∞
    return this.results.length > 0 ? 1 : 0;
  }
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
if (require.main === module) {
  const finder = new UnusedFunctionsFinder();
  const exitCode = finder.run();
  process.exit(exitCode);
}

module.exports = UnusedFunctionsFinder;
