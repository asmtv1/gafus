#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –≤ –ø—Ä–æ–µ–∫—Ç–µ GAFUS
 * –ó–∞–ø—É—Å–∫: node scripts/check-circular-deps.js
 */

import { execSync } from "child_process";

const PROJECT_ROOT = process.cwd();

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
function checkCircularDependencies() {
  console.log("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏...");

  try {
    // –ó–∞–ø—É—Å–∫–∞–µ–º ESLint —Å –ø—Ä–∞–≤–∏–ª–æ–º no-cycle
    const result = execSync("pnpm lint --format=compact | grep 'import/no-cycle' || true", {
      cwd: PROJECT_ROOT,
      encoding: "utf8",
    });

    if (result.trim()) {
      console.log("‚ùå –ù–∞–π–¥–µ–Ω—ã —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:");
      console.log(result);
      return false;
    } else {
      console.log("‚úÖ –¶–∏–∫–ª–∏—á–µ—Å–∫–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã");
      return true;
    }
  } catch (error) {
    console.log("‚úÖ ESLint –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ");
    return true;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –∏–º–ø–æ—Ä—Ç–æ–≤
function checkImportIssues() {
  console.log("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã...");

  try {
    // –ó–∞–ø—É—Å–∫–∞–µ–º ESLint —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ –∏–º–ø–æ—Ä—Ç–æ–≤
    const result = execSync(
      "pnpm lint --format=compact | grep -E '(import/no-unresolved|import/named)' || true",
      { cwd: PROJECT_ROOT, encoding: "utf8" },
    );

    if (result.trim()) {
      console.log("‚ùå –ù–∞–π–¥–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å –∏–º–ø–æ—Ä—Ç–∞–º–∏:");
      console.log(result);
      return false;
    } else {
      console.log("‚úÖ –ü—Ä–æ–±–ª–µ–º—ã —Å –∏–º–ø–æ—Ä—Ç–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã");
      return true;
    }
  } catch (error) {
    console.log("‚úÖ ESLint –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–æ–≤ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ");
    return true;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è any
function checkAnyUsage() {
  console.log("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ any...");

  try {
    // –ò—â–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã —Å any, –∏—Å–∫–ª—é—á–∞—è —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
    const result = execSync(
      "grep -r 'any' --include='*.ts' --include='*.tsx' apps/ packages/ | grep -v 'node_modules' | grep -v 'migrations' | grep -v '.next' | grep -v 'dist' || true",
      { cwd: PROJECT_ROOT, encoding: "utf8" },
    );

    if (result.trim()) {
      console.log("‚ùå –ù–∞–π–¥–µ–Ω—ã —Ñ–∞–π–ª—ã —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º any:");
      console.log(result);
      return false;
    } else {
      console.log("‚úÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ any –Ω–µ –Ω–∞–π–¥–µ–Ω–æ");
      return true;
    }
  } catch (error) {
    console.log("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ any –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ");
    return true;
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
function main() {
  console.log("üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞ GAFUS\n");

  const results = {
    circularDeps: checkCircularDependencies(),
    importIssues: checkImportIssues(),
    anyUsage: checkAnyUsage(),
  };

  console.log("\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏:");
  console.log(`–¶–∏–∫–ª–∏—á–µ—Å–∫–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: ${results.circularDeps ? "‚úÖ" : "‚ùå"}`);
  console.log(`–ü—Ä–æ–±–ª–µ–º—ã —Å –∏–º–ø–æ—Ä—Ç–∞–º–∏: ${results.importIssues ? "‚úÖ" : "‚ùå"}`);
  console.log(`–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ any: ${results.anyUsage ? "‚úÖ" : "‚ùå"}`);

  const allPassed = Object.values(results).every(Boolean);

  if (allPassed) {
    console.log("\nüéâ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!");
    process.exit(0);
  } else {
    console.log("\n‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã. –¢—Ä–µ–±—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ.");
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
if (import.meta.url === `file://${process.argv[1]}`) {
  main();
}
