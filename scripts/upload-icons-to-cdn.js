#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ PWA –∏–∫–æ–Ω–æ–∫ –≤ CDN
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ CI/CD –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∏–∫–æ–Ω–æ–∫
 */

const { S3Client, PutObjectCommand } = require("@aws-sdk/client-s3");
const fs = require("fs");
const path = require("path");
const mime = require("mime-types");

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è Yandex Object Storage
const s3Client = new S3Client({
  endpoint: "https://storage.yandexcloud.net",
  region: "ru-central1",
  credentials: {
    accessKeyId: process.env.YC_ACCESS_KEY_ID || "",
    secretAccessKey: process.env.YC_SECRET_ACCESS_KEY || "",
  },
});

const BUCKET_NAME = "gafus-media";
const ICONS_DIR = path.join(__dirname, "../apps/web/public/icons");

async function uploadIconsToCDN() {
  try {
    console.log("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É PWA –∏–∫–æ–Ω–æ–∫ –≤ CDN...");
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    if (!process.env.YC_ACCESS_KEY_ID || !process.env.YC_SECRET_ACCESS_KEY) {
      throw new Error("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è YC_ACCESS_KEY_ID –∏–ª–∏ YC_SECRET_ACCESS_KEY");
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–∞–ø–∫–∏ —Å –∏–∫–æ–Ω–∫–∞–º–∏
    if (!fs.existsSync(ICONS_DIR)) {
      throw new Error(`‚ùå –ü–∞–ø–∫–∞ —Å –∏–∫–æ–Ω–∫–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: ${ICONS_DIR}`);
    }

    const files = fs.readdirSync(ICONS_DIR);
    const imageFiles = files.filter(file => {
      const ext = path.extname(file).toLowerCase();
      return ['.png', '.jpg', '.jpeg', '.webp', '.svg'].includes(ext);
    });

    if (imageFiles.length === 0) {
      throw new Error("‚ùå –í –ø–∞–ø–∫–µ —Å –∏–∫–æ–Ω–∫–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π");
    }

    console.log(`üìÅ –ù–∞–π–¥–µ–Ω–æ ${imageFiles.length} —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏:`);
    imageFiles.forEach(file => console.log(`  - ${file}`));

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞–∂–¥—ã–π —Ñ–∞–π–ª
    const uploadPromises = imageFiles.map(async (file) => {
      const filePath = path.join(ICONS_DIR, file);
      const fileContent = fs.readFileSync(filePath);
      const contentType = mime.lookup(filePath) || 'application/octet-stream';
      const key = `uploads/icons/${file}`;

      console.log(`üì§ –ó–∞–≥—Ä—É–∂–∞–µ–º ${file}...`);

      const command = new PutObjectCommand({
        Bucket: BUCKET_NAME,
        Key: key,
        Body: fileContent,
        ContentType: contentType,
        CacheControl: "public, max-age=31536000", // 1 –≥–æ–¥
        Metadata: {
          "original-name": file,
          "upload-timestamp": Date.now().toString(),
          "upload-source": "ci-cd-script",
        },
      });

      await s3Client.send(command);
      console.log(`‚úÖ ${file} –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ`);
      
      return {
        file,
        url: `https://gafus-media.storage.yandexcloud.net/uploads/icons/${file}`,
        key
      };
    });

    const results = await Promise.all(uploadPromises);
    
    console.log("\nüéâ –í—Å–µ –∏–∫–æ–Ω–∫–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –≤ CDN!");
    console.log("\nüìã –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞–≥—Ä—É–∑–∫–∏:");
    results.forEach(result => {
      console.log(`  ‚úÖ ${result.file} ‚Üí ${result.url}`);
    });

    console.log(`\nüîó –í—Å–µ –∏–∫–æ–Ω–∫–∏ –¥–æ—Å—Ç—É–ø–Ω—ã –ø–æ –∞–¥—Ä–µ—Å—É: https://gafus.ru/icons/`);
    console.log(`üìä –í—Å–µ–≥–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: ${results.length} —Ñ–∞–π–ª–æ–≤`);

  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∫–æ–Ω–æ–∫ –≤ CDN:", error.message);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç
if (require.main === module) {
  uploadIconsToCDN();
}

module.exports = { uploadIconsToCDN };

