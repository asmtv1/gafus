#!/usr/bin/env node

const fs = require("fs");
const path = require("path");

/**
 * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–æ–≤
 * @param {string} rootDir - –ö–æ—Ä–Ω–µ–≤–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ø—Ä–æ–µ–∫—Ç–∞
 * @returns {Object} –û–±—ä–µ–∫—Ç —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è
 */
function loadEnvVars(rootDir = process.cwd()) {
  const envVars = {};

  try {
    // –ó–∞–≥—Ä—É–∂–∞–µ–º .env.local –µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (—Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º)
    const envLocalPath = path.join(rootDir, ".env.local");
    if (fs.existsSync(envLocalPath)) {
      const envLocalContent = fs.readFileSync(envLocalPath, "utf8");
      parseEnvContent(envLocalContent, envVars);
    }

    // –ó–∞–≥—Ä—É–∂–∞–µ–º .env —Ñ–∞–π–ª (–±–∞–∑–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è)
    const envPath = path.join(rootDir, ".env");
    if (fs.existsSync(envPath)) {
      const envContent = fs.readFileSync(envPath, "utf8");
      parseEnvContent(envContent, envVars);
    }

    console.warn("üîë ENV –∑–∞–≥—Ä—É–∂–µ–Ω –∏–∑ .env.local (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç) –∏ .env");
    console.warn(`üìã –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${Object.keys(envVars).length} –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è`);
  } catch (error) {
    console.warn("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ .env —Ñ–∞–π–ª–æ–≤:", error.message);
  }

  return envVars;
}

/**
 * –ü–∞—Ä—Å–∏—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ .env —Ñ–∞–π–ª–∞
 * @param {string} content - –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
 * @param {Object} envVars - –û–±—ä–µ–∫—Ç –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
 */
function parseEnvContent(content, envVars) {
  content.split("\n").forEach((line) => {
    const trimmedLine = line.trim();
    if (trimmedLine && !trimmedLine.startsWith("#") && trimmedLine.includes("=")) {
      const [key, ...valueParts] = trimmedLine.split("=");
      const value = valueParts.join("=").replace(/^["']|["']$/g, "");
      if (key && value !== undefined) {
        envVars[key.trim()] = value.trim();
      }
    }
  });
}

/**
 * –°–æ–∑–¥–∞–µ—Ç –æ–±—ä–µ–∫—Ç –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –¥–æ—á–µ—Ä–Ω–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
 * @param {Object} envVars - –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env —Ñ–∞–π–ª–æ–≤
 * @param {Object} additionalVars - –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
 * @returns {Object} –û–±—ä–µ–∫—Ç –æ–∫—Ä—É–∂–µ–Ω–∏—è
 */
function createChildEnv(envVars, additionalVars = {}) {
  return {
    ...process.env, // –°–∏—Å—Ç–µ–º–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    ...envVars, // –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env —Ñ–∞–π–ª–æ–≤
    NODE_ENV: "development", // –Ø–≤–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º NODE_ENV
    ...additionalVars, // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, PORT)
  };
}

module.exports = {
  loadEnvVars,
  createChildEnv,
  parseEnvContent,
};
