#!/usr/bin/env node

const fs = require("fs");
const path = require("path");
const { execSync } = require("child_process");

// –ê–Ω–∞–ª–∏–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
function analyzeDependencies() {
  console.warn("üîç –ê–Ω–∞–ª–∏–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...");

  const apps = ["apps/web", "apps/trainer-panel", "apps/error-dashboard"];
  const results = {};

  apps.forEach((app) => {
    if (fs.existsSync(path.join(app, "package.json"))) {
      const packageJson = JSON.parse(fs.readFileSync(path.join(app, "package.json"), "utf8"));
      const dependencies = { ...packageJson.dependencies, ...packageJson.devDependencies };

      console.warn(`\nüì¶ ${app}:`);
      console.warn(`  –í—Å–µ–≥–æ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π: ${Object.keys(dependencies).length}`);

      // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—Ä –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
      const largeDeps = Object.entries(dependencies)
        .filter(([name, version]) => {
          // –ò—Å–∫–ª—é—á–∞–µ–º workspace –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
          return !version.startsWith("workspace:");
        })
        .sort((a, b) => {
          // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–∞–∑–º–µ—Ä—É (–ø—Ä–∏–º–µ—Ä–Ω–æ)
          const sizeA = getPackageSize(a[0]);
          const sizeB = getPackageSize(b[0]);
          return sizeB - sizeA;
        })
        .slice(0, 10);

      console.warn("  –ö—Ä—É–ø–Ω–µ–π—à–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:");
      largeDeps.forEach(([name, version]) => {
        const size = getPackageSize(name);
        console.warn(`    ${name}@${version}: ~${size}KB`);
      });

      results[app] = {
        total: Object.keys(dependencies).length,
        largeDeps,
      };
    }
  });

  return results;
}

// –ü—Ä–∏–º–µ—Ä–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã –ø–∞–∫–µ—Ç–æ–≤
function getPackageSize(packageName) {
  const sizes = {
    "@mui/material": 500,
    "@mui/icons-material": 300,
    react: 100,
    "react-dom": 100,
    next: 200,
    "@emotion/react": 50,
    "@emotion/styled": 50,
    zustand: 20,
    swr: 30,
    prisma: 150,
    bcrypt: 80,
    sharp: 200,
    workbox: 100,
  };

  return sizes[packageName] || 50;
}

// –ü–æ–∏—Å–∫ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –∏–º–ø–æ—Ä—Ç–æ–≤
function findUnusedImports(appPath) {
  console.warn(`\nüîç –ü–æ–∏—Å–∫ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –∏–º–ø–æ—Ä—Ç–æ–≤ –≤ ${appPath}...`);

  const srcPath = path.join(appPath, "src");
  if (!fs.existsSync(srcPath)) return [];

  const files = getAllFiles(srcPath, [".ts", ".tsx"]);
  const unusedImports = [];

  files.forEach((file) => {
    const content = fs.readFileSync(file, "utf8");
    const imports = extractImports(content);

    imports.forEach((importInfo) => {
      if (!isImportUsed(content, importInfo.name, file)) {
        unusedImports.push({
          file: path.relative(appPath, file),
          import: importInfo,
        });
      }
    });
  });

  return unusedImports;
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤
function getAllFiles(dir, extensions) {
  const files = [];

  function traverse(currentDir) {
    const items = fs.readdirSync(currentDir);

    items.forEach((item) => {
      const fullPath = path.join(currentDir, item);
      const stat = fs.statSync(fullPath);

      if (stat.isDirectory() && !item.startsWith(".")) {
        traverse(fullPath);
      } else if (extensions.some((ext) => item.endsWith(ext))) {
        files.push(fullPath);
      }
    });
  }

  traverse(dir);
  return files;
}

// –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞
function extractImports(content) {
  const imports = [];

  // –ò–º–ø–æ—Ä—Ç—ã –∏–∑ node_modules
  const moduleImports = content.match(/import\s+{([^}]+)}\s+from\s+['"]([^'"]+)['"]/g);
  if (moduleImports) {
    moduleImports.forEach((imp) => {
      const match = imp.match(/import\s+{([^}]+)}\s+from\s+['"]([^'"]+)['"]/);
      if (match) {
        const names = match[1].split(",").map((s) => s.trim());
        const module = match[2];

        names.forEach((name) => {
          const cleanName = name.replace(/\s+as\s+\w+/, "");
          imports.push({
            name: cleanName,
            module,
            fullImport: imp,
          });
        });
      }
    });
  }

  // –û—Ç–¥–µ–ª—å–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã
  const singleImports = content.match(/import\s+(\w+)\s+from\s+['"]([^'"]+)['"]/g);
  if (singleImports) {
    singleImports.forEach((imp) => {
      const match = imp.match(/import\s+(\w+)\s+from\s+['"]([^'"]+)['"]/);
      if (match) {
        imports.push({
          name: match[1],
          module: match[2],
          fullImport: imp,
        });
      }
    });
  }

  return imports;
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∏–º–ø–æ—Ä—Ç–∞
function isImportUsed(content, importName, filePath) {
  // –£–±–∏—Ä–∞–µ–º –∏–º–ø–æ—Ä—Ç—ã –∏–∑ –ø–æ–∏—Å–∫–∞
  const contentWithoutImports = content.replace(/import\s+.*?from\s+['"][^'"]+['"];?\n?/g, "");

  // –ò—â–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
  const usagePatterns = [
    new RegExp(`\\b${importName}\\b`, "g"),
    new RegExp(`<${importName}`, "g"),
    new RegExp(`</${importName}`, "g"),
  ];

  return usagePatterns.some((pattern) => pattern.test(contentWithoutImports));
}

// –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
function generateRecommendations(results) {
  console.warn("\nüìã –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏:");

  Object.entries(results).forEach(([app, data]) => {
    console.warn(`\nüéØ ${app}:`);

    if (data.largeDeps.length > 0) {
      console.warn("  –ö—Ä—É–ø–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏:");
      data.largeDeps.forEach(([name, version]) => {
        const size = getPackageSize(name);
        console.warn(`    - ${name}: ${size}KB`);

        if (name.includes("@mui")) {
          console.warn(`      üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ tree shaking –∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã`);
        }
        if (name.includes("react")) {
          console.warn(`      üí° –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ React.lazy –¥–ª—è code splitting`);
        }
        if (size > 100) {
          console.warn(`      ‚ö†Ô∏è  –ë–æ–ª—å—à–∞—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å - —Ä–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã`);
        }
      });
    }
  });
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
function main() {
  console.warn("üöÄ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –±–∞–Ω–¥–ª–∞\n");

  try {
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    const results = analyzeDependencies();

    // –ò—â–µ–º –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –∏–º–ø–æ—Ä—Ç—ã
    const apps = ["apps/web", "apps/trainer-panel", "apps/error-dashboard"];
    apps.forEach((app) => {
      const unusedImports = findUnusedImports(app);
      if (unusedImports.length > 0) {
        console.warn(`\n‚ùå –ù–∞–π–¥–µ–Ω—ã –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –∏–º–ø–æ—Ä—Ç—ã –≤ ${app}:`);
        unusedImports.slice(0, 10).forEach((item) => {
          console.warn(`  ${item.file}: ${item.import.name} –∏–∑ ${item.import.module}`);
        });
        if (unusedImports.length > 10) {
          console.warn(`  ... –∏ –µ—â–µ ${unusedImports.length - 10} –∏–º–ø–æ—Ä—Ç–æ–≤`);
        }
      }
    });

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    generateRecommendations(results);

    console.warn("\n‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!");
    console.warn("\nüìù –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:");
    console.warn("1. –£–¥–∞–ª–∏—Ç–µ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –∏–º–ø–æ—Ä—Ç—ã");
    console.warn("2. –ó–∞–º–µ–Ω–∏—Ç–µ –∫—Ä—É–ø–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –Ω–∞ –±–æ–ª–µ–µ –ª–µ–≥–∫–∏–µ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã");
    console.warn("3. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ tree shaking –¥–ª—è MUI");
    console.warn("4. –î–æ–±–∞–≤—å—Ç–µ code splitting –¥–ª—è —Ç—è–∂–µ–ª—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤");
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ:", error.message);
  }
}

if (require.main === module) {
  main();
}
