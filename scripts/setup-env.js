#!/usr/bin/env node

const fs = require("fs");
const path = require("path");
const { execSync } = require("child_process");

console.warn("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è...\n");

// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ .env —Ñ–∞–π–ª–∞
const envPath = path.join(process.cwd(), ".env");
const envExists = fs.existsSync(envPath);

if (!envExists) {
  console.warn("üìù –°–æ–∑–¥–∞–µ–º .env —Ñ–∞–π–ª...");
  fs.writeFileSync(envPath, "");
}

// –ß–∏—Ç–∞–µ–º —Ç–µ–∫—É—â–∏–π .env —Ñ–∞–π–ª
let envContent = "";
if (envExists) {
  envContent = fs.readFileSync(envPath, "utf8");
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –≤ .env
function addEnvVariable(key, value, comment = "") {
  const lines = envContent.split("\n");
  const existingIndex = lines.findIndex((line) => line.startsWith(`${key}=`));

  const newLine = comment ? `# ${comment}\n${key}=${value}` : `${key}=${value}`;

  if (existingIndex !== -1) {
    lines[existingIndex] = newLine;
  } else {
    lines.push(newLine);
  }

  envContent = lines.join("\n");
}

// –î–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
console.warn("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑–æ–≤—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö...");

// DATABASE_URL
if (!envContent.includes("DATABASE_URL=")) {
  addEnvVariable(
    "DATABASE_URL",
    "postgresql://postgres:1488@localhost:5432/dog_trainer",
    "Database connection string",
  );
}

// REDIS_URL
if (!envContent.includes("REDIS_URL=")) {
  addEnvVariable("REDIS_URL", "redis://localhost:6379", "Redis connection string");
}

// NEXTAUTH_SECRET
if (!envContent.includes("NEXTAUTH_SECRET=")) {
  addEnvVariable("NEXTAUTH_SECRET", "your-secret-key-here", "NextAuth secret key");
}

// NEXTAUTH_URL
if (!envContent.includes("NEXTAUTH_URL=")) {
  addEnvVariable("NEXTAUTH_URL", "http://localhost:3002", "NextAuth URL");
}

// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º VAPID –∫–ª—é—á–∏
console.warn("üîë –ì–µ–Ω–µ—Ä–∞—Ü–∏—è VAPID –∫–ª—é—á–µ–π...");

try {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏ web-push
  try {
    execSync("web-push generate-vapid-keys", { stdio: "pipe" });
  } catch (error) {
    console.warn("üì¶ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º web-push...");
    execSync("npm install -g web-push", { stdio: "inherit" });
  }

  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª—é—á–∏
  const vapidOutput = execSync("web-push generate-vapid-keys", { encoding: "utf8" });
  const lines = vapidOutput.trim().split("\n");

  let publicKey = "";
  let privateKey = "";

  lines.forEach((line) => {
    if (line.includes("Public Key:")) {
      publicKey = line.split(":")[1].trim();
    } else if (line.includes("Private Key:")) {
      privateKey = line.split(":")[1].trim();
    }
  });

  if (publicKey && privateKey) {
    addEnvVariable("VAPID_PUBLIC_KEY", publicKey, "VAPID Public Key for WebPush");
    addEnvVariable("VAPID_PRIVATE_KEY", privateKey, "VAPID Private Key for WebPush");
    console.warn("‚úÖ VAPID –∫–ª—é—á–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã –∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ .env");
  } else {
    console.warn("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å VAPID –∫–ª—é—á–∏ –∏–∑ –≤—ã–≤–æ–¥–∞ –∫–æ–º–∞–Ω–¥—ã");
    console.warn("üìã –î–æ–±–∞–≤—å—Ç–µ –∫–ª—é—á–∏ –≤—Ä—É—á–Ω—É—é –≤ .env —Ñ–∞–π–ª:");
    console.warn("VAPID_PUBLIC_KEY=your_public_key_here");
    console.warn("VAPID_PRIVATE_KEY=your_private_key_here");
  }
} catch (error) {
  console.warn("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å VAPID –∫–ª—é—á–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏");
  console.warn("üìã –î–æ–±–∞–≤—å—Ç–µ –∫–ª—é—á–∏ –≤—Ä—É—á–Ω—É—é –≤ .env —Ñ–∞–π–ª:");
  console.warn("VAPID_PUBLIC_KEY=your_public_key_here");
  console.warn("VAPID_PRIVATE_KEY=your_private_key_here");
}

// –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π .env —Ñ–∞–π–ª
fs.writeFileSync(envPath, envContent);

console.warn("\n‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!");
console.warn("üìÅ –§–∞–π–ª .env –æ–±–Ω–æ–≤–ª–µ–Ω");

// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –µ—Å—Ç—å
const requiredVars = [
  "DATABASE_URL",
  "REDIS_URL",
  "NEXTAUTH_SECRET",
  "NEXTAUTH_URL",
  "VAPID_PUBLIC_KEY",
  "VAPID_PRIVATE_KEY",
];

console.warn("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è:");
requiredVars.forEach((varName) => {
  const hasVar = envContent.includes(`${varName}=`);
  console.warn(`${hasVar ? "‚úÖ" : "‚ùå"} ${varName}`);
});

console.warn("\nüìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:");
console.warn("1. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ PostgreSQL –∑–∞–ø—É—â–µ–Ω –Ω–∞ localhost:5432");
console.warn("2. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ Redis –∑–∞–ø—É—â–µ–Ω –Ω–∞ localhost:6379");
console.warn("3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: pnpm start:basic");
console.warn("4. –î–ª—è –ø–æ–ª–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞: pnpm start:all");
