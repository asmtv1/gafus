#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö push-–ø–æ–¥–ø–∏—Å–æ–∫
 * –£–¥–∞–ª—è–µ—Ç –¥—É–±–ª–∏–∫–∞—Ç—ã, –æ—Å—Ç–∞–≤–ª—è—è —Ç–æ–ª—å–∫–æ —Å–∞–º—É—é –Ω–æ–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ endpoint
 */

const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function cleanDuplicateSubscriptions() {
  console.log('üßπ –ù–∞—á–∏–Ω–∞–µ–º –æ—á–∏—Å—Ç–∫—É –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫...');
  
  try {
    // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ endpoint'—ã
    const duplicates = await prisma.$queryRaw`
      SELECT endpoint, COUNT(*) as count
      FROM "PushSubscription"
      GROUP BY endpoint
      HAVING COUNT(*) > 1
      ORDER BY count DESC
    `;
    
    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${duplicates.length} –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö endpoint'–æ–≤`);
    
    if (duplicates.length === 0) {
      console.log('‚úÖ –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
      return;
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    for (const duplicate of duplicates) {
      console.log(`üîó ${duplicate.endpoint.substring(0, 50)}... - ${duplicate.count} –¥—É–±–ª–∏–∫–∞—Ç–æ–≤`);
    }
    
    // –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã, –æ—Å—Ç–∞–≤–ª—è—è —Ç–æ–ª—å–∫–æ —Å–∞–º—É—é –Ω–æ–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É
    let totalDeleted = 0;
    
    for (const duplicate of duplicates) {
      const subscriptions = await prisma.pushSubscription.findMany({
        where: { endpoint: duplicate.endpoint },
        orderBy: { createdAt: 'desc' },
      });
      
      // –û—Å—Ç–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—É—é (—Å–∞–º—É—é –Ω–æ–≤—É—é), —É–¥–∞–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ
      const toDelete = subscriptions.slice(1);
      
      for (const subscription of toDelete) {
        await prisma.pushSubscription.delete({
          where: { id: subscription.id },
        });
        totalDeleted++;
        console.log(`üóëÔ∏è –£–¥–∞–ª–µ–Ω–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞: ${subscription.id}`);
      }
    }
    
    console.log(`‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –£–¥–∞–ª–µ–Ω–æ ${totalDeleted} –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫`);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    const finalCount = await prisma.pushSubscription.count();
    console.log(`üìä –ò—Ç–æ–≥–æ –ø–æ–¥–ø–∏—Å–æ–∫ –≤ –ë–î: ${finalCount}`);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫:', error);
    process.exit(1);
  } finally {
    await prisma.$disconnect();
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç
cleanDuplicateSubscriptions();
