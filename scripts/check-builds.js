#!/usr/bin/env node

const fs = require("fs");
const path = require("path");

// –°–ø–∏—Å–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
const appsToCheck = [
  { name: "@gafus/web", path: "apps/web/.next", type: "next" },
  { name: "@gafus/trainer-panel", path: "apps/trainer-panel/.next", type: "next" },
  { name: "@gafus/error-dashboard", path: "apps/error-dashboard/.next", type: "next" },
  { name: "@gafus/telegram-bot", path: "apps/telegram-bot/dist", type: "dist" },
  { name: "@gafus/bull-board", path: "apps/bull-board/dist", type: "dist" },

  { name: "@gafus/webpush", path: "packages/webpush/dist", type: "dist" },
];

console.log("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–±–æ—Ä–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π...\n");

let allBuilt = true;
const results = [];

appsToCheck.forEach((app) => {
  const fullPath = path.join(process.cwd(), app.path);
  const exists = fs.existsSync(fullPath);

  if (exists) {
    const stats = fs.statSync(fullPath);
    const size = stats.isDirectory() ? fs.readdirSync(fullPath).length : stats.size;

    results.push({
      name: app.name,
      status: "‚úÖ",
      path: app.path,
      size: size,
      type: app.type,
    });
  } else {
    results.push({
      name: app.name,
      status: "‚ùå",
      path: app.path,
      size: 0,
      type: app.type,
    });
    allBuilt = false;
  }
});

// –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
results.forEach((result) => {
  const sizeInfo = result.type === "next" ? `${result.size} —Ñ–∞–π–ª–æ–≤` : `${result.size} –±–∞–π—Ç`;

  console.log(`${result.status} ${result.name}: ${result.path} (${sizeInfo})`);
});

console.log("\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç:");
if (allBuilt) {
  console.log("‚úÖ –í—Å–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å–æ–±—Ä–∞–Ω—ã!");
  console.log("üöÄ –ú–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å: pnpm start:all");
} else {
  console.log("‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–µ —Å–æ–±—Ä–∞–Ω—ã!");
  console.log("üî® –°–æ–±–µ—Ä–∏—Ç–µ –≤—Å–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: pnpm build:all");

  const notBuilt = results.filter((r) => r.status === "‚ùå");
  console.log("\n–ù–µ —Å–æ–±—Ä–∞–Ω—ã:");
  notBuilt.forEach((app) => {
    console.log(`  - ${app.name}`);
  });
}

console.log("\nüìã –ö–æ–º–∞–Ω–¥—ã –¥–ª—è —Å–±–æ—Ä–∫–∏:");
console.log("  pnpm build:all          # –°–±–æ—Ä–∫–∞ –≤—Å–µ—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π");
console.log("  pnpm --filter @gafus/web build        # –°–±–æ—Ä–∫–∞ —Ç–æ–ª—å–∫–æ web");
console.log("  pnpm --filter @gafus/trainer-panel build  # –°–±–æ—Ä–∫–∞ —Ç–æ–ª—å–∫–æ trainer-panel");

process.exit(allBuilt ? 0 : 1);
