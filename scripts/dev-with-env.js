#!/usr/bin/env node

const { spawn } = require("child_process");
const { execSync } = require("child_process");
const { loadEnvVars, createChildEnv } = require("./env-loader");

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ –∫–æ—Ä–Ω—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
const envVars = loadEnvVars();

console.warn("üöÄ –ó–∞–ø—É—Å–∫ dev —Ä–µ–∂–∏–º–∞ —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è...\n");

// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å–æ–±—Ä–∞–Ω—ã
try {
  console.warn("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–±–æ—Ä–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π...");
  execSync("pnpm check:builds", { stdio: "inherit" });
} catch (error) {
  console.warn("‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–µ —Å–æ–±—Ä–∞–Ω—ã. –°–æ–±–∏—Ä–∞–µ–º...");
  execSync("pnpm build:all", { stdio: "inherit" });
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ä—Ç—ã
try {
  console.warn("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–æ–≤...");
  execSync("pnpm check:ports", { stdio: "inherit" });
} catch (error) {
  console.warn("‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å –ø–æ—Ä—Ç–∞–º–∏. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –æ—Å–≤–æ–±–æ–∂–¥–∞–µ–º...");
}

console.warn("\n‚úÖ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã!");
console.warn("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤ dev —Ä–µ–∂–∏–º–µ...\n");

// –°–ø–∏—Å–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤ dev —Ä–µ–∂–∏–º–µ
const apps = [
  { name: "Web App", filter: "@gafus/web", port: 3002, type: "next-dev" },
  { name: "Trainer Panel", filter: "@gafus/trainer-panel", port: 3001, type: "next-dev" },
  { name: "Error Dashboard", filter: "@gafus/error-dashboard", port: 3005, type: "next-dev" },
];

// –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –ø–æ—Ä—Ç—ã, –µ—Å–ª–∏ –∑–∞–Ω—è—Ç—ã
apps.forEach((app) => {
  try {
    execSync(`lsof -ti tcp:${app.port} | xargs -r kill -9`, { stdio: "ignore" });
    console.warn(`üîì –ü–æ—Ä—Ç ${app.port} –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω`);
  } catch {}
});

// –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
const processes = [];
apps.forEach((app) => {
  console.warn(`üîÑ –ó–∞–ø—É—Å–∫ ${app.name} (–ø–æ—Ä—Ç ${app.port})...`);

  let child;
  if (app.type === "next-dev") {
    // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –æ–∫—Ä—É–∂–µ–Ω–∏—è —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –∏–∑ .env + —Å–∏—Å—Ç–µ–º–Ω—ã–º–∏ + –ø–æ—Ä—Ç–æ–º
    const childEnv = createChildEnv(envVars, { PORT: String(app.port) });

    child = spawn("pnpm", ["--filter", app.filter, "dev"], {
      stdio: "pipe",
      env: childEnv,
    });
  }

  child.stdout.on("data", (data) => {
    const output = data.toString().trim();
    if (output) console.warn(`[${app.name}] ${output}`);
  });

  child.stderr.on("data", (data) => {
    const output = data.toString().trim();
    if (output && !output.includes("Warning")) console.error(`[${app.name}] ERROR: ${output}`);
  });

  child.on("error", (error) => console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ ${app.name}:`, error.message));
  child.on("exit", (code) => {
    if (code !== 0) console.error(`‚ùå ${app.name} –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –∫–æ–¥–æ–º ${code}`);
    else console.warn(`‚úÖ ${app.name} –∑–∞–≤–µ—Ä—à–µ–Ω`);
  });

  processes.push(child);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
process.on("SIGINT", () => {
  console.warn("\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è. –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...");
  processes.forEach((child) => {
    child.kill("SIGINT");
  });
  process.exit(0);
});

process.on("SIGTERM", () => {
  console.warn("\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è. –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...");
  processes.forEach((child) => {
    child.kill("SIGTERM");
  });
  process.exit(0);
});

// –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è—Ö
setTimeout(() => {
  console.warn("\nüåê –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:");
  console.warn("  Web App: http://web.gafus.localhost:3002");
  console.warn("  Trainer Panel: http://trainer.gafus.localhost:3001");
  console.warn("  Error Dashboard: http://errors.gafus.localhost:3005");
  console.warn("\nüí° –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C");
}, 5000);
