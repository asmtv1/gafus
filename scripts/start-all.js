#!/usr/bin/env node

const { spawn } = require("child_process");
const { execSync } = require("child_process");
const path = require("path");
const dotenv = require("dotenv");

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –∏–∑ .env.local
try {
  const rootDir = process.cwd();
  dotenv.config({ path: path.join(rootDir, ".env.local") });
  // eslint-disable-next-line no-console
  console.warn("üîë ENV –∑–∞–≥—Ä—É–∂–µ–Ω –∏–∑ .env.local");
} catch {}

console.warn("üöÄ –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –ì–∞—Ñ—É—Å...\n");

// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å–æ–±—Ä–∞–Ω—ã
try {
  console.warn("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–±–æ—Ä–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π...");
  execSync("pnpm check:builds", { stdio: "inherit" });
} catch (error) {
  console.warn("‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–µ —Å–æ–±—Ä–∞–Ω—ã. –°–æ–±–∏—Ä–∞–µ–º...");
  execSync("pnpm build:all", { stdio: "inherit" });
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ä—Ç—ã
try {
  console.warn("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–æ–≤...");
  execSync("pnpm check:ports", { stdio: "inherit" });
} catch (error) {
  console.warn("‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å –ø–æ—Ä—Ç–∞–º–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é.");
  process.exit(1);
}

console.warn("\n‚úÖ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã!");
console.warn("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...\n");

// –°–ø–∏—Å–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å –∏—Ö –ø–æ—Ä—Ç–∞–º–∏
const apps = [
  { name: "Web App", filter: "@gafus/web", port: 3002, type: "next" },
  { name: "Trainer Panel", filter: "@gafus/trainer-panel", port: 3001, type: "next" },
  { name: "Error Dashboard", filter: "@gafus/error-dashboard", port: 3005, type: "next" },
  { name: "Telegram Bot", filter: "@gafus/telegram-bot", port: 3003, type: "node" },
  { name: "Bull Board", filter: "@gafus/bull-board", port: 3004, type: "node" },
  { name: "Worker", filter: "@gafus/worker", port: null, type: "worker", delay: 5000 },
];

function ensureBuilt(app) {
  if (app.type === "worker") {
    // –î–ª—è worker'–∞ –í–°–ï–ì–î–ê –ø–µ—Ä–µ—Å–æ–±–∏—Ä–∞–µ–º –¥–ª—è –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏
    const cwd = "packages/worker";
    console.warn(`[${app.name}] –ü–µ—Ä–µ—Å–æ–±–∏—Ä–∞—é worker –¥–ª—è –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏...`);
    execSync(`pnpm --filter ${app.filter} build`, { stdio: "inherit" });
    // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–±–æ—Ä–∫–∏
    execSync("sleep 3", { stdio: "ignore" });
    return;
  }

  if (app.type !== "next") return;
  const cwd =
    app.filter === "@gafus/web"
      ? "apps/web"
      : app.filter === "@gafus/trainer-panel"
        ? "apps/trainer-panel"
        : app.filter === "@gafus/error-dashboard"
          ? "apps/error-dashboard"
          : null;
  if (!cwd) return;

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ñ–∞–π–ª–æ–≤ –¥–ª—è production
  const requiredFiles = [".next/BUILD_ID", ".next/prerender-manifest.json", ".next/static"];

  let needsBuild = false;
  for (const file of requiredFiles) {
    try {
      execSync(`test -e ${file}`, { cwd, stdio: "ignore" });
    } catch (e) {
      needsBuild = true;
      break;
    }
  }

  if (needsBuild) {
    console.warn(`[${app.name}] –ù–µ –≤—Å–µ —Ñ–∞–π–ª—ã —Å–±–æ—Ä–∫–∏ –Ω–∞–π–¥–µ–Ω—ã. –í—ã–ø–æ–ª–Ω—è—é —Å–±–æ—Ä–∫—É...`);
    execSync(`pnpm --filter ${app.filter} build`, { stdio: "inherit" });
    // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–±–æ—Ä–∫–∏
    execSync("sleep 2", { stdio: "ignore" });
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
const processes = [];
apps.forEach((app) => {
  if (app.requireEnv) {
    const missing = app.requireEnv.filter((k) => !process.env[k]);
    if (missing.length) {
      console.warn(`‚ö†Ô∏è  –ü—Ä–æ–ø—É—Å–∫–∞—é ${app.name}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ ${missing.join(", ")}`);
      return;
    }
  }

  ensureBuilt(app);

  // –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –ø–æ—Ä—Ç, –µ—Å–ª–∏ –∑–∞–Ω—è—Ç (—Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π —Å –ø–æ—Ä—Ç–∞–º–∏)
  if (app.port) {
    try {
      execSync(`lsof -ti tcp:${app.port} | xargs -r kill -9`, { stdio: "ignore" });
    } catch {}
  }

  console.warn(`üîÑ –ó–∞–ø—É—Å–∫ ${app.name}${app.port ? ` (–ø–æ—Ä—Ç ${app.port})` : ""}...`);

  // –î–ª—è worker'–∞ –¥–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É —á—Ç–æ–±—ã –¥–æ–∂–¥–∞—Ç—å—Å—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–±–æ—Ä–∫–∏
  if (app.delay) {
    console.warn(`‚è≥ –ñ–¥–µ–º ${app.delay}ms –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–±–æ—Ä–∫–∏ ${app.name}...`);
    execSync(`sleep ${app.delay / 1000}`, { stdio: "ignore" });
  }

  let child;
  child = spawn("pnpm", ["--filter", app.filter, "start"], {
    stdio: "pipe",
    shell: true,
    env: { ...process.env },
  });

  child.stdout.on("data", (data) => {
    const output = data.toString().trim();
    if (output) console.warn(`[${app.name}] ${output}`);
  });
  child.stderr.on("data", (data) => {
    const output = data.toString().trim();
    if (output && !output.includes("Warning")) console.error(`[${app.name}] ERROR: ${output}`);
  });
  child.on("error", (error) => console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ ${app.name}:`, error.message));
  child.on("exit", (code) => {
    if (code !== 0) console.error(`‚ùå ${app.name} –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –∫–æ–¥–æ–º ${code}`);
    else console.warn(`‚úÖ ${app.name} –∑–∞–≤–µ—Ä—à–µ–Ω`);
  });

  processes.push(child);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
process.on("SIGINT", () => {
  console.warn("\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è. –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...");
  processes.forEach((child) => {
    child.kill("SIGINT");
  });
  process.exit(0);
});

process.on("SIGTERM", () => {
  console.warn("\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è. –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...");
  processes.forEach((child) => {
    child.kill("SIGTERM");
  });
  process.exit(0);
});

// –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è—Ö
setTimeout(() => {
  console.warn("\nüåê –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:");
  console.warn("  Web App: http://localhost:3002");
  console.warn("  Trainer Panel: http://localhost:3001");
  console.warn("  Error Dashboard: http://localhost:3005");
  console.warn("  Bull Board: http://localhost:3004");
  console.warn("  Telegram Bot: —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ –ø–æ—Ä—Ç—É 3003");

  console.warn("\nüí° –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C");
}, 5000);
