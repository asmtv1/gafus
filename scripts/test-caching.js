#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –æ—Ñ–ª–∞–π–Ω —Ä–∞–±–æ—Ç—ã
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç Service Worker, –∫—ç—à–∏ –∏ –æ—Ñ–ª–∞–π–Ω —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
 */

const fs = require('fs');
const path = require('path');

console.log('üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –æ—Ñ–ª–∞–π–Ω —Ä–∞–±–æ—Ç—ã...\n');

// 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º Service Worker
console.log('1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º Service Worker...');
const swPath = path.join(__dirname, '../apps/web/public/sw.js');

if (fs.existsSync(swPath)) {
  const swContent = fs.readFileSync(swPath, 'utf8');
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã SW
  const checks = [
    { name: 'CACHE_CONFIG', pattern: /const CACHE_CONFIG = \{/ },
    { name: 'HTML_PAGES –∫—ç—à', pattern: /HTML_PAGES: 'gafus-html-v2'/ },
    { name: 'RSC_DATA –∫—ç—à', pattern: /RSC_DATA: 'gafus-rsc-v2'/ },
    { name: 'COURSE_DATA –∫—ç—à', pattern: /COURSE_DATA: 'gafus-course-v2'/ },
    { name: '–°—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è', pattern: /STRATEGIES: \{/ },
    { name: 'TTL –Ω–∞—Å—Ç—Ä–æ–π–∫–∏', pattern: /TTL: \{/ },
    { name: 'install event', pattern: /self\.addEventListener\('install'/ },
    { name: 'activate event', pattern: /self\.addEventListener\('activate'/ },
    { name: 'fetch event', pattern: /self\.addEventListener\('fetch'/ },
    { name: 'POST request check', pattern: /if \(request\.method !== 'GET'\)/ },
    { name: 'Response body cloning', pattern: /responseToCache\.body/ },
  ];
  
  checks.forEach(check => {
    const found = check.pattern.test(swContent);
    console.log(`   ${found ? '‚úÖ' : '‚ùå'} ${check.name}`);
  });
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä—Å–∏—é –∫—ç—à–∞
  const versionMatch = swContent.match(/v(\d+)/g);
  if (versionMatch) {
    console.log(`   üìä –ù–∞–π–¥–µ–Ω—ã –≤–µ—Ä—Å–∏–∏ –∫—ç—à–µ–π: ${versionMatch.join(', ')}`);
  }
  
} else {
  console.log('   ‚ùå Service Worker –Ω–µ –Ω–∞–π–¥–µ–Ω!');
}

console.log('');

// 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à-–º–µ–Ω–µ–¥–∂–µ—Ä
console.log('2Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à-–º–µ–Ω–µ–¥–∂–µ—Ä...');
const cacheManagerPath = path.join(__dirname, '../apps/web/src/shared/utils/cacheManager.ts');

if (fs.existsSync(cacheManagerPath)) {
  const cacheManagerContent = fs.readFileSync(cacheManagerPath, 'utf8');
  
  const cacheChecks = [
    { name: 'updateStepProgress —Ñ—É–Ω–∫—Ü–∏—è', pattern: /export function updateStepProgress/ },
    { name: 'courseStore –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è', pattern: /useCourseStore/ },
    { name: '–£–¥–∞–ª–µ–Ω–∞ React Query –∏–Ω–≤–∞–ª–∏–¥–∞—Ü–∏—è', pattern: /–ò–Ω–≤–∞–ª–∏–¥–∞—Ü–∏—è React Query –∫—ç—à–∞ —Ç–µ–ø–µ—Ä—å –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤ server actions/ },
  ];
  
  cacheChecks.forEach(check => {
    const found = check.pattern.test(cacheManagerContent);
    console.log(`   ${found ? '‚úÖ' : '‚ùå'} ${check.name}`);
  });
  
} else {
  console.log('   ‚ùå –ö—ç—à-–º–µ–Ω–µ–¥–∂–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω!');
}

console.log('');

// 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ—Ç—Ä–∞–∏
console.log('3Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏—Å—Ç–µ–º—É —Ä–µ—Ç—Ä–∞–µ–≤...');
const retryUtilsPath = path.join(__dirname, '../apps/web/src/shared/utils/retryUtils.ts');

if (fs.existsSync(retryUtilsPath)) {
  const retryContent = fs.readFileSync(retryUtilsPath, 'utf8');
  
  const retryChecks = [
    { name: 'retryWithBackoff —Ñ—É–Ω–∫—Ü–∏—è', pattern: /export async function retryWithBackoff/ },
    { name: 'retryServerAction —Ñ—É–Ω–∫—Ü–∏—è', pattern: /export async function retryServerAction/ },
    { name: '–≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞', pattern: /Math\.pow\(2, attempt - 1\)/ },
    { name: '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞', pattern: /Math\.min.*maxDelay/ },
  ];
  
  retryChecks.forEach(check => {
    const found = check.pattern.test(retryContent);
    console.log(`   ${found ? '‚úÖ' : '‚ùå'} ${check.name}`);
  });
  
} else {
  console.log('   ‚ùå –£—Ç–∏–ª–∏—Ç—ã —Ä–µ—Ç—Ä–∞–µ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!');
}

console.log('');

// 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
console.log('4Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏—Å—Ç–µ–º—É —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏...');
const syncStatusPath = path.join(__dirname, '../apps/web/src/shared/hooks/useSyncStatus.ts');

if (fs.existsSync(syncStatusPath)) {
  const syncContent = fs.readFileSync(syncStatusPath, 'utf8');
  
  const syncChecks = [
    { name: 'useSyncStatus —Ö—É–∫', pattern: /export function useSyncStatus/ },
    { name: 'startSync —Ñ—É–Ω–∫—Ü–∏—è', pattern: /startSync/ },
    { name: 'finishSync —Ñ—É–Ω–∫—Ü–∏—è', pattern: /finishSync/ },
    { name: 'pendingChanges —Å—á–µ—Ç—á–∏–∫', pattern: /pendingChanges/ },
  ];
  
  syncChecks.forEach(check => {
    const found = check.pattern.test(syncContent);
    console.log(`   ${found ? '‚úÖ' : '‚ùå'} ${check.name}`);
  });
  
} else {
  console.log('   ‚ùå –•—É–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω!');
}

console.log('');

// 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ—Å—Ç–µ—Ä –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
console.log('5Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ—Å—Ç–µ—Ä –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è...');
const cacheTesterPath = path.join(__dirname, '../apps/web/src/shared/components/ui/CacheTester.tsx');

if (fs.existsSync(cacheTesterPath)) {
  const testerContent = fs.readFileSync(cacheTesterPath, 'utf8');
  
  const testerChecks = [
    { name: 'CacheTester –∫–æ–º–ø–æ–Ω–µ–Ω—Ç', pattern: /export function CacheTester/ },
    { name: 'checkCache —Ñ—É–Ω–∫—Ü–∏—è', pattern: /checkCache/ },
    { name: 'testOfflineMode —Ñ—É–Ω–∫—Ü–∏—è', pattern: /testOfflineMode/ },
    { name: 'clearAllCaches —Ñ—É–Ω–∫—Ü–∏—è', pattern: /clearAllCaches/ },
    { name: '–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å useSyncStatus', pattern: /useSyncStatus/ },
  ];
  
  testerChecks.forEach(check => {
    const found = check.pattern.test(testerContent);
    console.log(`   ${found ? '‚úÖ' : '‚ùå'} ${check.name}`);
  });
  
} else {
  console.log('   ‚ùå –¢–µ—Å—Ç–µ—Ä –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω!');
}

console.log('');

// 6. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é –≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö
console.log('6Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é –≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö...');
const accordionStepPath = path.join(__dirname, '../apps/web/src/features/training/components/AccordionStep.tsx');

if (fs.existsSync(accordionStepPath)) {
  const accordionContent = fs.readFileSync(accordionStepPath, 'utf8');
  
  const integrationChecks = [
    { name: 'useSyncStatus –∏–º–ø–æ—Ä—Ç', pattern: /import.*useSyncStatus/ },
    { name: 'startSync –≤—ã–∑–æ–≤', pattern: /startSync\(\)/ },
    { name: 'finishSync –≤—ã–∑–æ–≤', pattern: /finishSync\(/ },
    { name: 'addPendingChange –≤—ã–∑–æ–≤', pattern: /addPendingChange\(\)/ },
  ];
  
  integrationChecks.forEach(check => {
    const found = check.pattern.test(accordionContent);
    console.log(`   ${found ? '‚úÖ' : '‚ùå'} ${check.name}`);
  });
  
} else {
  console.log('   ‚ùå AccordionStep –Ω–µ –Ω–∞–π–¥–µ–Ω!');
}

console.log('');

// 7. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
console.log('üìã –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:');
console.log('   1. –û—Ç–∫—Ä–æ–π—Ç–µ DevTools ‚Üí Application ‚Üí Service Workers');
console.log('   2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ SW –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∏ –∞–∫—Ç–∏–≤–µ–Ω');
console.log('   3. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫');
console.log('   4. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫—ç—à–∏" –≤ —Ç–µ—Å—Ç–µ—Ä–µ');
console.log('   5. –í–∫–ª—é—á–∏—Ç–µ –æ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º –≤ DevTools ‚Üí Network');
console.log('   6. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–≤–∏–≥–∞—Ü–∏—é –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º –≤ –æ—Ñ–ª–∞–π–Ω–µ');
console.log('   7. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –∫—É—Ä—Å–æ–≤ –∫—ç—à–∏—Ä—É—é—Ç—Å—è');
console.log('   8. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ —Ä–µ—Ç—Ä–∞–∏ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö —Å–µ—Ç–∏');

console.log('\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
