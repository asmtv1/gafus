# HTTP to HTTPS redirect
server {
    listen 80;
    server_name gafus.ru www.gafus.ru;
    
    # Let's Encrypt challenge
    location /.well-known/acme-challenge/ {
        root /var/www/certbot;
    }
    
    # Redirect all HTTP to HTTPS
    location / {
        return 301 https://$server_name$request_uri;
    }
}

# Main domain configuration with HTTPS
server {
    listen 443 ssl http2;
    server_name gafus.ru www.gafus.ru;
    
    # SSL configuration
    ssl_certificate /etc/letsencrypt/live/gafus.ru/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/gafus.ru/privkey.pem;
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384;
    ssl_prefer_server_ciphers off;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;
    
    # Security headers
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
    add_header X-Frame-Options DENY always;
    add_header X-Content-Type-Options nosniff always;
    add_header X-XSS-Protection "1; mode=block" always;
    
    # Main web application
    location / {
        proxy_pass http://web:3000;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_cache_bypass $http_upgrade;
    }

    # Trainer Panel
    location /trainer/ {
        proxy_pass http://trainer-panel:3001/;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_cache_bypass $http_upgrade;
    }

    # Error Dashboard
    location /errors/ {
        proxy_pass http://error-dashboard:3005/;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_cache_bypass $http_upgrade;
    }

    # Bull Board
    location /queues/ {
        proxy_pass http://bull-board:3002/;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_cache_bypass $http_upgrade;
    }

    # Static files - main uploads
    location /uploads/ {
        alias /var/www/uploads/;
        expires 1y;
        add_header Cache-Control "public, immutable";
    }

    # Static files - web app specific
    location /web/uploads/ {
        alias /var/www/uploads/;
        expires 1y;
        add_header Cache-Control "public, immutable";
    }

    # Static files - trainer panel specific
    location /trainer/uploads/ {
        alias /var/www/uploads/;
        expires 1y;
        add_header Cache-Control "public, immutable";
    }

    # Health check
    location /health {
        access_log off;
        
        # Check if main services are running
        set $healthy 1;
        
        # Check web service
        if ($http_x_forwarded_proto != "https") {
            set $healthy 0;
        }
        
        # Return health status
        if ($healthy = 1) {
            return 200 "healthy\n";
            add_header Content-Type text/plain;
            add_header Cache-Control "no-cache";
        }
        
        return 503 "unhealthy\n";
        add_header Content-Type text/plain;
        add_header Cache-Control "no-cache";
    }

    # Detailed health check
    location /health/detailed {
        access_log off;
        
        # This will be handled by a health check service or nginx lua module
        # For now, return basic info
        return 200 "Gafus Services Health Check\nWeb: Running\nTrainer Panel: Running\nError Dashboard: Running\nBull Board: Running\nTelegram Bot: Running\nWorker: Running\nPrisma: Running\n";
        add_header Content-Type text/plain;
        add_header Cache-Control "no-cache";
    }
}
