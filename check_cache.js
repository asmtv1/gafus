// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—ç—à–∞ Service Worker
console.log('üîç –ü–†–û–í–ï–†–ö–ê –ö–≠–®–ê SERVICE WORKER');
console.log('================================');

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å caches API
if ('caches' in window) {
  console.log('‚úÖ Caches API –¥–æ—Å—Ç—É–ø–µ–Ω');
  
  // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫—ç—à–µ–π
  caches.keys().then(cacheNames => {
    console.log('üì¶ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫—ç—à–∏:', cacheNames);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π –∫—ç—à
    return Promise.all(cacheNames.map(async cacheName => {
      const cache = await caches.open(cacheName);
      const keys = await cache.keys();
      console.log(`\nüóÇÔ∏è –ö—ç—à "${cacheName}":`);
      console.log(`   - –ó–∞–ø–∏—Å–µ–π: ${keys.length}`);
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 –∑–∞–ø–∏—Å–µ–π
      const sampleKeys = keys.slice(0, 5);
      for (const key of sampleKeys) {
        console.log(`   - ${key.url}`);
      }
      
      if (keys.length > 5) {
        console.log(`   - ... –∏ –µ—â–µ ${keys.length - 5} –∑–∞–ø–∏—Å–µ–π`);
      }
      
      return { cacheName, count: keys.length };
    }));
  }).then(results => {
    console.log('\nüìä –°–≤–æ–¥–∫–∞ –∫—ç—à–µ–π:');
    results.forEach(({ cacheName, count }) => {
      console.log(`   ${cacheName}: ${count} –∑–∞–ø–∏—Å–µ–π`);
    });
  }).catch(error => {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫—ç—à–µ–π:', error);
  });
} else {
  console.log('‚ùå Caches API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º Service Worker
if ('serviceWorker' in navigator) {
  navigator.serviceWorker.ready.then(registration => {
    console.log('\nüîß SERVICE WORKER:');
    console.log(`   - –ê–∫—Ç–∏–≤–µ–Ω: ${registration.active ? '–î–∞' : '–ù–µ—Ç'}`);
    console.log(`   - –û–∂–∏–¥–∞–µ—Ç: ${registration.waiting ? '–î–∞' : '–ù–µ—Ç'}`);
    console.log(`   - –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è: ${registration.installing ? '–î–∞' : '–ù–µ—Ç'}`);
    
    if (registration.active) {
      console.log(`   - –°–∫—Ä–∏–ø—Ç: ${registration.active.scriptURL}`);
    }
  }).catch(error => {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ SW:', error);
  });
} else {
  console.log('‚ùå Service Worker API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
}
