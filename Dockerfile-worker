# syntax=docker/dockerfile:1

# Build stage
FROM node:20-alpine AS builder

WORKDIR /app

# Enable pnpm
RUN corepack enable && corepack prepare pnpm@9.1.0 --activate

# Copy workspace files
COPY pnpm-workspace.yaml ./
COPY package.json pnpm-lock.yaml ./
COPY tsconfig.base.json ./

# Copy package.json files
COPY packages/worker/package.json ./packages/worker/package.json
COPY packages/prisma/package.json ./packages/prisma/package.json
COPY packages/queues/package.json ./packages/queues/package.json
COPY packages/webpush/package.json ./packages/webpush/package.json

# Install ALL dependencies (including dev dependencies for build)
RUN pnpm install

# Copy source code
COPY packages/worker ./packages/worker
COPY packages/prisma ./packages/prisma
COPY packages/queues ./packages/queues
COPY packages/webpush ./packages/webpush

# Generate Prisma client
RUN pnpm --filter @gafus/prisma run db:generate

# Build worker and queues
RUN pnpm --filter @gafus/worker run build
RUN pnpm --filter @gafus/queues run build

# Production stage
FROM node:20-alpine AS production

WORKDIR /app

# Enable pnpm
RUN corepack enable && corepack prepare pnpm@9.1.0 --activate

# Copy workspace files
COPY pnpm-workspace.yaml ./
COPY package.json pnpm-lock.yaml ./

# Copy package.json files
COPY packages/worker/package.json ./packages/worker/package.json
COPY packages/prisma/package.json ./packages/prisma/package.json
COPY packages/queues/package.json ./packages/queues/package.json
COPY packages/webpush/package.json ./packages/webpush/package.json

# Copy all node_modules from builder stage
COPY --from=builder /app/node_modules ./node_modules
COPY --from=builder /app/packages/worker/node_modules ./packages/worker/node_modules
COPY --from=builder /app/packages/prisma/node_modules ./packages/prisma/node_modules
COPY --from=builder /app/packages/queues/node_modules ./packages/queues/node_modules
COPY --from=builder /app/packages/webpush/node_modules ./packages/webpush/node_modules

# Copy built files from builder stage
COPY --from=builder /app/packages/worker/dist ./packages/worker/dist
COPY --from=builder /app/packages/queues/dist ./packages/queues/dist

# Copy source code for all packages
COPY --from=builder /app/packages/worker ./packages/worker
COPY --from=builder /app/packages/prisma ./packages/prisma
COPY --from=builder /app/packages/queues ./packages/queues
COPY --from=builder /app/packages/webpush ./packages/webpush

# ULTRA RADICAL APPROACH: Copy entire prisma, queues, and webpush packages to worker's node_modules
RUN cd packages/worker/node_modules/@gafus && \
    rm -f prisma queues webpush && \
    cp -r /app/packages/prisma prisma && \
    cp -r /app/packages/queues queues && \
    cp -r /app/packages/webpush webpush

# FINAL RADICAL APPROACH: Fix package.json files to point to source code
RUN sed -i 's|"main": "dist/src/index.js"|"main": "src/index.ts"|g' packages/worker/node_modules/@gafus/prisma/package.json && \
    sed -i 's|"types": "dist/src/index.d.ts"|"types": "src/index.ts"|g' packages/worker/node_modules/@gafus/prisma/package.json

# Set working directory to root to use root node_modules
WORKDIR /app

# Start the worker with tsx to use TypeScript source code
CMD ["npx", "tsx", "packages/worker/src/index.ts"]
