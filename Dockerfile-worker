# syntax=docker/dockerfile:1

# ─────────────────────────────────────────────
# Stage 0: builder — сборка приложения
# ─────────────────────────────────────────────
FROM node:20-alpine AS base
WORKDIR /app

# Установка pnpm
RUN corepack enable && corepack prepare pnpm@9.1.0 --activate

# Копируем только файлы зависимостей для кэширования
COPY package.json pnpm-lock.yaml pnpm-workspace.yaml ./
COPY tsconfig.base.json ./

# Копируем package.json всех пакетов
COPY packages/*/package.json ./packages/*/

# Устанавливаем только production зависимости
RUN pnpm install --frozen-lockfile --prod

# ─────────────────────────────────────────────
# Stage 0: builder — сборка приложения
# ─────────────────────────────────────────────
FROM node:20-alpine AS builder
WORKDIR /app

# Установка pnpm
RUN corepack enable && corepack prepare pnpm@9.1.0 --activate

# Копируем все файлы проекта
COPY . .

# Устанавливаем ВСЕ зависимости (включая dev)
RUN pnpm install --frozen-lockfileCOPY packages/types ./packages/types
COPY packages/prisma ./packages/prisma
COPY packages/worker ./packages/worker
COPY packages/queues ./packages/queues
COPY packages/webpush ./packages/webpush
COPY packages/error-handling ./packages/error-handling

# Генерируем Prisma client
RUN cd packages/prisma && pnpm db:generate

# Создаем .prisma папку в node_modules
RUN mkdir -p /app/node_modules/.prisma
RUN find /app/node_modules/.pnpm -name ".prisma" -type d -exec cp -r {}/client /app/node_modules/.prisma/ \;
RUN find /app/node_modules/.pnpm -name ".prisma" -type d -exec cp -r {}/schema.prisma /app/node_modules/.prisma/ \;

# Билдим пакеты в правильном порядке
RUN pnpm --filter @gafus/types run build
RUN pnpm build --filter @gafus/prisma
RUN pnpm build --filter @gafus/queues
RUN pnpm build --filter @gafus/webpush
RUN pnpm build --filter @gafus/error-handling
RUN pnpm build --filter @gafus/worker

# ─────────────────────────────────────────────
# Stage 1: runner — минимальный production
# ─────────────────────────────────────────────
FROM node:20-alpine AS runner
WORKDIR /app

# Создаем пользователя для безопасности
RUN addgroup --system --gid 1001 nodejs
RUN adduser --system --uid 1001 worker

# Установка pnpm
RUN corepack enable && corepack prepare pnpm@9.1.0 --activate

# Копируем только production зависимости из base stage
# Устанавливаем только production зависимости
COPY package.json pnpm-lock.yaml pnpm-workspace.yaml ./
COPY tsconfig.base.json ./
COPY packages/*/package.json ./packages/*/
RUN pnpm install --frozen-lockfile --prod

# Копируем собранные пакеты
COPY --from=builder /app/packages/types/dist ./packages/types/dist
COPY --from=builder /app/packages/types/package.json ./packages/types/package.json
COPY --from=builder /app/packages/prisma/dist ./packages/prisma/dist
COPY --from=builder /app/packages/prisma/package.json ./packages/prisma/package.json
COPY --from=builder /app/packages/worker/dist ./packages/worker/dist
COPY --from=builder /app/packages/worker/package.json ./packages/worker/package.json
COPY --from=builder /app/packages/queues/dist ./packages/queues/dist
COPY --from=builder /app/packages/queues/package.json ./packages/queues/package.json
COPY --from=builder /app/packages/webpush/dist ./packages/webpush/dist
COPY --from=builder /app/packages/webpush/package.json ./packages/webpush/package.json
COPY --from=builder /app/packages/error-handling/dist ./packages/error-handling/dist
COPY --from=builder /app/packages/error-handling/package.json ./packages/error-handling/package.json

# Копируем Prisma schema и client
COPY --from=builder /app/packages/prisma/schema.prisma ./packages/prisma/schema.prisma
COPY --from=builder /app/node_modules/.prisma ./node_modules/.prisma

# Копируем package.json для правильной работы
COPY --from=builder /app/package.json ./
COPY --from=builder /app/pnpm-workspace.yaml ./

# Устанавливаем права доступа
RUN chown -R worker:nodejs /app
USER worker

# Переменные окружения
ENV NODE_ENV=production

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=10s --retries=3 \
  CMD node -e "console.log('Worker container is healthy')" || exit 1

# Запускаем воркер
CMD ["pnpm", "--filter", "@gafus/worker", "run", "start"]