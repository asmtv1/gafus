# syntax=docker/dockerfile:1

# ─────────────────────────────────────────────
# Stage 0: builder — сборка trainer-panel с hoisting
# ─────────────────────────────────────────────
FROM node:20-alpine AS builder
WORKDIR /app
# 1️⃣ Corepack + pnpm
RUN corepack enable && corepack prepare pnpm@9.1.0 --activate
# 2️⃣ Копируем ВСЕ исходники сразу
COPY . .
# 3️⃣ Устанавливаем ВСЕ зависимости (включая hoisted)
RUN pnpm install --no-frozen-lockfile
# 4️⃣ Генерируем Prisma client
RUN cd packages/prisma && pnpm db:generate
# 5️⃣ Создаем .prisma папку в node_modules
RUN mkdir -p /app/node_modules/.prisma
RUN find /app/node_modules/.pnpm -name ".prisma" -type d -exec cp -r {}/client /app/node_modules/.prisma/ \;
RUN find /app/node_modules/.pnpm -name ".prisma" -type d -exec cp -r {}/schema.prisma /app/node_modules/.prisma/ \;

# 6️⃣ Билдим с использованием hoisted node_modules
RUN pnpm build --filter @gafus/trainer-panel
# ─────────────────────────────────────────────
# Stage 1: runner — минимальный production
# ─────────────────────────────────────────────
FROM node:20-alpine AS runner
WORKDIR /app
ENV NODE_ENV=production
# 1️⃣ Corepack + pnpm
RUN corepack enable && corepack prepare pnpm@9.1.0 --activate
# 2️⃣ Копируем только production зависимости
COPY --from=builder /app/node_modules ./node_modules

# Копируем Prisma client полностью
COPY --from=builder /app/node_modules/@prisma ./node_modules/@prisma

COPY --from=builder /app/apps/trainer-panel/.next ./apps/trainer-panel/.next
COPY --from=builder /app/apps/trainer-panel/next.config.ts ./apps/trainer-panel/next.config.ts
COPY --from=builder /app/apps/trainer-panel/package.json ./apps/trainer-panel/package.json
COPY --from=builder /app/pnpm-lock.yaml ./pnpm-lock.yaml
COPY --from=builder /app/pnpm-workspace.yaml ./pnpm-workspace.yaml
# 3️⃣ Запуск
WORKDIR /app/apps/trainer-panel
EXPOSE 3001
CMD ["pnpm", "next", "start", "-p", "3001"]
