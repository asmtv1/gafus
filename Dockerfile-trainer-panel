# syntax=docker/dockerfile:1

# ─────────────────────────────────────────────
# Stage 0: builder — сборка trainer-panel
# ─────────────────────────────────────────────
FROM node:20-alpine AS builder
WORKDIR /app

# 1️⃣ Corepack + pnpm
RUN corepack enable && corepack prepare pnpm@9.1.0 --activate

# 2️⃣ Копируем workspace + lockfile + корневой package.json
COPY pnpm-workspace.yaml ./
COPY package.json pnpm-lock.yaml ./

# 3️⃣ Устанавливаем зависимости
RUN pnpm install --frozen-lockfile

# 4️⃣ Копируем исходники проекта
COPY . .

# 5️⃣ Билдим только trainer-panel (Next.js)
RUN cd apps/trainer-panel && pnpm build

# ─────────────────────────────────────────────
# Stage 1: runner — минимальный production
# ─────────────────────────────────────────────
FROM node:20-alpine AS runner
WORKDIR /app
ENV NODE_ENV=production

# 1️⃣ Corepack + pnpm
RUN corepack enable && corepack prepare pnpm@9.1.0 --activate

# 2️⃣ Копируем workspace + lockfile + нужные package.json
COPY pnpm-workspace.yaml ./
COPY package.json pnpm-lock.yaml ./
COPY apps/trainer-panel/package.json ./apps/trainer-panel/package.json
COPY packages/prisma/package.json ./packages/prisma/package.json

# 3️⃣ Устанавливаем production-зависимости
RUN cd apps/trainer-panel && pnpm install --prod --ignore-scripts
RUN cd packages/prisma && pnpm install --prod --ignore-scripts

# 4️⃣ Копируем Prisma схему и исходники для генерации
COPY packages/prisma ./packages/prisma

# 5️⃣ Генерируем Prisma Client
RUN pnpm --filter @gafus/prisma run prisma:generate

# 6️⃣ Копируем собранный trainer-panel
COPY --from=builder /app/apps/trainer-panel/.next ./apps/trainer-panel/.next
COPY --from=builder /app/apps/trainer-panel/public ./apps/trainer-panel/public
COPY --from=builder /app/apps/trainer-panel/next.config.ts ./apps/trainer-panel/next.config.ts

# 7️⃣ Запуск
WORKDIR /app/apps/trainer-panel
EXPOSE 3001
CMD ["pnpm", "next", "start", "-p", "3001"]
