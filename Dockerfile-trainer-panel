# syntax=docker/dockerfile:1

# ─────────────────────────────────────────────
# Stage 0: builder — сборка trainer-panel с hoisting
# ─────────────────────────────────────────────
FROM node:20-alpine AS builder
WORKDIR /app

# 1️⃣ Corepack + pnpm
RUN corepack enable && corepack prepare pnpm@9.1.0 --activate

# 2️⃣ Копируем только package файлы для кэширования
COPY pnpm-workspace.yaml package.json pnpm-lock.yaml ./
COPY apps/trainer-panel/package.json ./apps/trainer-panel/package.json
COPY packages/*/package.json ./packages/*/

# 3️⃣ Устанавливаем ВСЕ зависимости (включая hoisted)
RUN pnpm install --frozen-lockfile

# 4️⃣ Копируем исходники
COPY . .

# 5️⃣ Билдим с использованием hoisted node_modules
RUN pnpm build --filter @gafus/trainer-panel

# ─────────────────────────────────────────────
# Stage 1: runner — минимальный production
# ─────────────────────────────────────────────
FROM node:20-alpine AS runner
WORKDIR /app
ENV NODE_ENV=production

# 1️⃣ Corepack + pnpm
RUN corepack enable && corepack prepare pnpm@9.1.0 --activate

# 2️⃣ Копируем только production зависимости
COPY --from=builder /app/node_modules ./node_modules
COPY --from=builder /app/apps/trainer-panel/.next ./apps/trainer-panel/.next
COPY --from=builder /app/apps/trainer-panel/public ./apps/trainer-panel/public
COPY --from=builder /app/apps/trainer-panel/next.config.ts ./apps/trainer-panel/next.config.ts

# 3️⃣ Запуск
WORKDIR /app/apps/trainer-panel
EXPOSE 3001
CMD ["pnpm", "next", "start", "-p", "3001"]
