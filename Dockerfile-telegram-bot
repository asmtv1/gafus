# syntax=docker/dockerfile:1

# ─────────────────────────────────────────────
# Stage 1: Build stage
# ─────────────────────────────────────────────
FROM node:20-alpine AS builder

WORKDIR /app

# Install required packages
RUN apk add --no-cache openssl curl

# Copy configs
COPY package.json pnpm-lock.yaml pnpm-workspace.yaml tsconfig.base.json ./
COPY apps/telegram-bot/package.json ./apps/telegram-bot/package.json
COPY packages/prisma/package.json ./packages/prisma/package.json
COPY packages/queues/package.json ./packages/queues/package.json

# Install pnpm and dependencies
RUN corepack enable && corepack prepare pnpm@9.1.0 --activate
RUN pnpm install --frozen-lockfile

# Copy full project
COPY . .

# Build bot
RUN cd apps/telegram-bot && pnpm run build

# ─────────────────────────────────────────────
# Stage 2: Runtime stage
# ─────────────────────────────────────────────
FROM node:20-alpine AS runner

WORKDIR /app
ENV NODE_ENV=production

# Install OpenSSL for Prisma
RUN apk add --no-cache openssl curl

# Copy workspace manifests
COPY package.json pnpm-lock.yaml pnpm-workspace.yaml ./
COPY apps/telegram-bot/package.json ./apps/telegram-bot/package.json
COPY packages/prisma/package.json ./packages/prisma/package.json
COPY packages/queues/package.json ./packages/queues/package.json

# Copy built code and dependencies from builder
COPY --from=builder /app/apps/telegram-bot/dist ./apps/telegram-bot/dist
COPY --from=builder /app/packages/prisma ./packages/prisma
COPY --from=builder /app/packages/queues ./packages/queues

# Install pnpm and production deps
RUN corepack enable && corepack prepare pnpm@9.1.0 --activate
RUN pnpm install --prod --frozen-lockfile --ignore-scripts

# Generate Prisma client
RUN pnpm --filter @gafus/prisma run prisma:generate

# Set working directory to bot
WORKDIR /app/apps/telegram-bot/dist

# Launch bot
CMD ["node", "bot.js"]
