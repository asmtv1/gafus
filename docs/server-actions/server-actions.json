{
  "title": "Gafus Server Actions Documentation",
  "version": "1.0.0",
  "description": "Документация серверных экшенов Next.js для платформы тренировок с питомцами",
  "generatedFrom": "Zod схемы валидации из серверных экшенов",
  "serverActions": {
    "auth": {
      "checkUserStateAction": {
        "file": "apps/web/src/shared/lib/actions/checkUserState.ts",
        "description": "Проверка статуса подтверждения пользователя",
        "input": {
          "username": {
            "type": "string",
            "validation": "z.string().trim().min(1).max(100).transform(value => value.toLowerCase())",
            "description": "Имя пользователя для проверки",
            "example": "john_doe"
          }
        },
        "output": {
          "type": "object",
          "properties": {
            "confirmed": {
              "type": "boolean",
              "example": true
            },
            "phone": {
              "type": "string",
              "nullable": true,
              "example": "+79123456789"
            }
          }
        },
        "usage": "\n// В компоненте React\nimport { checkUserStateAction } from '@shared/lib/actions/checkUserState';\n\nconst handleCheckUser = async (username: string) => {\n  try {\n    const result = await checkUserStateAction(username);\n    console.log('User confirmed:', result.confirmed);\n  } catch (error) {\n    console.error('Error:', error.message);\n  }\n};"
      },
      "registerUserAction": {
        "file": "apps/web/src/shared/lib/auth/login-utils.ts",
        "description": "Регистрация нового пользователя",
        "input": {
          "name": {
            "type": "string",
            "validation": "z.string().trim().min(3).max(50).regex(/^[A-Za-z0-9_]+$/)",
            "description": "Имя пользователя (только английские буквы, цифры и _)",
            "example": "john_doe"
          },
          "phone": {
            "type": "string",
            "validation": "z.string().trim().min(1)",
            "description": "Номер телефона в российском формате",
            "example": "+79123456789"
          },
          "password": {
            "type": "string",
            "validation": "z.string().trim().min(6).max(100).regex(/^[A-Za-z0-9]+$/)",
            "description": "Пароль (только английские буквы и цифры)",
            "example": "password123"
          }
        },
        "output": {
          "type": "object",
          "description": "Результат регистрации",
          "properties": {
            "success": {
              "type": "boolean",
              "example": true
            },
            "error": {
              "type": "string",
              "nullable": true,
              "example": "Пользователь уже существует"
            }
          }
        },
        "usage": "\n// В форме регистрации\nimport { registerUserAction } from '@shared/lib/auth/login-utils';\n\nconst handleRegister = async (name: string, phone: string, password: string) => {\n  try {\n    const result = await registerUserAction(name, phone, password);\n    if (result?.error) {\n      console.error('Registration error:', result.error);\n    } else {\n      console.log('User registered successfully');\n      // Перенаправить на страницу подтверждения\n    }\n  } catch (error) {\n    console.error('Error:', error.message);\n  }\n};"
      },
      "sendPasswordResetRequest": {
        "file": "apps/web/src/shared/lib/auth/login-utils.ts",
        "description": "Запрос на сброс пароля через Telegram",
        "input": {
          "username": {
            "type": "string",
            "validation": "z.string().trim().min(3).max(50).regex(/^[A-Za-z0-9_]+$/)",
            "description": "Имя пользователя",
            "example": "john_doe"
          },
          "phone": {
            "type": "string",
            "validation": "z.string().trim().min(1)",
            "description": "Номер телефона",
            "example": "+79123456789"
          }
        },
        "output": {
          "type": "object",
          "description": "Результат запроса сброса пароля",
          "properties": {
            "success": {
              "type": "boolean",
              "example": true
            },
            "message": {
              "type": "string",
              "example": "Запрос на сброс пароля отправлен"
            }
          }
        },
        "usage": "\n// В форме восстановления пароля\nimport { sendPasswordResetRequest } from '@shared/lib/auth/login-utils';\n\nconst handlePasswordReset = async (username: string, phone: string) => {\n  try {\n    const result = await sendPasswordResetRequest(username, phone);\n    console.log('Password reset request sent:', result.message);\n  } catch (error) {\n    console.error('Error:', error.message);\n  }\n};"
      },
      "resetPassword": {
        "file": "apps/web/src/shared/lib/auth/login-utils.ts",
        "description": "Сброс пароля по токену",
        "input": {
          "token": {
            "type": "string",
            "validation": "z.string().trim().min(1)",
            "description": "Токен для сброса пароля",
            "example": "reset-token-here"
          },
          "password": {
            "type": "string",
            "validation": "z.string().trim().min(6).max(100).regex(/^[A-Za-z0-9]+$/)",
            "description": "Новый пароль",
            "example": "newpassword123"
          }
        },
        "output": {
          "type": "void",
          "description": "Функция не возвращает значение, обновляет пароль в БД"
        },
        "usage": "\n// В форме сброса пароля\nimport resetPassword from '@shared/lib/auth/login-utils';\n\nconst handleResetPassword = async (token: string, newPassword: string) => {\n  try {\n    await resetPassword(token, newPassword);\n    console.log('Password reset successfully');\n    // Перенаправить на страницу входа\n  } catch (error) {\n    console.error('Error:', error.message);\n  }\n};"
      },
      "serverCheckUserConfirmed": {
        "file": "apps/web/src/shared/lib/auth/login-utils.ts",
        "description": "Проверка подтверждения пользователя по телефону",
        "input": {
          "phone": {
            "type": "string",
            "validation": "z.string().trim().min(1)",
            "description": "Номер телефона для проверки",
            "example": "+79123456789"
          }
        },
        "output": {
          "type": "boolean",
          "description": "true если пользователь подтвержден, false если нет",
          "example": true
        },
        "usage": "\n// Проверка статуса по телефону\nimport { serverCheckUserConfirmed } from '@shared/lib/auth/login-utils';\n\nconst checkConfirmed = async (phone: string) => {\n  try {\n    const confirmed = await serverCheckUserConfirmed(phone);\n    console.log('User confirmed:', confirmed);\n  } catch (error) {\n    console.error('Error:', error.message);\n  }\n};"
      }
    },
    "pets": {
      "createPet": {
        "file": "apps/web/src/shared/lib/pets/createPet.ts",
        "description": "Создание нового питомца",
        "input": {
          "type": "object",
          "schema": "createPetSchema",
          "required": [
            "name",
            "type",
            "breed",
            "birthDate"
          ],
          "properties": {
            "name": {
              "type": "string",
              "validation": "z.string().trim().min(2).max(50).regex(/^[а-яёА-ЯЁa-zA-Z\\s-]+$/)",
              "description": "Имя питомца (только буквы, пробелы и дефис)",
              "example": "Барсик"
            },
            "type": {
              "type": "string",
              "validation": "z.nativeEnum(PetType)",
              "enum": [
                "DOG",
                "CAT"
              ],
              "description": "Тип питомца",
              "example": "CAT"
            },
            "breed": {
              "type": "string",
              "validation": "z.string().trim().min(2).max(50)",
              "description": "Порода питомца",
              "example": "Персидская"
            },
            "birthDate": {
              "type": "string",
              "validation": "z.string().trim().min(1) + дата валидация",
              "format": "date",
              "description": "Дата рождения питомца",
              "example": "2020-01-15"
            },
            "heightCm": {
              "type": "number",
              "validation": "numericField({ min: 1, max: 200 })",
              "description": "Рост в сантиметрах",
              "example": 25
            },
            "weightKg": {
              "type": "number",
              "validation": "numericField({ min: 0.1, max: 200 })",
              "description": "Вес в килограммах",
              "example": 4.5
            },
            "photoUrl": {
              "type": "string",
              "validation": "urlSchema",
              "format": "uri",
              "description": "URL фотографии питомца",
              "example": "https://example.com/cat.jpg"
            },
            "notes": {
              "type": "string",
              "validation": "z.string().trim().max(500)",
              "description": "Заметки о питомце",
              "example": "Очень ласковый кот"
            }
          }
        },
        "output": {
          "type": "object",
          "description": "Созданный питомец с полной информацией",
          "properties": {
            "id": {
              "type": "string",
              "format": "uuid"
            },
            "name": {
              "type": "string"
            },
            "type": {
              "type": "string",
              "enum": [
                "DOG",
                "CAT"
              ]
            },
            "breed": {
              "type": "string"
            },
            "birthDate": {
              "type": "string",
              "format": "date"
            },
            "heightCm": {
              "type": "number",
              "nullable": true
            },
            "weightKg": {
              "type": "number",
              "nullable": true
            },
            "photoUrl": {
              "type": "string",
              "nullable": true
            },
            "notes": {
              "type": "string",
              "nullable": true
            },
            "createdAt": {
              "type": "string",
              "format": "date-time"
            },
            "updatedAt": {
              "type": "string",
              "format": "date-time"
            },
            "awards": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          }
        },
        "usage": "\n// В форме создания питомца\nimport { createPet } from '@shared/lib/pets/createPet';\n\nconst handleCreatePet = async (formData: CreatePetInput) => {\n  try {\n    const newPet = await createPet(formData);\n    console.log('Pet created:', newPet);\n    // Обновить UI, перенаправить и т.д.\n  } catch (error) {\n    console.error('Error creating pet:', error.message);\n  }\n};"
      },
      "updatePet": {
        "file": "apps/web/src/shared/lib/pets/updatePet.ts",
        "description": "Обновление данных существующего питомца",
        "input": {
          "type": "object",
          "schema": "updatePetSchema (basePetSchema.partial().extend({ id: required }))",
          "required": [
            "id"
          ],
          "properties": {
            "id": {
              "type": "string",
              "validation": "z.string().trim().min(1)",
              "description": "ID питомца для обновления",
              "example": "pet-uuid-here"
            },
            "name": {
              "type": "string",
              "validation": "z.string().trim().min(2).max(50).regex(/^[а-яёА-ЯЁa-zA-Z\\s-]+$/)",
              "description": "Имя питомца (только буквы, пробелы и дефис)",
              "example": "Барсик",
              "optional": true
            },
            "type": {
              "type": "string",
              "validation": "z.nativeEnum(PetType)",
              "enum": [
                "DOG",
                "CAT"
              ],
              "description": "Тип питомца",
              "example": "CAT",
              "optional": true
            },
            "breed": {
              "type": "string",
              "validation": "z.string().trim().min(2).max(50)",
              "description": "Порода питомца",
              "example": "Персидская",
              "optional": true
            },
            "birthDate": {
              "type": "string",
              "validation": "z.string().trim().min(1) + дата валидация",
              "format": "date",
              "description": "Дата рождения питомца",
              "example": "2020-01-15",
              "optional": true
            },
            "heightCm": {
              "type": "number",
              "validation": "numericField({ min: 1, max: 200 })",
              "description": "Рост в сантиметрах",
              "example": 25,
              "optional": true
            },
            "weightKg": {
              "type": "number",
              "validation": "numericField({ min: 0.1, max: 200 })",
              "description": "Вес в килограммах",
              "example": 4.5,
              "optional": true
            },
            "photoUrl": {
              "type": "string",
              "validation": "urlSchema",
              "format": "uri",
              "description": "URL фотографии питомца",
              "example": "https://example.com/cat.jpg",
              "optional": true
            },
            "notes": {
              "type": "string",
              "validation": "z.string().trim().max(500).optional()",
              "description": "Заметки о питомце",
              "example": "Очень ласковый кот",
              "optional": true
            }
          }
        },
        "output": {
          "type": "object",
          "description": "Обновленный питомец",
          "properties": {
            "id": {
              "type": "string",
              "format": "uuid"
            },
            "name": {
              "type": "string"
            },
            "type": {
              "type": "string",
              "enum": [
                "DOG",
                "CAT"
              ]
            },
            "breed": {
              "type": "string"
            },
            "birthDate": {
              "type": "string",
              "format": "date"
            },
            "heightCm": {
              "type": "number",
              "nullable": true
            },
            "weightKg": {
              "type": "number",
              "nullable": true
            },
            "photoUrl": {
              "type": "string",
              "nullable": true
            },
            "notes": {
              "type": "string",
              "nullable": true
            },
            "createdAt": {
              "type": "string",
              "format": "date-time"
            },
            "updatedAt": {
              "type": "string",
              "format": "date-time"
            },
            "awards": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          }
        },
        "usage": "\n// В форме редактирования питомца\nimport { updatePet } from '@shared/lib/pets/updatePet';\n\nconst handleUpdatePet = async (petData: UpdatePetInput) => {\n  try {\n    const updatedPet = await updatePet(petData);\n    console.log('Pet updated:', updatedPet);\n  } catch (error) {\n    console.error('Error updating pet:', error.message);\n  }\n};"
      },
      "getUserPets": {
        "file": "apps/web/src/shared/lib/pets/getUserPets.ts",
        "description": "Получение списка всех питомцев текущего пользователя",
        "input": {
          "type": "none",
          "description": "Не требует входных параметров - использует getCurrentUserId()"
        },
        "output": {
          "type": "array",
          "description": "Список питомцев пользователя",
          "items": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "format": "uuid"
              },
              "name": {
                "type": "string"
              },
              "type": {
                "type": "string",
                "enum": [
                  "DOG",
                  "CAT"
                ]
              },
              "breed": {
                "type": "string"
              },
              "birthDate": {
                "type": "string",
                "format": "date"
              },
              "heightCm": {
                "type": "number",
                "nullable": true
              },
              "weightKg": {
                "type": "number",
                "nullable": true
              },
              "photoUrl": {
                "type": "string",
                "nullable": true
              },
              "notes": {
                "type": "string",
                "nullable": true
              },
              "createdAt": {
                "type": "string",
                "format": "date-time"
              },
              "updatedAt": {
                "type": "string",
                "format": "date-time"
              },
              "awards": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "format": "uuid"
                    },
                    "title": {
                      "type": "string"
                    },
                    "description": {
                      "type": "string",
                      "nullable": true
                    },
                    "date": {
                      "type": "string",
                      "format": "date-time"
                    }
                  }
                }
              }
            }
          }
        },
        "usage": "\n// В компоненте списка питомцев\nimport { getUserPets } from '@shared/lib/pets/getUserPets';\n\nconst PetList = () => {\n  const [pets, setPets] = useState([]);\n  \n  useEffect(() => {\n    const fetchPets = async () => {\n      try {\n        const petsList = await getUserPets();\n        setPets(petsList);\n      } catch (error) {\n        console.error('Error fetching pets:', error);\n      }\n    };\n    \n    fetchPets();\n  }, []);\n  \n  return (\n    <div>\n      {pets.map(pet => (\n        <PetCard key={pet.id} pet={pet} />\n      ))}\n    </div>\n  );\n};"
      }
    },
    "training": {
      "startUserStepServerAction": {
        "file": "apps/web/src/shared/lib/training/startUserStepServerAction.ts",
        "description": "Начало выполнения шага тренировки",
        "input": {
          "type": "object",
          "schema": "startStepSchema",
          "required": [
            "courseId",
            "day",
            "stepIndex",
            "status",
            "durationSec"
          ],
          "properties": {
            "courseId": {
              "type": "string",
              "validation": "courseIdSchema",
              "description": "ID курса",
              "example": "course-uuid"
            },
            "day": {
              "type": "number",
              "validation": "dayNumberSchema",
              "minimum": 1,
              "description": "Номер дня тренировки",
              "example": 1
            },
            "stepIndex": {
              "type": "number",
              "validation": "stepIndexSchema",
              "minimum": 0,
              "description": "Индекс шага (начиная с 0)",
              "example": 0
            },
            "status": {
              "type": "string",
              "validation": "TrainingStatus enum",
              "enum": [
                "NOT_STARTED",
                "IN_PROGRESS",
                "COMPLETED",
                "PAUSED"
              ],
              "description": "Статус шага",
              "example": "IN_PROGRESS"
            },
            "durationSec": {
              "type": "number",
              "validation": "z.number().min(0)",
              "minimum": 0,
              "description": "Продолжительность в секундах",
              "example": 300
            }
          }
        },
        "output": {
          "type": "object",
          "properties": {
            "success": {
              "type": "boolean",
              "example": true
            }
          }
        },
        "usage": "\n// В таймер сторе\nimport { startUserStepServerAction } from '@shared/lib/training/startUserStepServerAction';\n\nconst startStep = async (courseId: string, day: number, stepIndex: number, durationSec: number) => {\n  try {\n    await startUserStepServerAction(\n      courseId,\n      day,\n      stepIndex,\n      TrainingStatus.IN_PROGRESS,\n      durationSec\n    );\n    console.log('Step started successfully');\n  } catch (error) {\n    console.error('Error starting step:', error.message);\n  }\n};"
      },
      "pauseResumeUserStep": {
        "file": "apps/web/src/shared/lib/training/pauseResumeUserStep.ts",
        "description": "Пауза или возобновление шага тренировки",
        "functions": {
          "pauseUserStepServerAction": {
            "input": {
              "type": "object",
              "schema": "pauseSchema",
              "required": [
                "courseId",
                "day",
                "stepIndex",
                "timeLeftSec"
              ],
              "properties": {
                "courseId": {
                  "type": "string",
                  "validation": "courseIdSchema"
                },
                "day": {
                  "type": "number",
                  "validation": "dayNumberSchema"
                },
                "stepIndex": {
                  "type": "number",
                  "validation": "stepIndexSchema"
                },
                "timeLeftSec": {
                  "type": "number",
                  "validation": "z.number().min(0)",
                  "description": "Оставшееся время в секундах",
                  "example": 180
                }
              }
            }
          },
          "resumeUserStepServerAction": {
            "input": {
              "type": "object",
              "schema": "resumeSchema",
              "required": [
                "courseId",
                "day",
                "stepIndex"
              ],
              "properties": {
                "courseId": {
                  "type": "string",
                  "validation": "courseIdSchema"
                },
                "day": {
                  "type": "number",
                  "validation": "dayNumberSchema"
                },
                "stepIndex": {
                  "type": "number",
                  "validation": "stepIndexSchema"
                }
              }
            }
          }
        },
        "output": {
          "type": "object",
          "properties": {
            "success": {
              "type": "boolean",
              "example": true
            }
          }
        },
        "usage": "\n// Пауза шага\nimport { pauseUserStepServerAction } from '@shared/lib/training/pauseResumeUserStep';\n\nconst pauseStep = async (courseId: string, day: number, stepIndex: number, timeLeft: number) => {\n  try {\n    await pauseUserStepServerAction(courseId, day, stepIndex, timeLeft);\n    console.log('Step paused');\n  } catch (error) {\n    console.error('Error pausing step:', error.message);\n  }\n};\n\n// Возобновление шага\nimport { resumeUserStepServerAction } from '@shared/lib/training/pauseResumeUserStep';\n\nconst resumeStep = async (courseId: string, day: number, stepIndex: number) => {\n  try {\n    await resumeUserStepServerAction(courseId, day, stepIndex);\n    console.log('Step resumed');\n  } catch (error) {\n    console.error('Error resuming step:', error.message);\n  }\n};"
      }
    },
    "courses": {
      "rateCourse": {
        "file": "apps/web/src/shared/lib/course/rateCourse.ts",
        "description": "Оценка курса пользователем",
        "input": {
          "type": "object",
          "schema": "rateCourseSchema",
          "required": [
            "courseId",
            "rating"
          ],
          "properties": {
            "courseId": {
              "type": "string",
              "validation": "z.string().trim().min(1)",
              "description": "ID курса",
              "example": "course-uuid"
            },
            "rating": {
              "type": "number",
              "validation": "z.number().min(1).max(5)",
              "minimum": 1,
              "maximum": 5,
              "description": "Оценка от 1 до 5",
              "example": 5
            }
          }
        },
        "output": {
          "type": "void",
          "description": "Функция не возвращает значение, обновляет рейтинг в БД"
        },
        "usage": "\n// В компоненте рейтинга\nimport { rateCourse } from '@shared/lib/course/rateCourse';\n\nconst handleRateCourse = async (courseId: string, rating: number) => {\n  try {\n    await rateCourse(courseId, rating);\n    console.log('Course rated successfully');\n    // Обновить UI\n  } catch (error) {\n    console.error('Error rating course:', error.message);\n  }\n};"
      },
      "toggleFavoriteCourse": {
        "file": "apps/web/src/shared/lib/course/addtoFavorite.ts",
        "description": "Добавление или удаление курса из избранного",
        "input": {
          "type": "string",
          "validation": "z.string().trim().min(1)",
          "description": "ID курса",
          "example": "course-uuid"
        },
        "output": {
          "type": "boolean",
          "description": "true если курс добавлен в избранное, false если удален",
          "example": true
        },
        "usage": "\n// В компоненте курса\nimport { toggleFavoriteCourse } from '@shared/lib/course/addtoFavorite';\n\nconst handleToggleFavorite = async (courseId: string) => {\n  try {\n    const isFavorite = await toggleFavoriteCourse(courseId);\n    console.log('Course favorite status:', isFavorite);\n    // Обновить UI\n  } catch (error) {\n    console.error('Error toggling favorite:', error.message);\n  }\n};"
      }
    },
    "user": {
      "updateUserProfile": {
        "file": "apps/web/src/shared/lib/user/updateUserProfile.ts",
        "description": "Обновление профиля пользователя",
        "input": {
          "type": "object",
          "schema": "updateUserProfileSchema",
          "properties": {
            "fullName": {
              "type": "string",
              "validation": "z.string().trim().max(120)",
              "maxLength": 120,
              "description": "Полное имя",
              "example": "Иван Иванов"
            },
            "about": {
              "type": "string",
              "validation": "z.string().trim().max(2000)",
              "maxLength": 2000,
              "description": "О себе",
              "example": "Люблю тренироваться с питомцами"
            },
            "telegram": {
              "type": "string",
              "validation": "z.string().trim().max(100)",
              "maxLength": 100,
              "description": "Telegram username",
              "example": "@ivan_ivanov"
            },
            "instagram": {
              "type": "string",
              "validation": "z.string().trim().max(100)",
              "maxLength": 100,
              "description": "Instagram username",
              "example": "ivan_ivanov"
            },
            "website": {
              "type": "string",
              "validation": "z.string().trim().max(200)",
              "maxLength": 200,
              "description": "Веб-сайт",
              "example": "https://ivan.com"
            },
            "birthDate": {
              "type": "string",
              "validation": "z.string().trim().max(100)",
              "maxLength": 100,
              "description": "Дата рождения",
              "example": "1990-01-01"
            }
          }
        },
        "output": {
          "type": "object",
          "description": "Обновленный профиль пользователя",
          "properties": {
            "id": {
              "type": "string",
              "format": "uuid"
            },
            "userId": {
              "type": "string",
              "format": "uuid"
            },
            "fullName": {
              "type": "string",
              "nullable": true
            },
            "about": {
              "type": "string",
              "nullable": true
            },
            "telegram": {
              "type": "string",
              "nullable": true
            },
            "instagram": {
              "type": "string",
              "nullable": true
            },
            "website": {
              "type": "string",
              "nullable": true
            },
            "birthDate": {
              "type": "string",
              "format": "date-time",
              "nullable": true
            },
            "createdAt": {
              "type": "string",
              "format": "date-time"
            },
            "updatedAt": {
              "type": "string",
              "format": "date-time"
            }
          }
        },
        "usage": "\n// В форме профиля\nimport { updateUserProfile } from '@shared/lib/user/updateUserProfile';\n\nconst handleUpdateProfile = async (profileData: UpdateUserProfileInput) => {\n  try {\n    const updatedProfile = await updateUserProfile(profileData);\n    console.log('Profile updated:', updatedProfile);\n    // Обновить UI\n  } catch (error) {\n    console.error('Error updating profile:', error.message);\n  }\n};"
      }
    },
    "notifications": {
      "updateSubscriptionAction": {
        "file": "apps/web/src/shared/lib/actions/subscription.ts",
        "description": "Обновление push-подписки пользователя",
        "input": {
          "type": "object",
          "schema": "pushSubscriptionSchema",
          "required": [
            "userId",
            "endpoint",
            "p256dh",
            "auth",
            "keys"
          ],
          "properties": {
            "id": {
              "type": "string",
              "validation": "z.string().optional()",
              "description": "ID подписки (опционально)"
            },
            "userId": {
              "type": "string",
              "validation": "z.string().trim().min(1)",
              "description": "ID пользователя",
              "example": "user-uuid"
            },
            "endpoint": {
              "type": "string",
              "validation": "z.string().trim().min(1)",
              "description": "Push endpoint",
              "example": "https://fcm.googleapis.com/fcm/send/..."
            },
            "p256dh": {
              "type": "string",
              "validation": "z.string().trim().min(1)",
              "description": "P256DH ключ"
            },
            "auth": {
              "type": "string",
              "validation": "z.string().trim().min(1)",
              "description": "Auth ключ"
            },
            "keys": {
              "type": "object",
              "required": [
                "p256dh",
                "auth"
              ],
              "properties": {
                "p256dh": {
                  "type": "string",
                  "validation": "z.string().trim().min(1)"
                },
                "auth": {
                  "type": "string",
                  "validation": "z.string().trim().min(1)"
                }
              }
            }
          }
        },
        "output": {
          "type": "object",
          "properties": {
            "success": {
              "type": "boolean",
              "example": true
            }
          }
        },
        "usage": "\n// В компоненте уведомлений\nimport { updateSubscriptionAction } from '@shared/lib/actions/subscription';\n\nconst handleSubscribeToNotifications = async (subscription: PushSubscription) => {\n  try {\n    const result = await updateSubscriptionAction({\n      userId: currentUserId,\n      endpoint: subscription.endpoint,\n      p256dh: subscription.getKey('p256dh'),\n      auth: subscription.getKey('auth'),\n      keys: {\n        p256dh: subscription.getKey('p256dh'),\n        auth: subscription.getKey('auth')\n      }\n    });\n    console.log('Subscription updated:', result);\n  } catch (error) {\n    console.error('Error updating subscription:', error.message);\n  }\n};"
      }
    }
  }
}