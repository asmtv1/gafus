# syntax=docker/dockerfile:1

# ─────────────────────────────────────────────
# Stage 0: builder — сборка приложения
# ─────────────────────────────────────────────
FROM node:20-alpine AS builder
WORKDIR /app

# Установка pnpm
RUN corepack enable && corepack prepare pnpm@9.1.0 --activate

# Копируем все файлы проекта
COPY . .

# Устанавливаем ВСЕ зависимости (включая dev)
RUN pnpm install --frozen-lockfile

# Копируем исходный код только нужных пакетов
COPY packages/types ./packages/types
COPY packages/prisma ./packages/prisma
COPY packages/auth ./packages/auth
COPY packages/csrf ./packages/csrf
COPY packages/error-handling ./packages/error-handling
COPY packages/ui-components ./packages/ui-components
COPY apps/error-dashboard ./apps/error-dashboard

# Генерируем Prisma client
RUN cd packages/prisma && pnpm db:generate

# Создаем .prisma папку в node_modules
RUN mkdir -p /app/node_modules/.prisma
RUN find /app/node_modules/.pnpm -name ".prisma" -type d -exec cp -r {}/client /app/node_modules/.prisma/ \;
RUN find /app/node_modules/.pnpm -name ".prisma" -type d -exec cp -r {}/schema.prisma /app/node_modules/.prisma/ \;

# Билдим пакеты в правильном порядке
RUN pnpm --filter @gafus/types run build
RUN pnpm build --filter @gafus/prisma
RUN pnpm --filter @gafus/auth run build
RUN pnpm build --filter @gafus/csrf
RUN pnpm build --filter @gafus/error-handling
RUN pnpm build --filter @gafus/ui-components
RUN pnpm build --filter @gafus/error-dashboard

# ─────────────────────────────────────────────
# Stage 1: runner — минимальный production
# ─────────────────────────────────────────────
FROM node:20-alpine AS runner
WORKDIR /app

# Создаем пользователя для безопасности
RUN addgroup --system --gid 1001 nodejs
RUN adduser --system --uid 1001 nextjs

# Установка pnpm
RUN corepack enable && corepack prepare pnpm@9.1.0 --activate

# Устанавливаем только production зависимости
COPY . .
RUN pnpm install --frozen-lockfile --prod --ignore-scripts
# Копируем собранные пакеты
COPY --from=builder /app/packages/types/dist ./packages/types/dist
COPY --from=builder /app/packages/types/package.json ./packages/types/package.json
COPY --from=builder /app/packages/prisma/dist ./packages/prisma/dist
COPY --from=builder /app/packages/prisma/package.json ./packages/prisma/package.json
COPY --from=builder /app/packages/auth/dist ./packages/auth/dist
COPY --from=builder /app/packages/auth/package.json ./packages/auth/package.json
COPY --from=builder /app/packages/csrf/dist ./packages/csrf/dist
COPY --from=builder /app/packages/csrf/package.json ./packages/csrf/package.json
COPY --from=builder /app/packages/error-handling/dist ./packages/error-handling/dist
COPY --from=builder /app/packages/error-handling/package.json ./packages/error-handling/package.json
COPY --from=builder /app/packages/ui-components/dist ./packages/ui-components/dist
COPY --from=builder /app/packages/ui-components/package.json ./packages/ui-components/package.json

# Копируем собранное приложение
COPY --from=builder /app/apps/error-dashboard/.next/standalone ./
COPY --from=builder /app/apps/error-dashboard/.next/static ./apps/error-dashboard/.next/static

# Копируем Prisma schema и client
COPY --from=builder /app/packages/prisma/schema.prisma ./packages/prisma/schema.prisma
COPY --from=builder /app/node_modules/.prisma ./node_modules/.prisma

# Копируем package.json для правильной работы
COPY --from=builder /app/package.json ./
COPY --from=builder /app/pnpm-workspace.yaml ./

# Устанавливаем права доступа
RUN chown -R nextjs:nodejs /app
USER nextjs

# Переменные окружения
ENV NODE_ENV=production
ENV PORT=3005
ENV HOSTNAME="0.0.0.0"

# Открываем порт
EXPOSE 3005

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
  CMD wget --no-verbose --tries=1 --spider http://localhost:3005/api/ping || exit 1

# Запускаем приложение
CMD ["node", "apps/error-dashboard/server.js"]