# Base stage - для сборки
FROM node:20-alpine AS base

WORKDIR /app

# Включаем pnpm
RUN corepack enable && corepack prepare pnpm@9.1.0 --activate

# Копируем файлы конфигурации
COPY package.json pnpm-lock.yaml pnpm-workspace.yaml turbo.json tsconfig.base.json ./

# Копируем исходный код
COPY packages ./packages
COPY apps/admin-panel ./apps/admin-panel

# Устанавливаем зависимости
RUN pnpm install --frozen-lockfile

# Копируем tsconfig файлы
COPY packages/*/tsconfig.json ./packages/*/
COPY apps/admin-panel/tsconfig.json ./apps/admin-panel/

# Генерируем Prisma client (без ERD в контейнере)
RUN cd packages/prisma \
  && cp schema.prisma schema.prisma.bak \
  && awk 'BEGIN{skip=0} /^generator erd \{/{skip=1} skip && /^\}/{skip=0; next} !skip {print}' schema.prisma > schema.tmp \
  && mv schema.tmp schema.prisma \
  && (for i in 1 2 3; do pnpm db:generate && break || (echo "Prisma generate attempt $i failed, retrying..." && sleep 5 && [ $i -eq 3 ] && exit 1); done) \
  && mv schema.prisma.bak schema.prisma \
  && echo "Checking Prisma Client..." \
  && ls -la /app/node_modules/.pnpm/ | grep "@prisma+client" \
  && echo "✅ Prisma Client generated successfully"

# Создаем папку для Prisma
RUN mkdir -p /app/node_modules/.prisma

# Копируем Prisma client
RUN find /app/node_modules/.pnpm -name ".prisma" -type d -exec cp -r {}/client /app/node_modules/.prisma/ \;
RUN find /app/node_modules/.pnpm -name ".prisma" -type d -exec cp -r {}/schema.prisma /app/node_modules/.prisma/ \;

# Копируем Prisma Query Engine рядом с клиентом (ожидаемое Prisma расположение)
RUN find /app/node_modules/.pnpm -name "libquery_engine-*" -type f -exec cp {} /app/node_modules/.prisma/client/ \;

# Собираем зависимые пакеты
RUN pnpm build --filter @gafus/logger --filter @gafus/prisma --filter @gafus/types --filter @gafus/auth --filter @gafus/csrf --filter @gafus/error-handling --filter @gafus/react-query --filter @gafus/queues --filter @gafus/webpush --filter @gafus/reengagement

# Собираем приложение
RUN pnpm --filter @gafus/admin-panel build

# Production stage - только runtime
FROM node:20-alpine AS runner

WORKDIR /app

# Создаем пользователя
RUN addgroup --system --gid 1001 nodejs
RUN adduser --system --uid 1001 nextjs

# Устанавливаем только необходимые пакеты
RUN apk add --no-cache curl openssl

# Копируем только standalone версию Next.js
COPY --from=base /app/apps/admin-panel/.next/standalone ./
COPY --from=base /app/apps/admin-panel/.next/static ./apps/admin-panel/.next/static
COPY --from=base /app/apps/admin-panel/public ./apps/admin-panel/public

# Копируем Prisma client и Query Engine (оставляем .pnpm из standalone)
COPY --from=base /app/node_modules/.prisma ./node_modules/.prisma

# Копируем Prisma client в несколько мест для поиска движка рантаймом
RUN mkdir -p ./apps/admin-panel/.prisma && cp -r ./node_modules/.prisma/client ./apps/admin-panel/.prisma/client
RUN mkdir -p ./apps/admin-panel/node_modules/.prisma && cp -r ./node_modules/.prisma/client ./apps/admin-panel/node_modules/.prisma/client
RUN mkdir -p ./apps/admin-panel/node_modules/@prisma && cp -r ./node_modules/.prisma/client ./apps/admin-panel/node_modules/@prisma/client

# Копируем Query Engine в .pnpm структуру для standalone build
RUN mkdir -p ./node_modules/.pnpm/@prisma+client@6.10.1_prisma@6.10.1_typescript@5.8.3__typescript@5.8.3/node_modules/.prisma/client && \
    cp ./node_modules/.prisma/client/libquery_engine-* ./node_modules/.pnpm/@prisma+client@6.10.1_prisma@6.10.1_typescript@5.8.3__typescript@5.8.3/node_modules/.prisma/client/ 2>/dev/null || true

# Устанавливаем права доступа
RUN chown -R nextjs:nodejs /app
USER nextjs

# Запускаем приложение
EXPOSE 3006
ENV PORT=3006
ENV NODE_ENV=production
ENV HOSTNAME="0.0.0.0"

CMD ["node", "apps/admin-panel/server.js"]
