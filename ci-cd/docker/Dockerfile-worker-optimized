# Base stage - для сборки
FROM node:20-alpine AS base

WORKDIR /app

# Включаем pnpm
RUN corepack enable && corepack prepare pnpm@9.1.0 --activate

# Копируем файлы конфигурации
COPY package.json pnpm-lock.yaml pnpm-workspace.yaml turbo.json tsconfig.base.json ./

# Копируем исходный код
COPY packages ./packages

# Устанавливаем зависимости
RUN pnpm install --frozen-lockfile

# Копируем tsconfig файлы
COPY packages/*/tsconfig.json ./packages/*/

# Генерируем Prisma client (без ERD в контейнере)
RUN cd packages/prisma \
  && cp schema.prisma schema.prisma.bak \
  && awk 'BEGIN{skip=0} /^generator erd \{/{skip=1} skip && /^\}/{skip=0; next} !skip {print}' schema.prisma > schema.tmp \
  && mv schema.tmp schema.prisma \
  && for i in 1 2 3; do pnpm db:generate && break || (echo "Prisma generate attempt $i failed, retrying..." && sleep 5); done \
  && mv schema.prisma.bak schema.prisma

# Собираем все пакеты (включая logger, cdn-upload и reengagement для worker)
RUN pnpm build --filter @gafus/worker --filter @gafus/prisma --filter @gafus/queues --filter @gafus/webpush --filter @gafus/types --filter @gafus/logger --filter @gafus/cdn-upload --filter @gafus/reengagement

# Production stage - только runtime
FROM node:20-alpine AS runner

WORKDIR /app

# Создаем пользователя
RUN addgroup --system --gid 1001 nodejs
RUN adduser --system --uid 1001 worker

# Устанавливаем только необходимые пакеты
RUN apk add --no-cache curl

# Копируем только собранные файлы
COPY --from=base /app/packages/worker/dist ./packages/worker/dist
COPY --from=base /app/packages/prisma/dist ./packages/prisma/dist
COPY --from=base /app/packages/queues/dist ./packages/queues/dist
COPY --from=base /app/packages/webpush/dist ./packages/webpush/dist
COPY --from=base /app/packages/types/dist ./packages/types/dist
COPY --from=base /app/packages/logger/dist ./packages/logger/dist
COPY --from=base /app/packages/reengagement/dist ./packages/reengagement/dist
COPY --from=base /app/packages/cdn-upload/dist ./packages/cdn-upload/dist

# Копируем только package.json файлы
COPY --from=base /app/packages/worker/package.json ./packages/worker/package.json
COPY --from=base /app/packages/prisma/package.json ./packages/prisma/package.json
COPY --from=base /app/packages/reengagement/package.json ./packages/reengagement/package.json
COPY --from=base /app/packages/queues/package.json ./packages/queues/package.json
COPY --from=base /app/packages/webpush/package.json ./packages/webpush/package.json
COPY --from=base /app/packages/types/package.json ./packages/types/package.json
COPY --from=base /app/packages/logger/package.json ./packages/logger/package.json
COPY --from=base /app/packages/cdn-upload/package.json ./packages/cdn-upload/package.json

# Устанавливаем только production зависимости
RUN npm init -y && \
    npm install --production --no-optional \
    bullmq@5.2.0 \
    ioredis@5.3.2 \
    web-push@3.6.6 \
    @prisma/client@6.10.1 \
    pino@8.16.2 \
    pino-pretty@10.2.3 \
    @aws-sdk/client-s3@3.914.0 \
    @aws-sdk/s3-request-presigner@3.914.0

# Копируем весь сгенерированный Prisma client из base stage (включая runtime файлы)
COPY --from=base /app/node_modules/.pnpm/@prisma+client@6.10.1_prisma@6.10.1_typescript@5.8.3__typescript@5.8.3/node_modules/.prisma ./node_modules/.prisma
COPY --from=base /app/node_modules/.pnpm/@prisma+client@6.10.1_prisma@6.10.1_typescript@5.8.3__typescript@5.8.3/node_modules/@prisma ./node_modules/@prisma

# Копируем Prisma schema
COPY --from=base /app/packages/prisma/schema.prisma ./packages/prisma/schema.prisma

# Создаём алиасы в node_modules для workspace пакетов
RUN mkdir -p /app/node_modules/@gafus \
  && ln -s /app/packages/prisma /app/node_modules/@gafus/prisma \
  && ln -s /app/packages/queues /app/node_modules/@gafus/queues \
  && ln -s /app/packages/webpush /app/node_modules/@gafus/webpush \
  && ln -s /app/packages/types /app/node_modules/@gafus/types \
  && ln -s /app/packages/logger /app/node_modules/@gafus/logger \
  && ln -s /app/packages/cdn-upload /app/node_modules/@gafus/cdn-upload \
  && ln -s /app/packages/reengagement /app/node_modules/@gafus/reengagement

# Устанавливаем права доступа
RUN chown -R worker:nodejs /app
USER worker

# Устанавливаем переменные окружения
ENV NODE_ENV=production

# Запускаем worker
CMD ["node", "packages/worker/dist/worker/src/index.js"]