#!/usr/bin/env node
/**
 * –¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–æ–≥–æ–≤ –≤ error-dashboard
 * 
 * –ó–∞–ø—É—Å–∫: node packages/logger/test-error-dashboard.js
 */

import { createWorkerLogger } from './dist/index.js';

async function testErrorDashboard() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–æ–≥–æ–≤ –≤ error-dashboard...\n');

  const logger = createWorkerLogger('test-suite');

  try {
    // –¢–µ—Å—Ç 1: Error —É—Ä–æ–≤–µ–Ω—å
    console.log('1Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º error —É—Ä–æ–≤–µ–Ω—å...');
    await logger.error('Test error for dashboard integration', new Error('Test error message'), {
      testId: 'error-test-001',
      timestamp: new Date().toISOString(),
      environment: process.env.NODE_ENV || 'development'
    });
    console.log('‚úÖ Error –ª–æ–≥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω\n');

    // –¢–µ—Å—Ç 2: Warn —É—Ä–æ–≤–µ–Ω—å
    console.log('2Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º warn —É—Ä–æ–≤–µ–Ω—å...');
    logger.warn('Test warning for dashboard integration', {
      testId: 'warn-test-002',
      timestamp: new Date().toISOString(),
      environment: process.env.NODE_ENV || 'development'
    });
    console.log('‚úÖ Warn –ª–æ–≥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω\n');

    // –¢–µ—Å—Ç 3: Fatal —É—Ä–æ–≤–µ–Ω—å
    console.log('3Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º fatal —É—Ä–æ–≤–µ–Ω—å...');
    await logger.fatal('Test fatal error for dashboard integration', new Error('Test fatal error'), {
      testId: 'fatal-test-003',
      timestamp: new Date().toISOString(),
      environment: process.env.NODE_ENV || 'development'
    });
    console.log('‚úÖ Fatal –ª–æ–≥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω\n');

    // –¢–µ—Å—Ç 4: Info —É—Ä–æ–≤–µ–Ω—å (–Ω–µ –¥–æ–ª–∂–µ–Ω –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è)
    console.log('4Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º info —É—Ä–æ–≤–µ–Ω—å (–Ω–µ –¥–æ–ª–∂–µ–Ω –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è)...');
    logger.info('Test info message (should not appear in dashboard)', {
      testId: 'info-test-004',
      timestamp: new Date().toISOString()
    });
    console.log('‚úÖ Info –ª–æ–≥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω (—Ç–æ–ª—å–∫–æ –≤ –∫–æ–Ω—Å–æ–ª—å)\n');

    console.log('üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã!');
    console.log('\nüìä –ü—Ä–æ–≤–µ—Ä—å—Ç–µ error-dashboard:');
    console.log('   - Push Logs: http://localhost:3001/push-logs');
    console.log('   - Errors: http://localhost:3001');
    console.log('\nüîç –ò—â–∏—Ç–µ –ª–æ–≥–∏ –ø–æ —Ç–µ–≥–∞–º: error-test-001, warn-test-002, fatal-test-003');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
testErrorDashboard().then(() => {
  console.log('\n‚ú® –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
  process.exit(0);
}).catch((error) => {
  console.error('\nüí• –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π:', error);
  process.exit(1);
});
