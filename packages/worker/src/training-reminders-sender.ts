/**
 * –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞—Ö
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
 */

import { prisma } from '@gafus/prisma';
import { createWorkerLogger } from '@gafus/logger';
import { PushNotificationService } from '../../webpush/src/service';

const logger = createWorkerLogger('training-reminders-sender');

interface SendResult {
  sent: number;
  skipped: number;
  errors: number;
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–æ–≤–ø–∞–¥–∞–µ—Ç –ª–∏ —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ –¥–Ω—è–º–∏
 */
function matchesDayOfWeek(reminderDays: string | null, currentDayOfWeek: number): boolean {
  // –ï—Å–ª–∏ reminderDays –Ω–µ —É–∫–∞–∑–∞–Ω–æ - –≤—Å–µ –¥–Ω–∏
  if (!reminderDays) return true;

  // currentDayOfWeek: 0=–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ, 1=–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫, ..., 6=–°—É–±–±–æ—Ç–∞ (Date.getDay())
  // reminderDays: "1,2,3,4,5" –≥–¥–µ 1=–ü–Ω, 7=–í—Å
  // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º: 0->7, 1->1, 2->2, ..., 6->6
  const dayNumber = currentDayOfWeek === 0 ? 7 : currentDayOfWeek;

  const selectedDays = reminderDays.split(',');
  return selectedDays.includes(dayNumber.toString());
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–æ–≤–ø–∞–¥–∞–µ—Ç –ª–∏ —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è —Å –≤—Ä–µ–º–µ–Ω–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
 * –î–æ–ø—É—Å–∫–∞–µ—Ç—Å—è —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–µ ¬±5 –º–∏–Ω—É—Ç
 */
function matchesTime(reminderTime: string, currentTime: Date): boolean {
  const [hours, minutes] = reminderTime.split(':').map(Number);
  const currentHours = currentTime.getHours();
  const currentMinutes = currentTime.getMinutes();

  // –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞–∑–Ω–∏—Ü—É –≤ –º–∏–Ω—É—Ç–∞—Ö
  const reminderTotalMinutes = hours * 60 + minutes;
  const currentTotalMinutes = currentHours * 60 + currentMinutes;
  const diff = Math.abs(reminderTotalMinutes - currentTotalMinutes);

  // –î–æ–ø—É—Å–∫–∞–µ–º —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–µ ¬±5 –º–∏–Ω—É—Ç
  return diff <= 5;
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –ª–∏ —É–∂–µ —Å–µ–≥–æ–¥–Ω—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
 */
function wasAlreadySentToday(lastSentAt: Date | null, currentTime: Date): boolean {
  if (!lastSentAt) return false;

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ lastSentAt —Å–µ–≥–æ–¥–Ω—è
  const lastSentDate = new Date(lastSentAt);
  return (
    lastSentDate.getFullYear() === currentTime.getFullYear() &&
    lastSentDate.getMonth() === currentTime.getMonth() &&
    lastSentDate.getDate() === currentTime.getDate()
  );
}

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
 */
async function sendReminderToUser(
  userId: string,
  timezone: string
): Promise<{ success: boolean; error?: string }> {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const subscriptions = await prisma.pushSubscription.findMany({
      where: { userId }
    });

    if (subscriptions.length === 0) {
      logger.warn('–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç push-–ø–æ–¥–ø–∏—Å–æ–∫', { userId });
      return { success: false, error: 'No subscriptions' };
    }

    // –°–æ–∑–¥–∞—ë–º payload —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    const payload = JSON.stringify({
      title: "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ üêï",
      body: "–ü–æ—Ä–∞ –∑–∞–Ω–∏–º–∞—Ç—å—Å—è —Å –ø–∏—Ç–æ–º—Ü–µ–º! –ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø—Ä–æ —Å–µ–≥–æ–¥–Ω—è—à–Ω—é—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É.",
      icon: '/icons/icon192.png',
      badge: '/icons/badge-72.png',
      data: {
        url: '/courses'
      }
    });

    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
    const jsonSubscriptions = subscriptions.map(sub => ({
      endpoint: sub.endpoint,
      keys: sub.keys as { p256dh: string; auth: string }
    }));

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ PushNotificationService
    const pushService = PushNotificationService.fromEnvironment();
    const results = await pushService.sendNotifications(jsonSubscriptions, payload);

    if (results.successCount > 0) {
      logger.success('–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ', {
        userId,
        timezone,
        successCount: results.successCount,
        failureCount: results.failureCount
      });
      return { success: true };
    } else {
      logger.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ', {
        userId,
        failureCount: results.failureCount
      });
      return { success: false, error: 'All sends failed' };
    }
  } catch (error) {
    logger.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è', error as Error, { userId, timezone });
    return { success: false, error: error instanceof Error ? error.message : 'Unknown error' };
  }
}

/**
 * –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
 * –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç)
 */
export async function sendTrainingReminders(): Promise<SendResult> {
  const result: SendResult = {
    sent: 0,
    skipped: 0,
    errors: 0
  };

  try {
    logger.info('–ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞—Ö');

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≤–∫–ª—é—á–µ–Ω–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞—Ö
    const reminders = await prisma.reminder.findMany({
      where: {
        type: 'training',
        enabled: true
      },
      select: {
        id: true,
        userId: true,
        reminderTime: true,
        reminderDays: true,
        timezone: true,
        lastSentAt: true
      }
    });

    logger.info(`–ù–∞–π–¥–µ–Ω–æ ${reminders.length} –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π`);

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
    for (const reminder of reminders) {
      try {
        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ timezone –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const currentTime = new Date(
          new Date().toLocaleString('en-US', { timeZone: reminder.timezone })
        );

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏
        if (!matchesDayOfWeek(reminder.reminderDays, currentTime.getDay())) {
          logger.info('–°–µ–≥–æ–¥–Ω—è –Ω–µ –¥–µ–Ω—å –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è', {
            userId: reminder.userId,
            reminderDays: reminder.reminderDays,
            currentDay: currentTime.getDay()
          });
          result.skipped++;
          continue;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è
        if (!matchesTime(reminder.reminderTime, currentTime)) {
          result.skipped++;
          continue;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –ª–∏ —É–∂–µ —Å–µ–≥–æ–¥–Ω—è
        if (wasAlreadySentToday(reminder.lastSentAt, currentTime)) {
          logger.info('–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–µ–≥–æ–¥–Ω—è', {
            userId: reminder.userId,
            lastSentAt: reminder.lastSentAt
          });
          result.skipped++;
          continue;
        }

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
        const sendResult = await sendReminderToUser(reminder.userId, reminder.timezone);

        if (sendResult.success) {
          // –û–±–Ω–æ–≤–ª—è–µ–º lastSentAt
          await prisma.reminder.update({
            where: { id: reminder.id },
            data: { lastSentAt: new Date() }
          });
          result.sent++;
        } else {
          result.errors++;
        }
      } catch (error) {
        logger.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è', error as Error, {
          reminderId: reminder.id,
          userId: reminder.userId
        });
        result.errors++;
      }
    }

    logger.success('–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞', {
      sent: result.sent,
      skipped: result.skipped,
      errors: result.errors
    });
    return result;
  } catch (error) {
    logger.error('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π', error as Error);
    throw error;
  }
}

