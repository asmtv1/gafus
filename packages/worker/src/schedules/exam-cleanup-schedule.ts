import { examCleanupQueue } from "@gafus/queues";
import { createWorkerLogger } from "@gafus/logger";

const logger = createWorkerLogger('exam-cleanup-schedule');

/**
 * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –≤–∏–¥–µ–æ —ç–∫–∑–∞–º–µ–Ω–æ–≤
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∫–∞–∂–¥—É—é –Ω–æ—á—å –≤ 03:00 (–∫–æ–≥–¥–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞)
 */
export async function setupExamCleanupSchedule() {
  try {
    logger.info("üìÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –æ—á–∏—Å—Ç–∫–∏ –≤–∏–¥–µ–æ —ç–∫–∑–∞–º–µ–Ω–æ–≤");

    // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –µ—Å–ª–∏ –µ—Å—Ç—å
    const existingJobs = await examCleanupQueue.getRepeatableJobs();
    for (const job of existingJobs) {
      await examCleanupQueue.removeRepeatableByKey(job.key);
      logger.info(`üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ —Å—Ç–∞—Ä–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ: ${job.key}`);
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
    // Cron: –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 03:00 –ø–æ –º–æ—Å–∫–æ–≤—Å–∫–æ–º—É –≤—Ä–µ–º–µ–Ω–∏
    await examCleanupQueue.add(
      'daily-cleanup',
      {}, // –ü—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ, –≤—Å—é –ª–æ–≥–∏–∫—É –¥–µ–ª–∞–µ—Ç worker
      {
        repeat: {
          pattern: '0 3 * * *', // –ö–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 03:00
          tz: 'Europe/Moscow'
        },
        removeOnComplete: true,
        removeOnFail: false
      }
    );

    logger.success("‚úÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ—á–∏—Å—Ç–∫–∏ –≤–∏–¥–µ–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ: –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 03:00 MSK");

    // –¢–∞–∫–∂–µ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É –Ω–∞ –ø–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    await examCleanupQueue.add(
      'initial-cleanup',
      {},
      {
        delay: 60000 // –ó–∞–ø—É—Å—Ç–∏—Ç—å —á–µ—Ä–µ–∑ 1 –º–∏–Ω—É—Ç—É –ø–æ—Å–ª–µ —Å—Ç–∞—Ä—Ç–∞
      }
    );

    logger.info("‚è∞ –ù–∞—á–∞–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ —á–µ—Ä–µ–∑ 1 –º–∏–Ω—É—Ç—É");
  } catch (error) {
    logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –æ—á–∏—Å—Ç–∫–∏", error as Error);
    throw error;
  }
}

