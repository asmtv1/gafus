import { prisma } from "@gafus/prisma";
import { connection, examCleanupQueue } from "@gafus/queues";
import { createWorkerLogger } from "@gafus/logger";
import { deleteFileFromCDN } from "@gafus/cdn-upload";
import type { Job } from "bullmq";
import { Worker } from "bullmq";

const logger = createWorkerLogger('exam-cleanup-worker');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const config = {
  worker: {
    concurrency: 2, // –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ 2 –∑–∞–¥–∞—á
    removeOnComplete: { count: 1000 }, // –•—Ä–∞–Ω–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 1000 —É—Å–ø–µ—à–Ω—ã—Ö
    removeOnFail: { count: 100 }, // –•—Ä–∞–Ω–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 100 –Ω–µ—É–¥–∞—á–Ω—ã—Ö
  },
} as const;

/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –≤–∏–¥–µ–æ —ç–∫–∑–∞–º–µ–Ω–æ–≤
 */
class ExamCleanupProcessor {
  private logger = logger;

  /**
   * –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –≤–∏–¥–µ–æ –ø–æ –ø—Ä–∞–≤–∏–ª–∞–º:
   * 1. –ó–∞—á—Ç–µ–Ω–Ω—ã–µ (COMPLETED) ‚Üí —É–¥–∞–ª—è—Ç—å —á–µ—Ä–µ–∑ 30 –¥–Ω–µ–π
   * 2. –ù–µ–∑–∞—á—Ç–µ–Ω–Ω—ã–µ (IN_PROGRESS) ‚Üí —É–¥–∞–ª—è—Ç—å —á–µ—Ä–µ–∑ 90 –¥–Ω–µ–π
   */
  async cleanupOldVideos(): Promise<{ deleted: number; errors: number }> {
    this.logger.info("üßπ –ù–∞—á–∏–Ω–∞–µ–º –æ—á–∏—Å—Ç–∫—É —Å—Ç–∞—Ä—ã—Ö –≤–∏–¥–µ–æ —ç–∫–∑–∞–º–µ–Ω–æ–≤");

    const now = new Date();
    const thirtyDaysAgo = new Date(now.getTime() - 30 * 24 * 60 * 60 * 1000);
    const ninetyDaysAgo = new Date(now.getTime() - 90 * 24 * 60 * 60 * 1000);

    let deleted = 0;
    let errors = 0;

    try {
      // 1. –ù–∞—Ö–æ–¥–∏–º –∑–∞—á—Ç–µ–Ω–Ω—ã–µ —ç–∫–∑–∞–º–µ–Ω—ã —Å—Ç–∞—Ä—à–µ 30 –¥–Ω–µ–π —Å –≤–∏–¥–µ–æ
      const completedExams = await prisma.examResult.findMany({
        where: {
          videoReportUrl: { not: null },
          videoDeletedAt: null, // –í–∏–¥–µ–æ –µ—â–µ –Ω–µ —É–¥–∞–ª–µ–Ω–æ
          userStep: { status: "COMPLETED" },
          updatedAt: { lt: thirtyDaysAgo }
        },
        select: {
          id: true,
          userStepId: true,
          videoReportUrl: true,
          userStep: {
            select: {
              status: true,
              userTraining: {
                select: {
                  user: { select: { username: true } }
                }
              }
            }
          }
        }
      });

      this.logger.info(`üìã –ù–∞–π–¥–µ–Ω–æ ${completedExams.length} –∑–∞—á—Ç–µ–Ω–Ω—ã—Ö —ç–∫–∑–∞–º–µ–Ω–æ–≤ —Å—Ç–∞—Ä—à–µ 30 –¥–Ω–µ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è`);

      // 2. –ù–∞—Ö–æ–¥–∏–º –Ω–µ–∑–∞—á—Ç–µ–Ω–Ω—ã–µ —ç–∫–∑–∞–º–µ–Ω—ã —Å—Ç–∞—Ä—à–µ 90 –¥–Ω–µ–π —Å –≤–∏–¥–µ–æ
      const pendingExams = await prisma.examResult.findMany({
        where: {
          videoReportUrl: { not: null },
          videoDeletedAt: null,
          userStep: { status: "IN_PROGRESS" },
          createdAt: { lt: ninetyDaysAgo }
        },
        select: {
          id: true,
          userStepId: true,
          videoReportUrl: true,
          userStep: {
            select: {
              status: true,
              userTraining: {
                select: {
                  user: { select: { username: true } }
                }
              }
            }
          }
        }
      });

      this.logger.info(`üìã –ù–∞–π–¥–µ–Ω–æ ${pendingExams.length} –Ω–µ–∑–∞—á—Ç–µ–Ω–Ω—ã—Ö —ç–∫–∑–∞–º–µ–Ω–æ–≤ —Å—Ç–∞—Ä—à–µ 90 –¥–Ω–µ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è`);

      // 3. –£–¥–∞–ª—è–µ–º –≤–∏–¥–µ–æ –¥–ª—è –∑–∞—á—Ç–µ–Ω–Ω—ã—Ö —ç–∫–∑–∞–º–µ–Ω–æ–≤
      for (const exam of completedExams) {
        try {
          await this.deleteExamVideo(
            exam.videoReportUrl!,
            exam.userStepId,
            'auto_cleanup_completed',
            exam.userStep.userTraining.user.username
          );
          deleted++;
        } catch (error) {
          this.logger.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤–∏–¥–µ–æ –¥–ª—è –∑–∞—á—Ç–µ–Ω–Ω–æ–≥–æ —ç–∫–∑–∞–º–µ–Ω–∞ ${exam.id}`, error as Error);
          errors++;
        }
      }

      // 4. –£–¥–∞–ª—è–µ–º –≤–∏–¥–µ–æ –¥–ª—è –Ω–µ–∑–∞—á—Ç–µ–Ω–Ω—ã—Ö —ç–∫–∑–∞–º–µ–Ω–æ–≤
      for (const exam of pendingExams) {
        try {
          await this.deleteExamVideo(
            exam.videoReportUrl!,
            exam.userStepId,
            'auto_cleanup_pending',
            exam.userStep.userTraining.user.username
          );
          deleted++;
        } catch (error) {
          this.logger.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤–∏–¥–µ–æ –¥–ª—è –Ω–µ–∑–∞—á—Ç–µ–Ω–Ω–æ–≥–æ —ç–∫–∑–∞–º–µ–Ω–∞ ${exam.id}`, error as Error);
          errors++;
        }
      }

      this.logger.success(`‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –£–¥–∞–ª–µ–Ω–æ: ${deleted}, –û—à–∏–±–æ–∫: ${errors}`);

      return { deleted, errors };
    } catch (error) {
      this.logger.error("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –≤–∏–¥–µ–æ", error as Error);
      throw error;
    }
  }

  /**
   * –£–¥–∞–ª—è–µ—Ç –≤–∏–¥–µ–æ —Å CDN –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –∑–∞–ø–∏—Å—å –≤ –ë–î
   */
  private async deleteExamVideo(
    videoUrl: string,
    userStepId: string,
    reason: string,
    username: string
  ): Promise<void> {
    try {
      // –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å –∏–∑ CDN URL
      const relativePath = videoUrl.replace('https://gafus-media.storage.yandexcloud.net/uploads/', '');
      
      this.logger.info(`üóëÔ∏è –£–¥–∞–ª—è–µ–º –≤–∏–¥–µ–æ: ${relativePath} (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${username}, –ø—Ä–∏—á–∏–Ω–∞: ${reason})`);

      // –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª —Å CDN
      await deleteFileFromCDN(relativePath);

      // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –ë–î
      await prisma.examResult.update({
        where: { userStepId },
        data: {
          videoReportUrl: null,
          videoDeletedAt: new Date(),
          videoDeleteReason: reason
        }
      });

      this.logger.success(`‚úÖ –í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ: ${relativePath}`);
    } catch (error) {
      this.logger.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤–∏–¥–µ–æ: ${videoUrl}`, error as Error);
      throw error;
    }
  }
}

// Worker –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–¥–∞—á –æ—á–∏—Å—Ç–∫–∏
class ExamCleanupWorker {
  private worker: Worker;
  private processor: ExamCleanupProcessor;
  private logger = logger;

  constructor() {
    this.processor = new ExamCleanupProcessor();

    this.worker = new Worker("exam-cleanup", this.processJob.bind(this), {
      connection,
      concurrency: config.worker.concurrency,
      removeOnComplete: config.worker.removeOnComplete,
      removeOnFail: config.worker.removeOnFail,
    });

    this.setupEventHandlers();
  }

  private async processJob(job: Job): Promise<void> {
    try {
      this.logger.info("üßπ –ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏ –æ—á–∏—Å—Ç–∫–∏ –≤–∏–¥–µ–æ", { jobId: job.id });

      const result = await this.processor.cleanupOldVideos();

      this.logger.success("‚úÖ –ó–∞–¥–∞—á–∞ –æ—á–∏—Å—Ç–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞", {
        jobId: job.id,
        deleted: result.deleted,
        errors: result.errors
      });
    } catch (error) {
      this.logger.error("‚ùå –ó–∞–¥–∞—á–∞ –æ—á–∏—Å—Ç–∫–∏ –ø—Ä–æ–≤–∞–ª–∏–ª–∞—Å—å", error as Error, {
        jobId: job.id,
      });
      throw error; // BullMQ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ retry
    }
  }

  private setupEventHandlers(): void {
    this.worker.on("completed", (job) => {
      this.logger.success("‚úÖ –ó–∞–¥–∞—á–∞ –æ—á–∏—Å—Ç–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞", { jobId: job.id });
    });

    this.worker.on("failed", (job, err) => {
      this.logger.error("‚ùå –ó–∞–¥–∞—á–∞ –æ—á–∏—Å—Ç–∫–∏ –ø—Ä–æ–≤–∞–ª–∏–ª–∞—Å—å", err as Error, {
        jobId: job?.id,
      });
    });

    this.worker.on("error", (err) => {
      this.logger.error("‚ùå –û—à–∏–±–∫–∞ worker'–∞", err as Error);
    });

    this.worker.on("stalled", (jobId) => {
      this.logger.warn("‚ö†Ô∏è –ó–∞–¥–∞—á–∞ –∑–∞–≤–∏—Å–ª–∞", { jobId });
    });
  }

  public start(): void {
    this.logger.success("üöÄ Exam cleanup worker –∑–∞–ø—É—â–µ–Ω", {
      concurrency: config.worker.concurrency,
      removeOnComplete: config.worker.removeOnComplete,
      removeOnFail: config.worker.removeOnFail,
    });
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ index.ts
export function startExamCleanupWorker() {
  const worker = new ExamCleanupWorker();
  worker.start();
  return worker;
}

// –ï—Å–ª–∏ —Ñ–∞–π–ª –∑–∞–ø—É—â–µ–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  logger.info("üöÄ –ó–∞–ø—É—Å–∫ exam-cleanup-worker –ø—Ä–æ—Ü–µ—Å—Å–∞...");
  
  try {
    startExamCleanupWorker();
  } catch (error) {
    logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å exam-cleanup-worker", error as Error);
    process.exit(1);
  }
}

