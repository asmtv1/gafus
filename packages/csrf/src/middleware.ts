import { NextResponse } from "next/server";

import { verifyCSRFToken } from "./utils";

import type { NextRequest } from "next/server";

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è CSRF –∑–∞—â–∏—Ç—ã
const CSRF_CONFIG = {
  // –°—Ç—Ä–æ–≥–∏–π —Ä–µ–∂–∏–º (–≤ production –≤—Å–µ–≥–¥–∞ true)
  strictMode: process.env.NODE_ENV === "production" || process.env.CSRF_STRICT === "true",
  // –†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è CSRF —Ç–æ–∫–µ–Ω–∞
  allowedHeaders: ["x-csrf-token", "x-xsrf-token"],
  // –ù–µ–±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –º–µ—Ç–æ–¥—ã, —Ç—Ä–µ–±—É—é—â–∏–µ CSRF –∑–∞—â–∏—Ç—ã
  unsafeMethods: ["POST", "PUT", "PATCH", "DELETE"] as const,
  // –ò—Å–∫–ª—é—á–µ–Ω–∏—è (–ø—É—Ç–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —Ç—Ä–µ–±—É—é—Ç CSRF –∑–∞—â–∏—Ç—ã)
  excludedPaths: [
    "/api/auth/", // NextAuth endpoints
    "/api/csrf-token", // CSRF token endpoint
    "/api/webhook/", // Webhook endpoints
  ],
} as const;

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø—É—Ç—å –∏—Å–∫–ª—é—á–µ–Ω–∏–µ–º –∏–∑ CSRF –∑–∞—â–∏—Ç—ã
 */
function isExcludedPath(pathname: string): boolean {
  return CSRF_CONFIG.excludedPaths.some((path) => pathname.startsWith(path));
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç CSRF —Ç–æ–∫–µ–Ω –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –∑–∞–ø—Ä–æ—Å–∞
 */
function getCSRFTokenFromHeaders(req: NextRequest): string | null {
  for (const headerName of CSRF_CONFIG.allowedHeaders) {
    const token = req.headers.get(headerName);
    if (token) return token;
  }
  return null;
}

/**
 * –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç —Ñ–æ—Ä–º–∞—Ç CSRF —Ç–æ–∫–µ–Ω–∞
 */
function isValidCSRFTokenFormat(token: string): boolean {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç: salt.hash (–¥–≤–∞ –±–ª–æ–∫–∞, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã—Ö —Ç–æ—á–∫–æ–π)
  const parts = token.split(".");
  if (parts.length !== 2) return false;

  const [salt, hash] = parts;
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ salt –∏ hash —Å–æ—Å—Ç–æ—è—Ç —Ç–æ–ª—å–∫–æ –∏–∑ hex —Å–∏–º–≤–æ–ª–æ–≤
  const hexRegex = /^[0-9a-f]+$/i;
  return hexRegex.test(salt) && hexRegex.test(hash) && salt.length === 32 && hash.length === 64;
}

/**
 * –õ–æ–≥–∏—Ä—É–µ—Ç –ø–æ–ø—ã—Ç–∫—É CSRF –∞—Ç–∞–∫–∏
 */
function logCSRFAttack(req: NextRequest, reason: string, token?: string): void {
  const logData = {
    timestamp: new Date().toISOString(),
    method: req.method,
    url: req.url,
    userAgent: req.headers.get("user-agent") || "Unknown",
    referer: req.headers.get("referer") || "Unknown",
    reason,
    token: token ? `${token.substring(0, 8)}...` : "None",
    ip: req.headers.get("x-forwarded-for") || req.headers.get("x-real-ip") || "Unknown",
  };

  console.warn("üö® CSRF Attack Attempt:", JSON.stringify(logData, null, 2));
}

/**
 * Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ CSRF —Ç–æ–∫–µ–Ω–æ–≤ –≤ API –º–∞—Ä—à—Ä—É—Ç–∞—Ö
 */
export function withCSRFProtection(
  handler: (req: NextRequest) => Promise<NextResponse> | NextResponse,
) {
  return async (req: NextRequest): Promise<NextResponse> => {
    const { pathname } = req.nextUrl;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    if (!CSRF_CONFIG.unsafeMethods.includes(req.method as "POST" | "PUT" | "PATCH" | "DELETE")) {
      return handler(req);
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏—è
    if (isExcludedPath(pathname)) {
      return handler(req);
    }

    // –ü–æ–ª—É—á–∞–µ–º CSRF —Ç–æ–∫–µ–Ω –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
    const csrfToken = getCSRFTokenFromHeaders(req);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–∞
    if (!csrfToken) {
      logCSRFAttack(req, "Missing CSRF token");

      if (CSRF_CONFIG.strictMode) {
        return NextResponse.json(
          {
            error: "CSRF token required",
            code: "CSRF_TOKEN_MISSING",
          },
          { status: 403 },
        );
      } else {
        console.warn("‚ö†Ô∏è CSRF token missing, but allowing in non-strict mode");
        return handler(req);
      }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç —Ç–æ–∫–µ–Ω–∞
    if (!isValidCSRFTokenFormat(csrfToken)) {
      logCSRFAttack(req, "Invalid CSRF token format", csrfToken);

      if (CSRF_CONFIG.strictMode) {
        return NextResponse.json(
          {
            error: "Invalid CSRF token format",
            code: "CSRF_TOKEN_INVALID_FORMAT",
          },
          { status: 403 },
        );
      } else {
        console.warn("‚ö†Ô∏è Invalid CSRF token format, but allowing in non-strict mode");
        return handler(req);
      }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞
    try {
      const isValid = await verifyCSRFToken(csrfToken);

      if (!isValid) {
        logCSRFAttack(req, "Invalid CSRF token", csrfToken);

        if (CSRF_CONFIG.strictMode) {
          return NextResponse.json(
            {
              error: "Invalid CSRF token",
              code: "CSRF_TOKEN_INVALID",
            },
            { status: 403 },
          );
        } else {
          console.warn("‚ö†Ô∏è Invalid CSRF token, but allowing in non-strict mode");
          return handler(req);
        }
      }

      // –¢–æ–∫–µ–Ω –≤–∞–ª–∏–¥–µ–Ω, –ª–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –≤ development
      if (process.env.NODE_ENV === "development") {
        console.warn("‚úÖ CSRF token validated successfully");
      }
    } catch (error) {
      console.error("‚ùå Error verifying CSRF token:", error);
      logCSRFAttack(req, "CSRF verification error", csrfToken);

      if (CSRF_CONFIG.strictMode) {
        return NextResponse.json(
          {
            error: "CSRF verification failed",
            code: "CSRF_VERIFICATION_ERROR",
          },
          { status: 500 },
        );
      } else {
        console.warn("‚ö†Ô∏è CSRF verification error, but allowing in non-strict mode");
        return handler(req);
      }
    }

    return handler(req);
  };
}

/**
 * –°–æ–∑–¥–∞–µ—Ç middleware —Å –∫–∞—Å—Ç–æ–º–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
 */
export function createCSRFMiddleware(config?: Partial<typeof CSRF_CONFIG>) {
  const mergedConfig = { ...CSRF_CONFIG, ...config };

  return function withCustomCSRFProtection(
    handler: (req: NextRequest) => Promise<NextResponse> | NextResponse,
  ) {
    return async (req: NextRequest): Promise<NextResponse> => {
      // –í—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–º–µ–Ω—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
      const originalConfig = { ...CSRF_CONFIG };
      Object.assign(CSRF_CONFIG, mergedConfig);

      try {
        return await withCSRFProtection(handler)(req);
      } finally {
        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        Object.assign(CSRF_CONFIG, originalConfig);
      }
    };
  };
}
