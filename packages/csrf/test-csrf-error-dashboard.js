#!/usr/bin/env node
/**
 * –¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–æ–≥–æ–≤ csrf –≤ error-dashboard
 * 
 * –ó–∞–ø—É—Å–∫: node packages/csrf/test-csrf-error-dashboard.js
 */

import { createWebLogger } from '@gafus/logger/dist/index.js';

async function testCSRFErrorDashboard() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–æ–≥–æ–≤ csrf –≤ error-dashboard...\n');

  try {
    // –¢–µ—Å—Ç 1: CSRF Utils –ª–æ–≥–≥–µ—Ä
    console.log('1Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º csrf-utils –ª–æ–≥–≥–µ—Ä...');
    const utilsLogger = createWebLogger('csrf-utils');
    await utilsLogger.error('Error generating CSRF token', new Error('Crypto module failed'), {
      secretSize: 32,
      saltSize: 16
    });
    console.log('‚úÖ CSRF Utils error –ª–æ–≥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω\n');

    // –¢–µ—Å—Ç 2: CSRF Store –ª–æ–≥–≥–µ—Ä
    console.log('2Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º csrf-store –ª–æ–≥–≥–µ—Ä...');
    const storeLogger = createWebLogger('csrf-store');
    await storeLogger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ CSRF —Ç–æ–∫–µ–Ω–∞', new Error('Network timeout'), {
      retryCount: 3,
      lastFetched: Date.now()
    });
    console.log('‚úÖ CSRF Store error –ª–æ–≥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω\n');

    // –¢–µ—Å—Ç 3: CSRF Provider –ª–æ–≥–≥–µ—Ä
    console.log('3Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º csrf-provider –ª–æ–≥–≥–µ—Ä...');
    const providerLogger = createWebLogger('csrf-provider');
    await providerLogger.error('CSRF Provider initialization failed', new Error('Token validation failed'), {
      retryCount: 2,
      maxRetries: 5
    });
    console.log('‚úÖ CSRF Provider error –ª–æ–≥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω\n');

    // –¢–µ—Å—Ç 4: CSRF Middleware –ª–æ–≥–≥–µ—Ä
    console.log('4Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º csrf-middleware –ª–æ–≥–≥–µ—Ä...');
    const middlewareLogger = createWebLogger('csrf-middleware');
    await middlewareLogger.error('Error verifying CSRF token', new Error('Token mismatch'), {
      method: 'POST',
      url: '/api/data',
      tokenLength: 64
    });
    console.log('‚úÖ CSRF Middleware error –ª–æ–≥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω\n');

    // –¢–µ—Å—Ç 5: CSRF Attack Attempt
    console.log('5Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º CSRF Attack Attempt...');
    middlewareLogger.warn('CSRF Attack Attempt', {
      ip: '192.168.1.100',
      userAgent: 'Mozilla/5.0 (Test Browser)',
      method: 'POST',
      url: '/api/sensitive-data',
      reason: 'Invalid CSRF token',
      token: 'present',
      timestamp: new Date().toISOString()
    });
    console.log('‚úÖ CSRF Attack Attempt warning –ª–æ–≥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω\n');

    // –¢–µ—Å—Ç 6: CSRF Token Validation Success
    console.log('6Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º CSRF Token Validation Success...');
    middlewareLogger.success('CSRF token validated successfully', {
      method: 'POST',
      url: '/api/data',
      tokenLength: 64
    });
    console.log('‚úÖ CSRF Token Validation Success –ª–æ–≥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω\n');

    // –¢–µ—Å—Ç 7: CSRF Token Warnings (—Ç–æ–ª—å–∫–æ –≤ production)
    console.log('7Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º CSRF Token Warnings...');
    utilsLogger.warn('Invalid CSRF token format', {
      tokenLength: 32,
      expectedFormat: 'base64.base64'
    });
    console.log('‚úÖ CSRF Token Warning –ª–æ–≥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω\n');

    // –¢–µ—Å—Ç 8: CSRF Store Warnings
    console.log('8Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º CSRF Store Warnings...');
    storeLogger.warn('Invalid CSRF token, request may fail', {
      tokenLength: 0,
      tokenValue: 'invalid'
    });
    console.log('‚úÖ CSRF Store Warning –ª–æ–≥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω\n');

    console.log('üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã!');
    console.log('\nüìä –ü—Ä–æ–≤–µ—Ä—å—Ç–µ error-dashboard:');
    console.log('   - Reports: http://localhost:3001/reports');
    console.log('   - –ò—â–∏—Ç–µ –ª–æ–≥–∏ –ø–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É: csrf-utils, csrf-store, csrf-provider, csrf-middleware');
    console.log('\nüîç –û–∂–∏–¥–∞–µ–º—ã–µ –ª–æ–≥–∏:');
    console.log('   - CSRF Utils –æ—à–∏–±–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤');
    console.log('   - CSRF Store –æ—à–∏–±–∫–∏ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤');
    console.log('   - CSRF Provider –æ—à–∏–±–∫–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏');
    console.log('   - CSRF Middleware –æ—à–∏–±–∫–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏');
    console.log('   - CSRF Attack Attempt –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è');
    console.log('   - CSRF Token Validation Success —Å–æ–æ–±—â–µ–Ω–∏—è');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
testCSRFErrorDashboard().then(() => {
  console.log('\n‚ú® –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
  process.exit(0);
}).catch((error) => {
  console.error('\nüí• –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π:', error);
  process.exit(1);
});
