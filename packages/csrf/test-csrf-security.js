#!/usr/bin/env node

/**
 * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–Ω–æ–π CSRF –∑–∞—â–∏—Ç—ã
 * –ó–∞–ø—É—Å–∫: node test-csrf-security.js
 */

const fetch = require("node-fetch");

const BASE_URL = process.env.TEST_URL || "http://localhost:3002";
const API_ENDPOINT = `${BASE_URL}/api/csrf-token`;

// –¶–≤–µ—Ç–∞ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
const colors = {
  green: "\x1b[32m",
  red: "\x1b[31m",
  yellow: "\x1b[33m",
  blue: "\x1b[34m",
  reset: "\x1b[0m",
  bold: "\x1b[1m",
};

function log(message, color = "reset") {
  console.log(`${colors[color]}${message}${colors.reset}`);
}

function logTest(name, result, details = "") {
  const status = result ? "‚úÖ PASS" : "‚ùå FAIL";
  const color = result ? "green" : "red";
  log(`${status} ${name}`, color);
  if (details) {
    log(`   ${details}`, "yellow");
  }
}

async function testCSRFTokenGeneration() {
  log("\nüîí –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ CSRF —Ç–æ–∫–µ–Ω–æ–≤", "blue");

  try {
    const response = await fetch(API_ENDPOINT);
    const data = await response.json();

    const hasToken = !!data.token;
    const isString = typeof data.token === "string";
    const hasValidFormat =
      data.token && data.token.includes(".") && data.token.split(".").length === 2;

    logTest("–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞", hasToken, hasToken ? "–¢–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω" : "–¢–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç");
    logTest("–¢–∏–ø —Ç–æ–∫–µ–Ω–∞", isString, isString ? "–°—Ç—Ä–æ–∫–∞" : `–¢–∏–ø: ${typeof data.token}`);
    logTest(
      "–§–æ—Ä–º–∞—Ç —Ç–æ–∫–µ–Ω–∞",
      hasValidFormat,
      hasValidFormat ? "salt.hash —Ñ–æ—Ä–º–∞—Ç" : "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç",
    );

    return hasToken && isString && hasValidFormat;
  } catch (error) {
    logTest("–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞", false, error.message);
    return false;
  }
}

async function testCSRFProtection() {
  log("\nüõ°Ô∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ CSRF –∑–∞—â–∏—Ç—ã", "blue");

  const testEndpoint = `${BASE_URL}/api/test-csrf`;

  // –¢–µ—Å—Ç 1: –ó–∞–ø—Ä–æ—Å –±–µ–∑ CSRF —Ç–æ–∫–µ–Ω–∞
  try {
    const response1 = await fetch(testEndpoint, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ test: true }),
    });

    const isBlocked = response1.status === 403;
    logTest("–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –±–µ–∑ —Ç–æ–∫–µ–Ω–∞", isBlocked, `–°—Ç–∞—Ç—É—Å: ${response1.status}`);
  } catch (error) {
    logTest("–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ –±–µ–∑ —Ç–æ–∫–µ–Ω–∞", false, error.message);
  }

  // –¢–µ—Å—Ç 2: –ó–∞–ø—Ä–æ—Å —Å –Ω–µ–≤–µ—Ä–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º
  try {
    const response2 = await fetch(testEndpoint, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "x-csrf-token": "invalid-token",
      },
      body: JSON.stringify({ test: true }),
    });

    const isBlocked = response2.status === 403;
    logTest("–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞", isBlocked, `–°—Ç–∞—Ç—É—Å: ${response2.status}`);
  } catch (error) {
    logTest("–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ —Å –Ω–µ–≤–µ—Ä–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º", false, error.message);
  }

  // –¢–µ—Å—Ç 3: –ó–∞–ø—Ä–æ—Å —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º
  try {
    // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º –≤–∞–ª–∏–¥–Ω—ã–π —Ç–æ–∫–µ–Ω
    const tokenResponse = await fetch(API_ENDPOINT);
    const tokenData = await tokenResponse.json();

    if (tokenData.token) {
      const response3 = await fetch(testEndpoint, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          "x-csrf-token": tokenData.token,
        },
        body: JSON.stringify({ test: true }),
      });

      const isAllowed = response3.status === 200;
      logTest("–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –≤–∞–ª–∏–¥–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞", isAllowed, `–°—Ç–∞—Ç—É—Å: ${response3.status}`);
    } else {
      logTest("–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –≤–∞–ª–∏–¥–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞", false, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω");
    }
  } catch (error) {
    logTest("–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ —Å –≤–∞–ª–∏–¥–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º", false, error.message);
  }
}

async function testCSRFHeaders() {
  log("\nüìã –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ CSRF –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤", "blue");

  const validHeaders = ["x-csrf-token", "x-xsrf-token"];

  for (const header of validHeaders) {
    try {
      const response = await fetch(`${BASE_URL}/api/test-csrf`, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          [header]: "test-token",
        },
        body: JSON.stringify({ test: true }),
      });

      const isProcessed = response.status === 403; // –û–∂–∏–¥–∞–µ–º 403 –¥–ª—è –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
      logTest(`–ó–∞–≥–æ–ª–æ–≤–æ–∫ ${header}`, isProcessed, `–°—Ç–∞—Ç—É—Å: ${response.status}`);
    } catch (error) {
      logTest(`–ó–∞–≥–æ–ª–æ–≤–æ–∫ ${header}`, false, error.message);
    }
  }
}

async function testCSRFMethods() {
  log("\nüîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ HTTP –º–µ—Ç–æ–¥–æ–≤", "blue");

  const unsafeMethods = ["POST", "PUT", "PATCH", "DELETE"];
  const safeMethods = ["GET", "HEAD", "OPTIONS"];

  // –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–µ–±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
  for (const method of unsafeMethods) {
    try {
      const response = await fetch(`${BASE_URL}/api/test-csrf`, {
        method,
        headers: { "Content-Type": "application/json" },
        body: method !== "GET" ? JSON.stringify({ test: true }) : undefined,
      });

      const isProtected = response.status === 403;
      logTest(`–ó–∞—â–∏—Ç–∞ ${method}`, isProtected, `–°—Ç–∞—Ç—É—Å: ${response.status}`);
    } catch (error) {
      logTest(`–ó–∞—â–∏—Ç–∞ ${method}`, false, error.message);
    }
  }

  // –¢–µ—Å—Ç–∏—Ä—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
  for (const method of safeMethods) {
    try {
      const response = await fetch(`${BASE_URL}/api/test-csrf`, {
        method,
      });

      const isAllowed = response.status !== 403;
      logTest(`–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ ${method}`, isAllowed, `–°—Ç–∞—Ç—É—Å: ${response.status}`);
    } catch (error) {
      logTest(`–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ ${method}`, false, error.message);
    }
  }
}

async function testCSRFExclusions() {
  log("\nüö´ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–π CSRF", "blue");

  const excludedPaths = ["/api/auth/", "/api/csrf-token", "/api/webhook/"];

  for (const path of excludedPaths) {
    try {
      const response = await fetch(`${BASE_URL}${path}`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ test: true }),
      });

      const isExcluded = response.status !== 403;
      logTest(`–ò—Å–∫–ª—é—á–µ–Ω–∏–µ ${path}`, isExcluded, `–°—Ç–∞—Ç—É—Å: ${response.status}`);
    } catch (error) {
      logTest(`–ò—Å–∫–ª—é—á–µ–Ω–∏–µ ${path}`, false, error.message);
    }
  }
}

async function testCSRFRateLimiting() {
  log("\n‚è±Ô∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –∑–∞–ø—Ä–æ—Å–æ–≤", "blue");

  const maxAttempts = 5;
  let blockedCount = 0;

  for (let i = 0; i < maxAttempts; i++) {
    try {
      const response = await fetch(`${BASE_URL}/api/test-csrf`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ test: true }),
      });

      if (response.status === 403) {
        blockedCount++;
      }

      // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
      await new Promise((resolve) => setTimeout(resolve, 100));
    } catch (error) {
      console.error(`–û—à–∏–±–∫–∞ –≤ –ø–æ–ø—ã—Ç–∫–µ ${i + 1}:`, error.message);
    }
  }

  const hasRateLimiting = blockedCount > 0;
  logTest("–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤", hasRateLimiting, `–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ: ${blockedCount}/${maxAttempts}`);
}

async function runAllTests() {
  log("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ CSRF –∑–∞—â–∏—Ç—ã", "bold");
  log(`–¢–µ—Å—Ç–∏—Ä—É–µ–º: ${BASE_URL}`, "blue");

  const tests = [
    testCSRFTokenGeneration,
    testCSRFProtection,
    testCSRFHeaders,
    testCSRFMethods,
    testCSRFExclusions,
    testCSRFRateLimiting,
  ];

  let passedTests = 0;
  let totalTests = 0;

  for (const test of tests) {
    try {
      const result = await test();
      if (result !== false) {
        passedTests++;
      }
      totalTests++;
    } catch (error) {
      log(`‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ: ${error.message}`, "red");
      totalTests++;
    }
  }

  log("\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è", "bold");
  log(
    `–ü—Ä–æ–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: ${passedTests}/${totalTests}`,
    passedTests === totalTests ? "green" : "yellow",
  );

  if (passedTests === totalTests) {
    log("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã CSRF –∑–∞—â–∏—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã!", "green");
  } else {
    log("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é.", "yellow");
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
if (require.main === module) {
  runAllTests().catch((error) => {
    log(`‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${error.message}`, "red");
    process.exit(1);
  });
}

module.exports = {
  testCSRFTokenGeneration,
  testCSRFProtection,
  testCSRFHeaders,
  testCSRFMethods,
  testCSRFExclusions,
  testCSRFRateLimiting,
  runAllTests,
};
