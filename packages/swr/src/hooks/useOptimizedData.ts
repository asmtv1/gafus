import { useMemo } from "react";
import type { SWRConfiguration } from "swr";
import useSWR from "swr";

// –õ–æ–∫–∞–ª—å–Ω—ã–µ —Ç–∏–ø—ã –¥–ª—è –¥–∞–Ω–Ω—ã—Ö
interface CourseData {
  id: string;
  name: string;
  description: string;
  duration: number;
}

interface UserProfileData {
  id: string;
  name: string;
  bio?: string;
  avatarUrl?: string;
}

interface SWRStatisticsData {
  id: string;
  value: number;
  label: string;
}

type SWRCacheStrategy = "courses" | "user-profile" | "statistics" | "search" | "real-time";

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö
const cacheConfigs: Record<SWRCacheStrategy, SWRConfiguration> = {
  courses: {
    revalidateOnFocus: false,
    revalidateOnReconnect: true,
    dedupingInterval: 30000, // 30 —Å–µ–∫—É–Ω–¥ –¥–ª—è –∫—É—Ä—Å–æ–≤
    errorRetryCount: 2,
    keepPreviousData: true,
    compare: <T extends CourseData>(a: T, b: T) => JSON.stringify(a) === JSON.stringify(b),
  },

  "user-profile": {
    revalidateOnFocus: true,
    revalidateOnReconnect: true,
    dedupingInterval: 60000, // 1 –º–∏–Ω—É—Ç–∞ –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è
    errorRetryCount: 1,
    keepPreviousData: false, // –ü—Ä–æ—Ñ–∏–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º
  },

  statistics: {
    revalidateOnFocus: false,
    revalidateOnReconnect: true,
    dedupingInterval: 300000, // 5 –º–∏–Ω—É—Ç –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    errorRetryCount: 3,
    keepPreviousData: true,
  },

  search: {
    revalidateOnFocus: false,
    revalidateOnReconnect: false,
    dedupingInterval: 1000, // 1 —Å–µ–∫—É–Ω–¥–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞
    errorRetryCount: 1,
    keepPreviousData: true,
  },

  "real-time": {
    revalidateOnFocus: true,
    revalidateOnReconnect: true,
    dedupingInterval: 5000, // 5 —Å–µ–∫—É–Ω–¥ –¥–ª—è real-time –¥–∞–Ω–Ω—ã—Ö
    errorRetryCount: 5,
    keepPreviousData: false,
  },
};

// –•—É–∫ –¥–ª—è –∫—É—Ä—Å–æ–≤ —Å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
export function useCoursesData<T extends CourseData>(key: string | null) {
  const config = useMemo(() => cacheConfigs.courses, []);

  return useSWR<T>(key, {
    ...config,
    onSuccess: (data: T, key: string) => {
      if (process.env.NODE_ENV === "development") {
        console.warn(`üìö Courses loaded: ${key}`);
      }
    },
  });
}

// –•—É–∫ –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export function useUserProfileData<T extends UserProfileData>(key: string | null) {
  const config = useMemo(() => cacheConfigs["user-profile"], []);

  return useSWR<T>(key, {
    ...config,
    onSuccess: (data: T, key: string) => {
      if (process.env.NODE_ENV === "development") {
        console.warn(`üë§ Profile loaded: ${key}`);
      }
    },
  });
}

// –•—É–∫ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
export function useStatisticsData<T extends SWRStatisticsData>(key: string | null) {
  const config = useMemo(() => cacheConfigs.statistics, []);

  return useSWR<T>(key, {
    ...config,
    onSuccess: (data: T, key: string) => {
      if (process.env.NODE_ENV === "development") {
        console.warn(`üìä Statistics loaded: ${key}`);
      }
    },
  });
}

// –•—É–∫ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å –±—ã—Å—Ç—Ä—ã–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
export function useSearchData<T>(key: string | null) {
  const config = useMemo(() => cacheConfigs.search, []);

  return useSWR<T>(key, {
    ...config,
    onSuccess: (data: T, key: string) => {
      if (process.env.NODE_ENV === "development") {
        console.warn(`üîç Search results loaded: ${key}`);
      }
    },
  });
}

// –•—É–∫ –¥–ª—è real-time –¥–∞–Ω–Ω—ã—Ö
export function useRealTimeData<T>(key: string | null) {
  const config = useMemo(() => cacheConfigs["real-time"], []);

  return useSWR<T>(key, {
    ...config,
    onSuccess: (data: T, key: string) => {
      if (process.env.NODE_ENV === "development") {
        console.warn(`‚ö° Real-time data loaded: ${key}`);
      }
    },
  });
}

// –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Ö—É–∫ –¥–ª—è –ª—é–±—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –≤—ã–±–æ—Ä–æ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
export function useOptimizedData<T>(key: string | null, strategy: SWRCacheStrategy = "courses") {
  const config = useMemo(() => cacheConfigs[strategy], [strategy]);

  return useSWR<T>(key, {
    ...config,
    onSuccess: (data: T, key: string) => {
      if (process.env.NODE_ENV === "development") {
        console.warn(`üì¶ Data loaded with ${strategy} strategy: ${key}`);
      }
    },
  });
}
