#!/usr/bin/env node
/**
 * ะขะตัั ะพัะฟัะฐะฒะบะธ ะปะพะณะพะฒ error-handling ะฒ error-dashboard
 * 
 * ะะฐะฟััะบ: node packages/error-handling/test-error-handling-error-dashboard.js
 */

import { createLogger, ErrorReporter } from '@gafus/error-handling/dist/index.js';

async function testErrorHandlingErrorDashboard() {
  console.log('๐งช ะขะตััะธัะพะฒะฐะฝะธะต ะพัะฟัะฐะฒะบะธ ะปะพะณะพะฒ error-handling ะฒ error-dashboard...\n');

  try {
    // ะขะตัั 1: Error-dashboard ะปะพะณะณะตั (ะฝะต ะดะพะปะถะตะฝ ะพัะฟัะฐะฒะปััั ะฒ ัะตะฑั)
    console.log('1๏ธโฃ ะขะตััะธััะตะผ error-dashboard ะปะพะณะณะตั...');
    const dashboardLogger = createLogger('error-dashboard-app', 'production');
    await dashboardLogger.error('Failed to process error report', new Error('Invalid JSON format'), {
      reportId: 'report-123',
      source: 'web-app',
      timestamp: Date.now()
    });
    console.log('โ Error-dashboard error ะปะพะณ ะพัะฟัะฐะฒะปะตะฝ (ะฝะต ะฒ ัะตะฑั)\n');

    // ะขะตัั 2: Web ะปะพะณะณะตั ัะตัะตะท error-handling
    console.log('2๏ธโฃ ะขะตััะธััะตะผ web ะปะพะณะณะตั ัะตัะตะท error-handling...');
    const webLogger = createLogger('web-app', 'production');
    await webLogger.error('Failed to load user data', new Error('Network timeout'), {
      userId: 'user-123',
      endpoint: '/api/user',
      retryCount: 3
    });
    console.log('โ Web error ะปะพะณ ะพัะฟัะฐะฒะปะตะฝ\n');

    // ะขะตัั 3: Trainer panel ะปะพะณะณะตั ัะตัะตะท error-handling
    console.log('3๏ธโฃ ะขะตััะธััะตะผ trainer panel ะปะพะณะณะตั ัะตัะตะท error-handling...');
    const trainerLogger = createLogger('trainer-panel-app', 'production');
    await trainerLogger.error('Failed to save training data', new Error('Validation error'), {
      trainingId: 'training-456',
      userId: 'trainer-789',
      errors: ['Invalid exercise type', 'Missing duration']
    });
    console.log('โ Trainer panel error ะปะพะณ ะพัะฟัะฐะฒะปะตะฝ\n');

    // ะขะตัั 4: Worker ะปะพะณะณะตั ัะตัะตะท error-handling
    console.log('4๏ธโฃ ะขะตััะธััะตะผ worker ะปะพะณะณะตั ัะตัะตะท error-handling...');
    const workerLogger = createLogger('worker-app', 'production');
    await workerLogger.error('Failed to process queue job', new Error('Database connection failed'), {
      jobId: 'job-123',
      queueName: 'notifications',
      attempt: 2
    });
    console.log('โ Worker error ะปะพะณ ะพัะฟัะฐะฒะปะตะฝ\n');

    // ะขะตัั 5: Telegram bot ะปะพะณะณะตั ัะตัะตะท error-handling
    console.log('5๏ธโฃ ะขะตััะธััะตะผ telegram bot ะปะพะณะณะตั ัะตัะตะท error-handling...');
    const botLogger = createLogger('telegram-bot-app', 'production');
    await botLogger.error('Failed to send message', new Error('API rate limit exceeded'), {
      chatId: 'chat-456',
      messageType: 'notification',
      userId: 'user-789'
    });
    console.log('โ Telegram bot error ะปะพะณ ะพัะฟัะฐะฒะปะตะฝ\n');

    // ะขะตัั 6: ErrorReporter ะบะปะฐัั
    console.log('6๏ธโฃ ะขะตััะธััะตะผ ErrorReporter ะบะปะฐัั...');
    const errorReporter = new ErrorReporter({
      appName: 'test-app',
      environment: 'production',
      logToConsole: true
    });

    const testError = new Error('Test error for ErrorReporter');
    const errorInfo = {
      componentStack: 'TestComponent -> ErrorBoundary',
      errorBoundaryName: 'TestErrorBoundary',
      appName: 'test-app',
      url: 'http://localhost:3000/test',
      userAgent: 'Mozilla/5.0 (Test Browser)',
      timestamp: Date.now(),
      userId: 'user-123',
      sessionId: 'session-456'
    };

    const success = await errorReporter.reportError(testError, errorInfo, {
      additionalData: 'test data',
      customField: 'custom value'
    });
    console.log(`โ ErrorReporter test completed: ${success}\n`);

    // ะขะตัั 7: ะัะตะดัะฟัะตะถะดะตะฝะธั (ัะพะปัะบะพ ะฒ production)
    console.log('7๏ธโฃ ะขะตััะธััะตะผ ะฟัะตะดัะฟัะตะถะดะตะฝะธั...');
    webLogger.warn('Slow API response detected', {
      endpoint: '/api/data',
      responseTime: 5000,
      threshold: 3000
    });
    console.log('โ Warning ะปะพะณ ะพัะฟัะฐะฒะปะตะฝ\n');

    // ะขะตัั 8: ะฃัะฟะตัะฝัะต ะพะฟะตัะฐัะธะธ
    console.log('8๏ธโฃ ะขะตััะธััะตะผ ััะฟะตัะฝัะต ะพะฟะตัะฐัะธะธ...');
    webLogger.success('User data loaded successfully', {
      userId: 'user-123',
      dataSize: '2.5KB',
      duration: '150ms'
    });
    console.log('โ Success ะปะพะณ ะพัะฟัะฐะฒะปะตะฝ\n');

    console.log('๐ ะัะต ัะตััั ะทะฐะฒะตััะตะฝั!');
    console.log('\n๐ ะัะพะฒะตัััะต error-dashboard:');
    console.log('   - Reports: http://localhost:3001/reports');
    console.log('   - Push Logs: http://localhost:3001/push-logs');
    console.log('   - ะัะธัะต ะปะพะณะธ ะฟะพ ะบะพะฝัะตะบััั: error-handling-*, web-app, trainer-panel-app, etc.');
    console.log('\n๐ ะะถะธะดะฐะตะผัะต ะปะพะณะธ:');
    console.log('   - Web ะพัะธะฑะบะธ ะฒ /api/report');
    console.log('   - Worker ะพัะธะฑะบะธ ะฒ /api/push-logs');
    console.log('   - Telegram bot ะพัะธะฑะบะธ ะฒ /api/report');
    console.log('   - Error-dashboard ะพัะธะฑะบะธ ะะ ะพัะฟัะฐะฒะปััััั ะฒ ัะตะฑั');
    console.log('   - ErrorReporter ะพัะธะฑะบะธ ะฒ ัะพะพัะฒะตัััะฒัััะธะต endpoint\'ั');

  } catch (error) {
    console.error('โ ะัะธะฑะบะฐ ะฟัะธ ัะตััะธัะพะฒะฐะฝะธะธ:', error);
    process.exit(1);
  }
}

// ะะฐะฟััะบะฐะตะผ ัะตัั
testErrorHandlingErrorDashboard().then(() => {
  console.log('\nโจ ะขะตัั ะทะฐะฒะตััะตะฝ ััะฟะตัะฝะพ!');
  process.exit(0);
}).catch((error) => {
  console.error('\n๐ฅ ะขะตัั ะทะฐะฒะตััะธะปัั ั ะพัะธะฑะบะพะน:', error);
  process.exit(1);
});
