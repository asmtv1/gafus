// –õ–æ–∫–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è ErrorInfo
interface ErrorInfo {
  componentStack: string;
  errorBoundaryName: string;
  appName: string;
  url: string;
  userAgent: string;
  timestamp: number;
  userId?: string;
  sessionId?: string;
}

// –õ–æ–∫–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
interface ErrorReporterConfig {
  appName: string;
  environment?: string;
  logToConsole?: boolean;
  showErrorDetails?: boolean;
}

/**
 * –ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç–∏ –æ–± –æ—à–∏–±–∫–∞—Ö
 * –ú–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤ –ª—é–±—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è—Ö (React, Node.js, etc.)
 */
export class ErrorReporter {
  private config: ErrorReporterConfig;
  private dashboardUrl: string;

  constructor(config: ErrorReporterConfig) {
    this.config = config;
    // URL –¥–∞—à–±–æ—Ä–¥–∞ –æ—à–∏–±–æ–∫ - –º–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    this.dashboardUrl = process.env.ERROR_DASHBOARD_URL || "http://errors.gafus.localhost";
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
   */
  getConfig(): ErrorReporterConfig {
    return this.config;
  }

  /**
   * –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—à–∏–±–∫–∏
   */
  async reportError(
    error: Error,
    errorInfo: Partial<ErrorInfo> = {},
    additionalContext?: Record<string, unknown>,
  ): Promise<boolean> {
    try {
      const enhancedErrorInfo = this.enhanceErrorInfo(error, errorInfo, additionalContext);

      // –õ–æ–≥–∏—Ä—É–µ–º –≤ –∫–æ–Ω—Å–æ–ª—å –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ
      if (this.config.logToConsole) {
        this.logToConsole(error, enhancedErrorInfo);
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –Ω–∞—à –¥–∞—à–±–æ—Ä–¥
      await this.sendToDashboard(error, enhancedErrorInfo);

      return true;
    } catch (reportingError) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç—á–µ—Ç–∞ –æ–± –æ—à–∏–±–∫–µ:", reportingError);
      return false;
    }
  }

  /**
   * –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ—à–∏–±–∫–µ
   */
  private enhanceErrorInfo(
    error: Error,
    errorInfo: Partial<ErrorInfo>,
    additionalContext?: Record<string, unknown>,
  ): ErrorInfo {
    const baseInfo: ErrorInfo = {
      componentStack: "",
      errorBoundaryName: "ErrorReporter",
      appName: this.config.appName,
      url: this.getUrl(),
      userAgent: this.getUserAgent(),
      timestamp: Date.now(),
      ...errorInfo,
    };

    // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –µ—Å–ª–∏ –µ—Å—Ç—å
    if (additionalContext) {
      (baseInfo as ErrorInfo & { additionalContext: Record<string, unknown> }).additionalContext =
        additionalContext;
    }

    return baseInfo;
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ URL (—Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –±—Ä–∞—É–∑–µ—Ä–µ –∏ Node.js)
   */
  private getUrl(): string {
    if (typeof window !== "undefined" && window.location) {
      return window.location.href;
    }
    if (typeof process !== "undefined" && process.env?.VERCEL_URL) {
      return `https://${process.env.VERCEL_URL}`;
    }
    return (typeof process !== "undefined" && process.env?.NEXT_PUBLIC_SITE_URL) || "unknown";
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ User Agent
   */
  private getUserAgent(): string {
    if (typeof navigator !== "undefined" && navigator.userAgent) {
      return navigator.userAgent;
    }
    if (typeof process !== "undefined" && process.version) {
      return `Node.js ${process.version}`;
    }
    return "unknown";
  }

  /**
   * –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –∫–æ–Ω—Å–æ–ª—å
   */
  private logToConsole(error: Error, errorInfo: ErrorInfo): void {
    console.group(`üö® –û—à–∏–±–∫–∞ –≤ ${this.config.appName}`);
    console.error("–û—à–∏–±–∫–∞:", error);
    console.error("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:", errorInfo);
    console.groupEnd();
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ –¥–∞—à–±–æ—Ä–¥
   */
  private async sendToDashboard(error: Error, errorInfo: ErrorInfo): Promise<void> {
    try {
      const payload = {
        error: {
          name: error.name,
          message: error.message,
          stack: error.stack,
        },
        errorInfo,
        timestamp: Date.now(),
        environment: this.config.environment || "development",
      };

      const response = await fetch(`${this.dashboardUrl}/api/errors`, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(payload),
      });

      if (!response.ok) {
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      }
    } catch (fetchError) {
      console.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—à–∏–±–∫—É –≤ –¥–∞—à–±–æ—Ä–¥:", fetchError);
    }
  }
}
