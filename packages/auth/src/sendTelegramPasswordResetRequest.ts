"use server";

import { prisma } from "@gafus/prisma";

export async function sendTelegramPasswordResetRequest(username: string, phone: string) {
  const user = await prisma.user.findUnique({
    where: { username: username.toLowerCase().trim() },
    select: {
      id: true,
      telegramId: true,
      passwordResetRequestedAt: true,
    },
  });

  if (!user?.telegramId) {
    console.error(`‚ùå Telegram ID –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${username}`);
    return;
  }

  const now = new Date();
  const lastRequest = user.passwordResetRequestedAt;
  if (lastRequest && now.getTime() - lastRequest.getTime() < 60 * 1000) {
    console.warn(`‚è± –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å —Å–ª–∏—à–∫–æ–º —Ä–∞–Ω–æ –¥–ª—è ${username}`);
    return;
  }

  await prisma.user.update({
    where: { username: username.toLowerCase().trim() },
    data: { passwordResetRequestedAt: now },
  });

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É
  const token = crypto.randomUUID();

  await prisma.passwordResetToken.create({
    data: {
      token,
      userId: user.id,
      expiresAt: new Date(Date.now() + 15 * 60 * 1000), // 15 –º–∏–Ω—É—Ç
    },
  });

  const botToken = process.env.TELEGRAM_BOT_TOKEN;
  if (!botToken) {
    console.error("‚ùå TELEGRAM_BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω");
    return;
  }

  // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –Ω–æ–≤—ã–π –¥–æ–º–µ–Ω!!!
  const resetLink = `http://localhost:3000/reset-password?token=${token}`;
  const message = `üîê –ó–∞–ø—Ä–æ—Å –Ω–∞ —Å–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è:\nüë§ –õ–æ–≥–∏–Ω: ${username}\nüìû –¢–µ–ª–µ—Ñ–æ–Ω: ${phone}\n\nüëâ –î–ª—è —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ:\n${resetLink}`;

  await fetch(`https://api.telegram.org/bot${botToken}/sendMessage`, {
    method: "POST",
    headers: {
      "Content-Type": "application/json",
    },
    body: JSON.stringify({
      chat_id: user.telegramId,
      text: message,
    }),
  });
}
