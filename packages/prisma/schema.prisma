generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl", "linux-musl-openssl-3.0.x"]
}

// generator erd {
//   provider = "node ./node_modules/prisma-erd-generator"
//   output   = "./erd.svg"
// }

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum TrainingStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
}

enum UserRole {
  USER
  TRAINER
  ADMIN
  MODERATOR
  PREMIUM
}

enum PetType {
  DOG
  CAT
}

enum TrainingLevel {
  BEGINNER      // Начальный
  INTERMEDIATE  // Средний
  ADVANCED      // Продвинутый
  EXPERT        // Экспертный
}

enum StepType {
  TRAINING      // Тренировочный
  EXAMINATION   // Экзаменационный
}

model Course {
  id             String             @id @default(cuid())
  name           String
  type           String             @db.VarChar(50) @unique
  description    String             @default("")
  equipment      String             @default("")
  trainingLevel  TrainingLevel      
  shortDesc      String             @default("")
  duration       String
  logoImg        String
  isPrivate      Boolean            @default(false)
  isPaid         Boolean            @default(false)

  authorId       String
  author         User               @relation(fields: [authorId], references: [id])

  dayLinks       DayOnCourse[]
  access         CourseAccess[]
  userCourses    UserCourse[]
  favoritedBy    FavoriteCourse[]
  reviews        CourseReview[]
  awards         Award[]
  avgRating      Float?
  videoUrl       String?
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt
}

model TrainingDay {
  id             String            @id @default(cuid())
  title          String
  equipment      String             @default("")
  description    String             @default("")
  type           String             @default("regular")
  stepLinks      StepOnDay[]
  dayLinks       DayOnCourse[]
  authorId       String
  author         User          @relation(fields: [authorId], references: [id])
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt
}

model Step {
  id             String           @id @default(cuid())
  title          String
  description    String           @default("")
  durationSec    Int?
  type           StepType         @default(TRAINING)
  imageUrls      String[]         @default([])
  pdfUrls        String[]         @default([])
  videoUrl       String?
  checklist      Json?            // Для экзаменационных шагов: массив вопросов с вариантами ответов
  
  // Поля для типов экзамена (только для EXAMINATION)
  requiresVideoReport    Boolean  @default(false)  // Требуется видео отчёт
  requiresWrittenFeedback Boolean @default(false)  // Требуется письменная обратная связь
  hasTestQuestions       Boolean @default(false)   // Есть тестовые вопросы
  
  stepLinks      StepOnDay[]
  examResults    ExamResult[]

  authorId       String
  author         User          @relation(fields: [authorId], references: [id])

  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @default(now())
}

model StepCategory {
  id          String         @id @default(cuid())
  name        String         @unique
  description String?
  icon        String?        // Иконка категории (emoji или путь к иконке)
  order       Int            @default(0)  // Порядок отображения
  templates   StepTemplate[]
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  
  @@index([order])
}

model StepTemplate {
  id                      String         @id @default(cuid())
  title                   String
  description             String         @default("")
  durationSec             Int?
  type                    StepType       @default(TRAINING)
  imageUrls               String[]       @default([])
  pdfUrls                 String[]       @default([])
  videoUrl                String?
  checklist               Json?
  
  // Поля для типов экзамена (только для EXAMINATION)
  requiresVideoReport     Boolean        @default(false)
  requiresWrittenFeedback Boolean        @default(false)
  hasTestQuestions        Boolean        @default(false)
  
  // Организация и категоризация
  categoryId      String?
  category        StepCategory?  @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  tags            String[]       @default([])  // Теги для поиска
  
  // Контроль доступа
  isPublic        Boolean        @default(true)  // Доступен всем тренерам
  
  // Статистика
  usageCount      Int            @default(0)  // Сколько раз использовали
  
  authorId        String
  author          User           @relation(fields: [authorId], references: [id])
  
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  
  @@index([categoryId])
  @@index([isPublic])
  @@index([authorId])
}

model DayOnCourse {
  id             String            @id @default(cuid())
  courseId       String
  dayId          String
  order          Int

  course   Course @relation(fields: [courseId], references: [id])
  day      TrainingDay @relation(fields: [dayId], references: [id])

  userTrainings  UserTraining[]

  @@unique([courseId, order]) // порядок уникален в курсе
  @@index([courseId, order])
}

model StepOnDay {
  id             String             @id @default(cuid())
  dayId          String
  stepId         String
  order          Int

  day            TrainingDay        @relation(fields: [dayId], references: [id], onDelete: Cascade)
  step           Step               @relation(fields: [stepId], references: [id], onDelete: Cascade)

  userSteps      UserStep[]

  @@unique([dayId, order]) // порядок уникален в дне
  @@index([dayId, order])
}

model UserTraining {
  id               String         @id @default(cuid())
  userId           String
  dayOnCourseId    String
  status           TrainingStatus @default(NOT_STARTED)
  currentStepIndex Int?           @default(0)

  user             User           @relation(fields: [userId], references: [id])
  dayOnCourse      DayOnCourse    @relation(fields: [dayOnCourseId], references: [id], onDelete: Cascade)
  steps            UserStep[]

  @@unique([userId, dayOnCourseId])
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @default(now())
}

model UserStep {
  id              String         @id @default(cuid())
  userTrainingId  String
  stepOnDayId     String
  status          TrainingStatus @default(NOT_STARTED)
  // Флажок паузы и оставшееся время шага в секундах для серверного хранения
  paused          Boolean        @default(false)
  remainingSec    Int?

  // Связь с результатами экзаменов
  examResult      ExamResult?

  userTraining    UserTraining   @relation(fields: [userTrainingId], references: [id], onDelete: Cascade)
  stepOnDay       StepOnDay      @relation(fields: [stepOnDayId], references: [id], onDelete: Cascade)

  @@unique([userTrainingId, stepOnDayId])
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @default(now())
}

model User {
  id                       String               @id @default(cuid())
  username                 String               @unique
  phone                    String               @unique
  password                 String
  telegramId               String?              @unique
  isConfirmed              Boolean              @default(false)
  role                     UserRole             @default(USER)

  profile                  UserProfile?
  diplomas                 Diploma[]
  trainings                Training[]
  trainingAccesses         TrainingAccess[]
  courseAccesses           CourseAccess[]
  authoredCourses          Course[]
  createdSteps             Step[]
  createdStepTemplates     StepTemplate[]
  createdDays              TrainingDay[]
  userTrainings            UserTraining[]
  userCourses              UserCourse[]
  pets                     Pet[]
  favoriteCourses          FavoriteCourse[]
  courseReviews            CourseReview[]
  passwordResetTokens      PasswordResetToken[]
  pushSubscriptions        PushSubscription[]
  stepNotifications        StepNotification[]
  reengagementCampaigns    ReengagementCampaign[]
  reengagementSettings     ReengagementSettings?
  reminders                Reminder[]
  passwordResetRequestedAt DateTime?
  createdAt                DateTime             @default(now())
  updatedAt                DateTime             @default(now())
}

model UserProfile {
  id         String    @id @default(cuid())
  userId     String    @unique
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  fullName   String?
  birthDate  DateTime?
  about      String?
  telegram   String?
  instagram  String?
  website    String?
  avatarUrl  String?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @default(now())
}

model Diploma {
  id         String    @id @default(cuid())
  userId     String
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  title      String
  issuedBy   String?
  issuedAt   DateTime?
  url        String?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  @@index([userId])
}

model Training {
  id         String        @id @default(cuid())
  userId     String
  user       User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  name       String
  isPrivate  Boolean       @default(false)
  access     TrainingAccess[]
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @default(now())
}

model UserCourse {
  userId        String
  courseId      String
  status        TrainingStatus @default(NOT_STARTED)
  startedAt     DateTime?
  completedAt   DateTime?
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  course        Course         @relation(fields: [courseId], references: [id], onDelete: Cascade)
  @@id([userId, courseId])
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @default(now())
}

model Pet {
  id            String         @id @default(cuid())
  ownerId       String
  name          String
  type          PetType
  breed         String
  birthDate     DateTime
  heightCm      Float?
  weightKg      Float?
  photoUrl      String?
  notes         String?
  owner         User           @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  awards        Award[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @default(now())
}

model Award {
  id            String         @id @default(cuid())
  petId         String
  title         String
  event         String?
  date          DateTime?
  rank          String?
  
  // Новые поля для экзаменационных достижений
  examType      String?        // Тип экзамена (TEST, VIDEO, WRITTEN)
  examScore     Int?           // Балл за экзамен
  courseId      String?        // Связь с курсом
  
  pet           Pet            @relation(fields: [petId], references: [id], onDelete: Cascade)
  course        Course?        @relation(fields: [courseId], references: [id])
  
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @default(now())
  @@index([petId])
  @@index([courseId])
}

model TrainingAccess {
  trainingId    String
  userId        String
  training      Training       @relation(fields: [trainingId], references: [id], onDelete: Cascade)
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([trainingId, userId])
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @default(now())
}

model CourseAccess {
  courseId      String
  userId        String
  course        Course         @relation(fields: [courseId], references: [id], onDelete: Cascade)
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([courseId, userId])
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @default(now())
}

model FavoriteCourse {
  userId        String
  courseId      String
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  course        Course         @relation(fields: [courseId], references: [id], onDelete: Cascade)
  @@id([userId, courseId])
  createdAt     DateTime       @default(now())
}

model CourseReview {
  id            String         @id @default(cuid())
  userId        String
  courseId      String
  rating        Float?
  comment       String?
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  course        Course         @relation(fields: [courseId], references: [id], onDelete: Cascade)
  @@unique([userId, courseId])
  @@index([courseId, userId], name: "idx_rating_course_user")
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @default(now())
}

model PasswordResetToken {
  id            String         @id @default(cuid())
  token         String         @unique
  userId        String
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt     DateTime
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @default(now())
}

model PushSubscription {
  id            String         @id @default(cuid())
  userId        String
  endpoint      String         @unique
  keys          Json
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @default(now())
  @@index([userId])
}

model StepNotification {
  id            String   @id @default(uuid())
  userId        String
  day           Int
  stepIndex     Int
  endTs         Int
  sent          Boolean  @default(false)
  subscription  Json
  url           String?
  jobId         String?
  paused        Boolean  @default(false)
  remainingSec  Int?
  stepTitle     String?  // Название шага
  type          String   @default("step") // "step" | "immediate" - тип уведомления
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  @@index([userId])
  @@index([day, stepIndex])
  @@index([type]) // Индекс для быстрого поиска по типу
}

model ExamResult {
  id                    String         @id @default(cuid())
  userStepId           String         @unique
  stepId               String
  
  // Результаты тестовых вопросов
  testAnswers          Json?           // Ответы пользователя на тестовые вопросы
  testScore            Int?            // Количество правильных ответов
  testMaxScore         Int?            // Максимально возможное количество баллов
  
  // Видео отчёт
  videoReportUrl       String?         // Ссылка на загруженное видео
  videoDeletedAt       DateTime?       // Когда видео было удалено
  videoDeleteReason    String?         // Причина удаления: replaced | auto_cleanup_completed | auto_cleanup_pending
  
  // Письменная обратная связь
  writtenFeedback      String?         // Текст обратной связи от пользователя
  
  // Общая оценка экзамена
  overallScore         Int?            // Общая оценка (например, процент)
  isPassed             Boolean?       // Прошёл ли экзамен
  
  userStep             UserStep        @relation(fields: [userStepId], references: [id], onDelete: Cascade)
  step                 Step            @relation(fields: [stepId], references: [id], onDelete: Cascade)
  
  createdAt            DateTime        @default(now())
  updatedAt            DateTime        @updatedAt
  
  @@index([userStepId])
  @@index([stepId])
  @@index([videoDeletedAt])
}

model ErrorReport {
  id                String   @id @default(cuid())
  message           String
  stack             String?
  appName           String
  environment       String
  url               String
  userAgent         String
  userId            String?
  sessionId         String?
  componentStack    String?
  additionalContext Json?
  tags              String[] @default([])
  resolved          Boolean  @default(false)
  resolvedAt        DateTime?
  resolvedBy        String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  @@index([appName])
  @@index([environment])
  @@index([resolved])
  @@index([createdAt])
}

// ===== Re-engagement система =====

model ReengagementCampaign {
  id                   String   @id @default(cuid())
  userId               String
  user                 User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Статус кампании
  isActive             Boolean  @default(true)
  currentLevel         Int      @default(1)  // 1, 2, 3, 4
  
  // Временные метки
  lastActivityDate     DateTime  // Когда последний раз был активен
  campaignStartDate    DateTime @default(now())
  lastNotificationSent DateTime?
  nextNotificationDate DateTime?
  
  // История отправленных уведомлений
  notifications        ReengagementNotification[]
  
  // Результаты кампании
  returned             Boolean  @default(false)  // Вернулся ли пользователь
  returnedAt           DateTime?
  unsubscribed         Boolean  @default(false)
  
  // Метаданные для аналитики
  totalNotificationsSent Int @default(0)
  
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  
  @@index([userId])
  @@index([isActive, nextNotificationDate])
  @@index([lastActivityDate])
}

model ReengagementNotification {
  id           String   @id @default(cuid())
  campaignId   String
  campaign     ReengagementCampaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  
  // Тип и содержание
  level        Int      // 1, 2, 3, 4
  messageType  String   // 'emotional', 'educational', 'motivational', 'mixed'
  variantId    String   // ID конкретного варианта сообщения
  
  // Отправленное содержимое
  title        String
  body         String
  url          String?
  
  // Статус
  sent         Boolean  @default(false)
  sentAt       DateTime?
  
  // Взаимодействие
  opened       Boolean  @default(false)
  openedAt     DateTime?
  clicked      Boolean  @default(false)
  clickedAt    DateTime?
  
  // Результат отправки
  successCount Int      @default(0)
  failedCount  Int      @default(0)
  
  createdAt    DateTime @default(now())
  
  @@index([campaignId])
  @@index([sent, sentAt])
}

model ReengagementSettings {
  id                    String   @id @default(cuid())
  userId                String   @unique
  user                  User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Разрешения
  enabled               Boolean  @default(true)
  unsubscribedAt        DateTime?
  
  // Предпочтения
  preferredTime         String?  // "09:00", "18:00" и т.д.
  timezone              String   @default("Europe/Moscow")
  
  // Частота
  maxNotificationsPerWeek Int   @default(2)
  
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
}

// Универсальная система напоминаний (тренировки, прививки, кормление и т.д.)
model Reminder {
  id                    String   @id @default(cuid())
  userId                String
  user                  User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Тип и название напоминания
  type                  String   // "training", "vaccination", "feeding", etc.
  name                  String   // Название для пользователя: "Утро", "День", "Вечер" и т.д.
  
  // Настройки
  enabled               Boolean  @default(false)  // По умолчанию выключено
  reminderTime          String   @default("09:00") // Время напоминания в формате HH:MM
  reminderDays          String?  // "1,2,3,4,5,6,7" где 1=Пн, 7=Вс, или null для всех дней
  timezone              String   @default("Europe/Moscow")
  
  // Дополнительные данные (JSON для гибкости)
  metadata              Json?    // Например, для прививок: {petId, vaccineName}, для кормления: {petId, mealType}
  
  // Метаданные
  lastSentAt            DateTime?
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  
  @@index([userId, type])
  @@index([enabled])
  @@index([type])
  @@index([reminderTime])
}

model ReengagementMetrics {
  id              String   @id @default(cuid())
  date            DateTime @default(now())
  
  // Общие метрики
  totalActive     Int      // Всего активных кампаний
  totalSent       Int      // Отправлено уведомлений за день
  totalReturned   Int      // Вернулось пользователей
  
  // По уровням
  level1Sent      Int      @default(0)
  level2Sent      Int      @default(0)
  level3Sent      Int      @default(0)
  level4Sent      Int      @default(0)
  
  // Эффективность
  openRate        Float?   // % открытий
  clickRate       Float?   // % кликов
  returnRate      Float?   // % возвратов
  
  // По типам сообщений
  emotionalSent   Int      @default(0)
  educationalSent Int      @default(0)
  motivationalSent Int     @default(0)
  mixedSent       Int      @default(0)
  
  @@index([date])
}

// Статистика просмотров presentation.html
model PresentationView {
  id              String   @id @default(cuid())
  
  // Информация о сессии и посетителе
  sessionId        String   // Уникальный ID сессии для группировки событий
  visitorId        String?  // Уникальный ID посетителя (сохраняется между сессиями через cookie)
  
  // Источник трафика
  referrer         String?  // Откуда пришёл пользователь (document.referrer)
  referrerDomain   String?  // Домен источника (для удобства фильтрации)
  utmSource        String?  // UTM метки
  utmMedium        String?  // UTM метки
  utmCampaign      String?  // UTM метки
  
  // Параметры из URL для отслеживания источников
  refParam         String?  // Референс из URL (?ref=username)
  campaignParam    String?  // Кампания из URL (?campaign=name)
  sourceParam      String?  // Источник из URL (?source=telegram)
  tagParam         String?  // Тег из URL (?tag=promo)
  
  // Техническая информация
  userAgent        String?  // User Agent браузера
  ipAddress        String?  // IP адрес (опционально, для геолокации)
  language         String?  // Язык браузера
  deviceType       String?  // "mobile" | "tablet" | "desktop"
  screenWidth      Int?     // Ширина экрана
  screenHeight     Int?     // Высота экрана
  
  // Метрики просмотра
  timeOnPage       Int?     // Время на странице в секундах
  scrollDepth      Int?     // Процент прокрутки (0-100)
  
  // Достижения секций (время первого достижения в секундах от начала просмотра)
  reachedHero      Int?     // Достиг Hero секции
  reachedProblem   Int?     // Достиг Problem секции
  reachedSolution  Int?     // Достиг Solution секции
  reachedFeatures  Int?     // Достиг Features секции
  reachedComparison Int?    // Достиг Comparison секции
  reachedGoals     Int?     // Достиг Goals секции
  reachedContact   Int?     // Достиг Contact секции
  
  // Конверсия
  ctaClicks        Int      @default(0) // Количество кликов по CTA кнопкам
  convertedToUser  Boolean  @default(false) // Зарегистрировался ли пользователь
  convertedUserId  String?  // ID пользователя, если зарегистрировался
  
  // Временные метки
  firstViewAt      DateTime @default(now()) // Первый просмотр
  lastViewAt       DateTime @default(now()) // Последняя активность
  sessionEndedAt   DateTime? // Когда сессия завершилась
  
  // Дополнительные данные
  additionalData   Json?    // Дополнительные метаданные
  
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  
  @@index([sessionId])
  @@index([visitorId])
  @@index([referrerDomain])
  @@index([refParam])
  @@index([campaignParam])
  @@index([firstViewAt])
  @@index([createdAt])
  @@index([convertedToUser])
  @@index([convertedUserId])
}

// События взаимодействия с presentation.html (клики, достижения секций)
model PresentationEvent {
  id              String   @id @default(cuid())
  sessionId       String   // ID сессии
  viewId          String?  // ID соответствующего PresentationView
  
  // Тип события
  eventType       String   // "click" | "section_reached" | "scroll_milestone"
  eventName       String   // Название события (например, "cta_click", "hero_reached")
  
  // Данные события
  targetElement   String?  // Элемент, на который кликнули (для кликов)
  targetSection   String?  // Секция, которую достигли
  
  // Позиция и время
  scrollDepth     Int?     // Процент прокрутки в момент события
  timeOnPage      Int?     // Время на странице в секундах в момент события
  
  // Дополнительные данные
  metadata        Json?    // Дополнительные метаданные
  
  createdAt       DateTime @default(now())
  
  @@index([sessionId])
  @@index([eventType])
  @@index([viewId])
  @@index([createdAt])
}