"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const bcrypt_1 = __importDefault(require("bcrypt"));
const index_1 = require("./src/index");
const prismaClient = index_1.prisma;
async function main() {
    console.warn("üí° –ù–∞—á–∏–Ω–∞–µ–º —Å–∏–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...");
    const hashedPassword = await bcrypt_1.default.hash("2407041", 10);
    const admin = await prismaClient.user.upsert({
        where: { phone: "+79198031371" },
        update: {},
        create: {
            username: "admin",
            phone: "+79198031371",
            password: hashedPassword,
            role: "ADMIN",
            isConfirmed: true,
        },
    });
    console.warn("‚úÖ –ê–¥–º–∏–Ω —Å–æ–∑–¥–∞–Ω –∏–ª–∏ –Ω–∞–π–¥–µ–Ω");
    const [homeCourse, streetCourse, puppyCourse, authorCourse] = await prismaClient.$transaction([
        prismaClient.course.upsert({
            where: { type: "home" },
            update: {},
            create: {
                name: "–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –¥–æ–º–∞",
                type: "home",
                description: "–ö–∞–∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å —Ö–≤–æ—Å—Ç–∏–∫–∞ –¥–æ–º–∞",
                shortDesc: "–ö—Ä–∞—Ç–∫–æ –æ –∫—É—Ä—Å–µ",
                duration: "2 –Ω–µ–¥–µ–ª–∏",
                logoImg: "/shared/uploads/courses/3122311.jpg",
                equipment: "–ü–æ–≤–æ–¥–æ–∫, –∏–≥—Ä—É—à–∫–∏, –ª–∞–∫–æ–º—Å—Ç–≤–∞",
                trainingLevel: "BEGINNER",
                authorId: admin.id,
            },
        }),
        prismaClient.course.upsert({
            where: { type: "street" },
            update: {},
            create: {
                name: "–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –Ω–∞ —É–ª–∏—Ü–µ",
                type: "street",
                description: "–ö–∞–∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å —Ö–≤–æ—Å—Ç–∏–∫–∞ –Ω–∞ —É–ª–∏—Ü–µ",
                shortDesc: "–ö—Ä–∞—Ç–∫–æ –æ –∫—É—Ä—Å–µ",
                duration: "2 –Ω–µ–¥–µ–ª–∏",
                logoImg: "/shared/uploads/course-logo.png",
                equipment: "–ü–æ–≤–æ–¥–æ–∫, –æ—à–µ–π–Ω–∏–∫, –ª–∞–∫–æ–º—Å—Ç–≤–∞",
                trainingLevel: "INTERMEDIATE",
                authorId: admin.id,
            },
        }),
        prismaClient.course.upsert({
            where: { type: "puppy" },
            update: {},
            create: {
                name: "–©–µ–Ω–æ–∫ –Ω–∞ –∫–∞—Ä–∞–Ω—Ç–∏–Ω–µ",
                type: "puppy",
                description: "–ß—Ç–æ –¥–µ–ª–∞—Ç—å, –ø–æ–∫–∞ –æ–Ω –º–∞–ª–µ–Ω—å–∫–∏–π",
                shortDesc: "–ö—Ä–∞—Ç–∫–æ –æ –∫—É—Ä—Å–µ",
                duration: "1 –º–µ—Å—è—Ü",
                logoImg: "/shared/uploads/courses/21312123.jpeg",
                equipment: "–ò–≥—Ä—É—à–∫–∏, –ª–∞–∫–æ–º—Å—Ç–≤–∞, –ø–µ–ª–µ–Ω–∫–∏",
                trainingLevel: "BEGINNER",
                authorId: admin.id,
            },
        }),
        prismaClient.course.upsert({
            where: { type: "authors" },
            update: {},
            create: {
                name: "–ê–≤—Ç–æ—Ä—Å–∫–∏–π –∫—É—Ä—Å",
                type: "authors",
                description: "–°—É–ø–µ—Ä-–º–µ—Ç–æ–¥–∏–∫–∞ by –ë—É–π —Å –ë—É–≥—Ä–∞",
                shortDesc: "–ö—Ä–∞—Ç–∫–æ –æ –∫—É—Ä—Å–µ",
                duration: "–º–Ω–æ–≥–æ –ª–µ—Ç",
                logoImg: "/shared/uploads/courses/92086288.jpg",
                equipment: "–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ",
                trainingLevel: "EXPERT",
                authorId: admin.id,
            },
        }),
    ]);
    console.warn("‚úÖ –ö—É—Ä—Å—ã —Å–æ–∑–¥–∞–Ω—ã");
    const [stepA, stepB, stepC] = await prismaClient.$transaction([
        prismaClient.step.create({
            data: {
                title: "–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ 1",
                description: "–û–ø–∏—Å–∞–Ω–∏–µ 1",
                durationSec: 60,
                authorId: admin.id,
            },
        }),
        prismaClient.step.create({
            data: {
                title: "–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ 2",
                description: "–û–ø–∏—Å–∞–Ω–∏–µ 2",
                durationSec: 90,
                authorId: admin.id,
            },
        }),
        prismaClient.step.create({
            data: {
                title: "–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ 3",
                description: "–û–ø–∏—Å–∞–Ω–∏–µ 3",
                durationSec: 120,
                authorId: admin.id,
            },
        }),
    ]);
    console.warn("‚úÖ –ë–∞–∑–æ–≤—ã–µ —à–∞–≥–∏ —Å–æ–∑–¥–∞–Ω—ã");
    const baseDay = await prismaClient.trainingDay.create({
        data: {
            title: "–ë–∞–∑–æ–≤—ã–π –¥–µ–Ω—å",
            type: "base",
            equipment: "–ü–æ–≤–æ–¥–æ–∫, –∏–≥—Ä—É—à–∫–∏, –ª–∞–∫–æ–º—Å—Ç–≤–∞",
            authorId: admin.id,
        },
    });
    await prismaClient.stepOnDay.createMany({
        data: [
            { dayId: baseDay.id, stepId: stepA.id, order: 1 },
            { dayId: baseDay.id, stepId: stepB.id, order: 2 },
            { dayId: baseDay.id, stepId: stepC.id, order: 3 },
        ],
    });
    console.warn("‚úÖ –°–≤—è–∑–∫–∞ —à–∞–≥–æ–≤ —Å –±–∞–∑–æ–≤—ã–º –¥–Ω—ë–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∞");
    for (let i = 1; i <= 14; i++) {
        await prismaClient.dayOnCourse.createMany({
            data: [
                { courseId: homeCourse.id, dayId: baseDay.id, order: i },
                { courseId: streetCourse.id, dayId: baseDay.id, order: i },
            ],
        });
    }
    console.warn("‚úÖ –ë–∞–∑–æ–≤—ã–π –¥–µ–Ω—å –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫—É—Ä—Å—ã –Ω–∞ 14 –¥–Ω–µ–π");
    const puppyDay = await prismaClient.trainingDay.create({
        data: {
            title: "–©–µ–Ω—è—á–∏–π –¥–µ–Ω—å",
            type: "puppy",
            equipment: "–ò–≥—Ä—É—à–∫–∏, –ª–∞–∫–æ–º—Å—Ç–≤–∞, –ø–µ–ª–µ–Ω–∫–∏",
            authorId: admin.id,
        },
    });
    const [stepP1, stepP2] = await prismaClient.$transaction([
        prismaClient.step.create({
            data: {
                title: "–ò–≥—Ä—ã –¥–ª—è —â–µ–Ω–∫–∞",
                description: "",
                durationSec: 30,
                authorId: admin.id,
            },
        }),
        prismaClient.step.create({
            data: {
                title: "–ü–µ—Ä–≤—ã–π –≤—ã—Ö–æ–¥ –Ω–∞ —É–ª–∏—Ü—É",
                description: "",
                durationSec: 30,
                authorId: admin.id,
            },
        }),
    ]);
    await prismaClient.stepOnDay.createMany({
        data: [
            { dayId: puppyDay.id, stepId: stepP1.id, order: 1 },
            { dayId: puppyDay.id, stepId: stepP2.id, order: 2 },
        ],
    });
    await prismaClient.dayOnCourse.create({
        data: { courseId: puppyCourse.id, dayId: puppyDay.id, order: 1 },
    });
    console.warn("‚úÖ –©–µ–Ω—è—á–∏–π –¥–µ–Ω—å –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫—É—Ä—Å");
    const authorDay = await prismaClient.trainingDay.create({
        data: {
            title: "–ê–≤—Ç–æ—Ä—Å–∫–∏–π –¥–µ–Ω—å",
            type: "authors",
            equipment: "–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ",
            authorId: admin.id,
        },
    });
    const authorStep = await prismaClient.step.create({
        data: {
            title: "–°–ø–µ—Ü-–º–µ—Ç–æ–¥–∏–∫–∞",
            description: "",
            durationSec: 120,
            authorId: admin.id,
        },
    });
    await prismaClient.stepOnDay.create({
        data: { dayId: authorDay.id, stepId: authorStep.id, order: 1 },
    });
    await prismaClient.dayOnCourse.create({
        data: { courseId: authorCourse.id, dayId: authorDay.id, order: 1 },
    });
    console.warn("‚úÖ –ê–≤—Ç–æ—Ä—Å–∫–∏–π –¥–µ–Ω—å –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫—É—Ä—Å");
    await prismaClient.favoriteCourse.createMany({
        data: [
            { userId: admin.id, courseId: homeCourse.id },
            { userId: admin.id, courseId: streetCourse.id },
        ],
        skipDuplicates: true,
    });
    console.warn("‚≠ê –ö—É—Ä—Å—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ");
    await prismaClient.courseReview.createMany({
        data: [
            {
                userId: admin.id,
                courseId: homeCourse.id,
                rating: 5,
                comment: "–û—Ç–ª–∏—á–Ω—ã–π –∫—É—Ä—Å, –≤—Å–µ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å!",
            },
            {
                userId: admin.id,
                courseId: streetCourse.id,
                rating: 4,
                comment: "–•–æ—Ä–æ—à–∏–π –∫—É—Ä—Å, –Ω–æ —Ö–æ—Ç–µ–ª–æ—Å—å –±—ã –±–æ–ª—å—à–µ –ø—Ä–∏–º–µ—Ä–æ–≤.",
            },
        ],
        skipDuplicates: true,
    });
    console.warn("‚úÖ –û—Ç–∑—ã–≤—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã");
    const allCourses = await prismaClient.course.findMany({
        include: { reviews: true },
    });
    for (const course of allCourses) {
        const ratings = course.reviews
            .map((r) => r.rating)
            .filter((r) => typeof r === "number");
        const avg = ratings.length ? ratings.reduce((acc, r) => acc + r, 0) / ratings.length : null;
        await prismaClient.course.update({
            where: { id: course.id },
            data: { avgRating: avg },
        });
    }
    console.warn("üìä –°—Ä–µ–¥–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã");
    const hashedTrainerPassword = await bcrypt_1.default.hash("trainer123", 10);
    const trainer = await prismaClient.user.upsert({
        where: { phone: "+79998887766" },
        update: {},
        create: {
            username: "trainer",
            phone: "+79998887766",
            password: hashedTrainerPassword,
            role: "TRAINER",
            isConfirmed: true,
        },
    });
    console.warn("üë®‚Äçüè´ –¢—Ä–µ–Ω–µ—Ä —Å–æ–∑–¥–∞–Ω");
    const [trainerStep1, trainerStep2] = await prismaClient.$transaction([
        prismaClient.step.create({
            data: {
                title: "–†–∞–∑–º–∏–Ω–∫–∞ –¥–ª—è —Å–æ–±–∞–∫–∏",
                description: "–ù–µ–±–æ–ª—å—à–∞—è —Ä–∞–∑–º–∏–Ω–∫–∞ –ø–µ—Ä–µ–¥ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–æ–π",
                durationSec: 45,
                authorId: trainer.id,
            },
        }),
        prismaClient.step.create({
            data: {
                title: "–ê–ø–ø–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞",
                description: "–£—á–∏–º—Å—è –ø—Ä–∏–Ω–æ—Å–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç—ã",
                durationSec: 90,
                authorId: trainer.id,
            },
        }),
    ]);
    console.warn("‚úÖ –®–∞–≥–∏ —Ç—Ä–µ–Ω–µ—Ä–∞ —Å–æ–∑–¥–∞–Ω—ã");
    const [trainerDay1, trainerDay2] = await prismaClient.$transaction([
        prismaClient.trainingDay.create({
            data: {
                title: "–î–µ–Ω—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ A",
                type: "trainer",
                equipment: "–ë–∞–∑–æ–≤–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ",
                authorId: trainer.id,
            },
        }),
        prismaClient.trainingDay.create({
            data: {
                title: "–î–µ–Ω—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ B",
                type: "trainer",
                equipment: "–ü—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ",
                authorId: trainer.id,
            },
        }),
    ]);
    await prismaClient.stepOnDay.createMany({
        data: [
            { dayId: trainerDay1.id, stepId: trainerStep1.id, order: 1 },
            { dayId: trainerDay1.id, stepId: trainerStep2.id, order: 2 },
            { dayId: trainerDay2.id, stepId: trainerStep2.id, order: 1 },
            { dayId: trainerDay2.id, stepId: trainerStep1.id, order: 2 },
        ],
    });
    console.warn("‚úÖ –î–Ω–∏ —Ç—Ä–µ–Ω–µ—Ä–∞ —Å–æ —Å–≤—è–∑–∞–Ω–Ω—ã–º–∏ —à–∞–≥–∞–º–∏ —Å–æ–∑–¥–∞–Ω—ã");
    const [trainerCourse1, trainerCourse2] = await prismaClient.$transaction([
        prismaClient.course.create({
            data: {
                name: "–ö—É—Ä—Å —Ç—Ä–µ–Ω–µ—Ä–∞ 1",
                type: "trainer-course-1",
                description: "–ü–µ—Ä–≤—ã–π –∫—É—Ä—Å –æ—Ç —Ç—Ä–µ–Ω–µ—Ä–∞",
                shortDesc: "–ö—Ä–∞—Ç–∫–æ –æ –ø–µ—Ä–≤–æ–º –∫—É—Ä—Å–µ",
                duration: "3 –¥–Ω—è",
                logoImg: "/shared/uploads/courses/trainer1.jpg",
                equipment: "–ë–∞–∑–æ–≤–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫",
                trainingLevel: "INTERMEDIATE",
                authorId: trainer.id,
            },
        }),
        prismaClient.course.create({
            data: {
                name: "–ö—É—Ä—Å —Ç—Ä–µ–Ω–µ—Ä–∞ 2",
                type: "trainer-course-2",
                description: "–í—Ç–æ—Ä–æ–π –∫—É—Ä—Å –æ—Ç —Ç—Ä–µ–Ω–µ—Ä–∞",
                shortDesc: "–ö—Ä–∞—Ç–∫–æ –æ –≤—Ç–æ—Ä–æ–º –∫—É—Ä—Å–µ",
                duration: "5 –¥–Ω–µ–π",
                logoImg: "/shared/uploads/courses/trainer2.jpg",
                equipment: "–ü—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ",
                trainingLevel: "ADVANCED",
                authorId: trainer.id,
            },
        }),
    ]);
    // –î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–µ–Ω–µ—Ä—Å–∫–∏–µ –¥–Ω–∏ –≤ –æ–±–∞ –∫—É—Ä—Å–∞
    await prismaClient.dayOnCourse.createMany({
        data: [
            { courseId: trainerCourse1.id, dayId: trainerDay1.id, order: 1 },
            { courseId: trainerCourse1.id, dayId: trainerDay2.id, order: 2 },
            { courseId: trainerCourse2.id, dayId: trainerDay2.id, order: 1 },
            { courseId: trainerCourse2.id, dayId: trainerDay1.id, order: 2 },
        ],
    });
    console.warn("‚úÖ –ö—É—Ä—Å—ã —Ç—Ä–µ–Ω–µ—Ä–∞ —Å–æ–∑–¥–∞–Ω—ã –∏ –¥–Ω–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –Ω–∏—Ö");
    console.warn("‚úÖ Seed —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω");
}
main()
    .then(() => prismaClient.$disconnect())
    .catch((e) => {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–¥–∏—Ä–æ–≤–∞–Ω–∏–∏", e);
    prismaClient.$disconnect().finally(() => process.exit(1));
});
