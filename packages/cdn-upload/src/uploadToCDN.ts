import { S3Client, PutObjectCommand, DeleteObjectCommand } from "@aws-sdk/client-s3";
import { createTrainerPanelLogger } from "@gafus/logger";

const logger = createTrainerPanelLogger('cdn-upload');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ –æ—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
function sanitizeFileName(fileName: string): string {
  // –£–±–∏—Ä–∞–µ–º –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è HTTP –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
  // –†–∞–∑—Ä–µ—à–µ–Ω—ã —Ç–æ–ª—å–∫–æ: A-Z, a-z, 0-9, –¥–µ—Ñ–∏—Å, –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ, —Ç–æ—á–∫–∞
  return fileName
    .replace(/[^a-zA-Z0-9\-_.]/g, '_') // –ó–∞–º–µ–Ω—è–µ–º –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã –Ω–∞ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ
    .replace(/_{2,}/g, '_') // –£–±–∏—Ä–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è
    .substring(0, 100); // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
}

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è Yandex Object Storage (S3-—Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π)
const s3Client = new S3Client({
  endpoint: "https://storage.yandexcloud.net",
  region: "ru-central1",
  credentials: {
    accessKeyId: process.env.YC_ACCESS_KEY_ID || "",
    secretAccessKey: process.env.YC_SECRET_ACCESS_KEY || "",
  },
});

export async function uploadFileToCDN(file: File, relativePath: string): Promise<string> {
  try {
    const bucketName = "gafus-media";
    const key = `uploads/${relativePath}`;


    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º File –≤ Buffer
    const arrayBuffer = await file.arrayBuffer();
    const buffer = Buffer.from(arrayBuffer);

    logger.info(`üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª –≤ CDN: ${relativePath}`);

    // –°–æ–∑–¥–∞–µ–º –∫–æ–º–∞–Ω–¥—É –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
    const command = new PutObjectCommand({
      Bucket: bucketName,
      Key: key,
      Body: buffer,
      ContentType: file.type,
      ContentLength: file.size,
      // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
      CacheControl: "public, max-age=31536000", // 1 –≥–æ–¥
      Metadata: {
        "original-name": sanitizeFileName(file.name),
        "upload-timestamp": Date.now().toString(),
      },
    });

    // –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Å retry –ª–æ–≥–∏–∫–æ–π
    await uploadWithRetry(command, 3);

    logger.info(`‚úÖ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω –≤ CDN: ${relativePath}`);

    return `https://gafus-media.storage.yandexcloud.net/uploads/${relativePath}`;
  } catch (error) {
    logger.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤ CDN: ${error}`);
    throw error;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –∑–∞–≥—Ä—É–∑–∫–∏
async function uploadWithRetry(command: PutObjectCommand, maxRetries: number): Promise<void> {
  let lastError: Error | null = null;

  for (let attempt = 1; attempt <= maxRetries; attempt++) {
    try {
      await s3Client.send(command);
      return; // –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ
    } catch (error) {
      lastError = error as Error;
      logger.warn(`‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ ${attempt}/${maxRetries} –Ω–µ—É–¥–∞—á–Ω–∞: ${error}`);

      if (attempt < maxRetries) {
        // –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞: 1s, 2s, 4s
        const delay = Math.pow(2, attempt - 1) * 1000;
        await new Promise(resolve => setTimeout(resolve, delay));
      }
    }
  }

  throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª –ø–æ—Å–ª–µ ${maxRetries} –ø–æ–ø—ã—Ç–æ–∫: ${lastError?.message}`);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –∏–∑ CDN
export async function deleteFileFromCDN(relativePath: string): Promise<void> {
  try {
    const bucketName = "gafus-media";
    
    // –£–±–∏—Ä–∞–µ–º –≤–µ–¥—É—â–∏–π —Å–ª–µ—à –µ—Å–ª–∏ –µ—Å—Ç—å
    let key = relativePath.startsWith('/') ? relativePath.substring(1) : relativePath;
    
    // –ï—Å–ª–∏ –ø—É—Ç—å –Ω–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å uploads/, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
    if (!key.startsWith('uploads/')) {
      key = `uploads/${key}`;
    }

    logger.info(`üóëÔ∏è –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –∏–∑ CDN: ${key}`);

    const command = new DeleteObjectCommand({
      Bucket: bucketName,
      Key: key,
    });

    await s3Client.send(command);

    logger.info(`‚úÖ –§–∞–π–ª —É–¥–∞–ª–µ–Ω –∏–∑ CDN: ${key}`);
  } catch (error) {
    logger.error(`‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ CDN: ${error}`);
    throw error;
  }
}
