# syntax=docker/dockerfile:1

# Базовый образ с общими зависимостями
FROM node:20-alpine AS base
WORKDIR /app

# Установка pnpm
RUN corepack enable && corepack prepare pnpm@9.1.0 --activate

# Копируем только файлы зависимостей
COPY package.json pnpm-lock.yaml pnpm-workspace.yaml ./
COPY packages/*/package.json ./packages/*/
COPY apps/*/package.json ./apps/*/

# Устанавливаем ВСЕ зависимости
RUN pnpm install --frozen-lockfile

# Копируем исходный код всех пакетов
COPY packages ./packages
COPY apps ./apps

# Генерируем Prisma client
RUN cd packages/prisma && pnpm db:generate

# Создаем .prisma папку в node_modules
RUN mkdir -p /app/node_modules/.prisma
RUN find /app/node_modules/.pnpm -name ".prisma" -type d -exec cp -r {}/client /app/node_modules/.prisma/ \;
RUN find /app/node_modules/.pnpm -name ".prisma" -type d -exec cp -r {}/schema.prisma /app/node_modules/.prisma/ \;

# Билдим все пакеты
RUN pnpm --filter @gafus/types run build
RUN pnpm build --filter @gafus/prisma
RUN pnpm --filter @gafus/auth run build
RUN pnpm build --filter @gafus/worker
RUN pnpm build --filter @gafus/csrf
RUN pnpm build --filter @gafus/error-handling
RUN pnpm build --filter @gafus/queues
RUN pnpm build --filter @gafus/webpush
RUN pnpm build --filter @gafus/react-query
RUN pnpm build --filter @gafus/ui-components
RUN pnpm build --filter @gafus/web
RUN pnpm build --filter @gafus/trainer-panel
RUN pnpm build --filter @gafus/error-dashboard
RUN pnpm build --filter @gafus/bull-board
RUN pnpm build --filter @gafus/telegram-bot
