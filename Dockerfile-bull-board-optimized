# syntax=docker/dockerfile:1

# Используем базовый образ
FROM node:20-alpine AS base
WORKDIR /app

# Установка pnpm
RUN corepack enable && corepack prepare pnpm@9.1.0 --activate

# Копируем только файлы зависимостей
COPY package.json pnpm-lock.yaml pnpm-workspace.yaml ./
COPY packages/auth/package.json ./packages/auth/
COPY packages/csrf/package.json ./packages/csrf/
COPY packages/error-handling/package.json ./packages/error-handling/
COPY packages/prisma/package.json ./packages/prisma/
COPY packages/queues/package.json ./packages/queues/
COPY packages/react-query/package.json ./packages/react-query/
COPY packages/types/package.json ./packages/types/
COPY packages/ui-components/package.json ./packages/ui-components/
COPY packages/webpush/package.json ./packages/webpush/
COPY packages/worker/package.json ./packages/worker/
COPY apps/bull-board/package.json ./apps/bull-board/

# Устанавливаем зависимости
RUN pnpm install --no-frozen-lockfile

# Копируем исходный код всех пакетов
COPY packages ./packages
COPY apps/bull-board ./apps/bull-board

# Генерируем Prisma client
RUN cd packages/prisma && pnpm db:generate

# Создаем .prisma папку в node_modules
RUN mkdir -p /app/node_modules/.prisma
RUN find /app/node_modules/.pnpm -name ".prisma" -type d -exec cp -r {}/client /app/node_modules/.prisma/ \;
RUN find /app/node_modules/.pnpm -name ".prisma" -type d -exec cp -r {}/schema.prisma /app/node_modules/.prisma/ \;

# Билдим все пакеты
RUN pnpm build --filter @gafus/bull-board

# ─────────────────────────────────────────────
# Stage 1: runner — минимальный production
# ─────────────────────────────────────────────
FROM node:20-alpine AS runner
WORKDIR /app

# Создаем пользователя для безопасности
RUN addgroup --system --gid 1001 nodejs
RUN adduser --system --uid 1001 nextjs

# Установка pnpm
RUN corepack enable && corepack prepare pnpm@9.1.0 --activate

# Копируем только production зависимости
COPY package.json pnpm-lock.yaml pnpm-workspace.yaml ./
COPY packages/auth/package.json ./packages/auth/
COPY packages/csrf/package.json ./packages/csrf/
COPY packages/error-handling/package.json ./packages/error-handling/
COPY packages/prisma/package.json ./packages/prisma/
COPY packages/queues/package.json ./packages/queues/
COPY packages/react-query/package.json ./packages/react-query/
COPY packages/types/package.json ./packages/types/
COPY packages/ui-components/package.json ./packages/ui-components/
COPY packages/webpush/package.json ./packages/webpush/
COPY packages/worker/package.json ./packages/worker/
COPY apps/bull-board/package.json ./apps/bull-board/

# Устанавливаем только production зависимости
RUN pnpm install --frozen-lockfile --prod --ignore-scripts

# Копируем только нужные собранные пакеты
COPY --from=base /app/packages/types ./packages/types
COPY --from=base /app/packages/prisma ./packages/prisma
COPY --from=base /app/packages/queues ./packages/queues
COPY --from=base /app/packages/webpush ./packages/webpush

# Копируем собранное приложение
COPY --from=base /app/apps/bull-board/dist ./apps/bull-board/dist
COPY --from=base /app/apps/bull-board/package.json ./apps/bull-board/package.json

# Копируем Prisma schema и client
COPY --from=base /app/packages/prisma/schema.prisma ./packages/prisma/schema.prisma
COPY --from=base /app/node_modules/.prisma ./node_modules/.prisma

# Устанавливаем права доступа
RUN chown -R nextjs:nodejs /app
USER nextjs

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
  CMD wget --no-verbose --tries=1 --spider http://localhost:3002/health || exit 1

# Запускаем приложение
CMD ["node", "apps/bull-board/dist/bull-board.js"]
