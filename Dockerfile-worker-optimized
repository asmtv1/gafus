# syntax=docker/dockerfile:1

# Используем базовый образ
FROM node:20-alpine AS base
WORKDIR /app

# Установка pnpm
RUN corepack enable && corepack prepare pnpm@9.1.0 --activate

# Копируем только файлы зависимостей
COPY package.json pnpm-lock.yaml pnpm-workspace.yaml ./
COPY packages/*/package.json ./packages/*/
COPY apps/worker/package.json ./apps/worker/

# Устанавливаем зависимости
RUN pnpm install --frozen-lockfile

# Копируем исходный код только нужных пакетов
COPY packages/types ./packages/types
COPY packages/prisma ./packages/prisma
COPY packages/queues ./packages/queues
COPY packages/webpush ./packages/webpush
COPY packages/telegram ./packages/telegram
COPY packages/worker ./packages/worker
COPY apps/worker ./apps/worker

# Генерируем Prisma client
RUN cd packages/prisma && pnpm db:generate

# Создаем .prisma папку в node_modules
RUN mkdir -p /app/node_modules/.prisma
RUN find /app/node_modules/.pnpm -name ".prisma" -type d -exec cp -r {}/client /app/node_modules/.prisma/ \;
RUN find /app/node_modules/.pnpm -name ".prisma" -type d -exec cp -r {}/schema.prisma /app/node_modules/.prisma/ \;

# Билдим пакеты в правильном порядке
RUN pnpm --filter @gafus/types run build
RUN pnpm build --filter @gafus/prisma
RUN pnpm build --filter @gafus/queues
RUN pnpm build --filter @gafus/webpush
RUN pnpm build --filter @gafus/telegram
RUN pnpm build --filter @gafus/worker

# ─────────────────────────────────────────────
# Stage 1: runner — минимальный production
# ─────────────────────────────────────────────
FROM node:20-alpine AS runner
WORKDIR /app

# Создаем пользователя для безопасности
RUN addgroup --system --gid 1001 nodejs
RUN adduser --system --uid 1001 nextjs

# Установка pnpm
RUN corepack enable && corepack prepare pnpm@9.1.0 --activate

# Копируем только production зависимости
COPY package.json pnpm-lock.yaml pnpm-workspace.yaml ./
COPY packages/*/package.json ./packages/*/
COPY apps/worker/package.json ./apps/worker/

# Устанавливаем только production зависимости
RUN pnpm install --frozen-lockfile --prod --ignore-scripts

# Копируем собранные пакеты
COPY --from=base /app/packages/types/dist ./packages/types/dist
COPY --from=base /app/packages/types/package.json ./packages/types/package.json
COPY --from=base /app/packages/prisma/dist ./packages/prisma/dist
COPY --from=base /app/packages/prisma/package.json ./packages/prisma/package.json
COPY --from=base /app/packages/queues/dist ./packages/queues/dist
COPY --from=base /app/packages/queues/package.json ./packages/queues/package.json
COPY --from=base /app/packages/webpush/dist ./packages/webpush/dist
COPY --from=base /app/packages/webpush/package.json ./packages/webpush/package.json
COPY --from=base /app/packages/telegram/dist ./packages/telegram/dist
COPY --from=base /app/packages/telegram/package.json ./packages/telegram/package.json
COPY --from=base /app/packages/worker/dist ./packages/worker/dist
COPY --from=base /app/packages/worker/package.json ./packages/worker/package.json

# Копируем собранное приложение
COPY --from=base /app/apps/worker/dist ./apps/worker/dist
COPY --from=base /app/apps/worker/package.json ./apps/worker/package.json

# Копируем Prisma schema и client
COPY --from=base /app/packages/prisma/schema.prisma ./packages/prisma/schema.prisma
COPY --from=base /app/node_modules/.prisma ./node_modules/.prisma

# Устанавливаем права доступа
RUN chown -R nextjs:nodejs /app
USER nextjs

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
  CMD wget --no-verbose --tries=1 --spider http://localhost:3004/health || exit 1

# Запускаем приложение
CMD ["node", "apps/worker/dist/worker.js"]
